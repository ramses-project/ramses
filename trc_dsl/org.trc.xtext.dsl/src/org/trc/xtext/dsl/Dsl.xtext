grammar org.trc.xtext.dsl.Dsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate dsl "http://www.trc.org/xtext/dsl/Dsl"

TrcSpecification returns TrcSpecification :
		froms+=From*	
//		(imports+=Import)*
		moduleList         += ModuleList
		transformationList += TransformationList
		dependencyList     += TransformationDependencyList		
;

//From :
//	'from' ImportUri=STRING
//;


From :
//	'from' importedNamespace = QualifiedNameWithWildcard 
	'from' importURI=STRING ';'
;

//Import returns MyTestImport :
//'import' ( (static?='static' extension?='extension'? importedType=[types::JvmType|QualifiedName] '.' '*') 
//	| importedType=[types::JvmType|QualifiedName]
//	| importedNamespace=QualifiedNameWithWildcard ';'
//)?
//;
//
//QualifiedNameWithWildcard:
//    QualifiedName '.*'?
//;

//Import: 
//     'import' ImportURI=STRING
//     'import' importedNamespace=QualifiedNameWithWildcard
//;
   
Rules :
	name=EString
;  

QualifiedName: ID ('.' ID)* ;

ModuleList returns ModuleList :
	{ModuleList}
'Modules'
	'{'
		(modules+=Modules ( ";" modules+=Modules)* )?
	'}'
;

Modules returns Modules:
		path=EString '::' name=EString ':' ruleName+=Rules ( "," ruleName+=Rules)*
;

TransformationList returns TransformationList :
	'Transformations'
	'{'
		transformations+=Transformation ( "," transformations+=Transformation)*
	'}'
;
	
Transformation returns Transformation :
		name=EString
		'{'
			'modules' ':' modules+=[Modules|EString] ( "," modules+=[Modules|EString])*
			('impacts' ':'  impacts+=TransformationImpact ( "," impacts+=TransformationImpact)* )?
		'}'
;

TransformationImpact returns TransformationImpact:
	'('
		(qualityAttributeName=EString ',')? 
		impactValue=EInt
	')'
;

TransformationDependencyList returns TransformationDependencyList :
		'Dependencies' 
		'{'
		 	name=EString
		 	'{'
				transformationDependencies+=TransformationDependency ( ";" transformationDependencies+=TransformationDependency)* 
			'}'
		'}' 
;

TransformationDependency returns TransformationDependency :
	'Apply'
	'('
//		appliedTransformation=[Transformation|EString]'.'appliedRule=[Rules|EString] ','
		appliedTransformation=[Transformation|EString]'.'appliedRule=EString ','
		'{' fields+=EString ( "," fields+=EString)* '}'
	')'
	'['	
	requiredTransformations+=AbstractRuleDependency ('and' | 'or')? (requiredTransformations+=AbstractRuleDependency)* 
	']'
;

AbstractRuleDependency returns AbstractRuleDependency :
	//RuleDependencyConjunction | RuleDependencyDisjunction | RuleDependency
	RuleDependency
;

RuleDependencyConjunction returns RuleDependencyConjunction:
	''
	requiredTransformations+=AbstractRuleDependency 'and' (requiredTransformations+=AbstractRuleDependency)* 
;

RuleDependencyDisjunction returns RuleDependencyDisjunction:
	'' 
	requiredTransformations+=AbstractRuleDependency 'or' (requiredTransformations+=AbstractRuleDependency)*
	;

RuleDependency returns RuleDependency:
		'requires' rd+=requiresDependency ('and' | 'or')? rd+=requiresDependency* | 'excludes' rd+=excludeDependency ('and' | 'or')? ed+=excludeDependency*
;

requiresDependency returns requiresDependency:
	'('
		requiredTransformation+=[Transformation|EString]'.'requiredRule=EString','fields=EString":"oclExpression=EString
//		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
//		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
	')'	
; 

excludeDependency :
	'('
//		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
		requiredTransformation+=[Transformation|EString]'.'requiredRule=EString',' fields=EString":"oclExpression=EString
//		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
	')'	
;

TransformationElement :
	'TransformationElement'
;

SpecificationElement :
	'SpecificationElement'
;

EString returns ecore::EString:
STRING | ID;

EInt returns ecore::EInt:
'-'? INT;

EBoolean returns ecore::EBoolean:
'true' | 'false';