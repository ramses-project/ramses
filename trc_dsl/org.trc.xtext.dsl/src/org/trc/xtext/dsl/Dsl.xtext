grammar org.trc.xtext.dsl.Dsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate dsl "http://www.trc.org/xtext/dsl/Dsl"

TrcSpecification :
		moduleList         += ModuleList
		transformationList += TransformationList
		dependencyList     += TransformationDependencyList
;

   
trcRule:
	name=EString
;  

ModuleList :
'Modules'
	'{'
		modules+=Module ( ";" modules+=Module)*
	'}'
;

QualifiedName:
ID ('.' ID)*;

Module:
{Module}
		(name=EString ':' rules+=trcRule ( "," rules+=trcRule)*)?
;

TransformationList:
	'Transformations'
	'{'
		transformations+=Transformation ( "," transformations+=Transformation)*
	'}'
; 
	
Transformation:
		name=EString
		'{'
			'modules' ':' modules+=[Module|EString] ( "," modules+=[Module|EString])*
			('impacts' ':'  impacts+=TransformationImpact ( "," impacts+=TransformationImpact)* )?
		'}'
;

TransformationImpact:
	'('
		(qualityAttributeName=EString ',')? 
		impactValue=EInt
	')'
;

TransformationDependencyList:
		'Dependencies' 
		'{'
		 	name=EString
		 	'{'
				transformationDependencies+=TransformationDependency ( ";" transformationDependencies+=TransformationDependency)* 
			'}'
		'}' 
;

TransformationDependency :
	'Apply'
	'('
//		appliedTransformation=[Transformation|EString]'.'appliedRule=[Rules|EString] ','
		appliedTransformation=[Transformation|EString]'.'appliedRule=[trcRule|QualifiedName] ','
		'{' fields+=EString ( "," fields+=EString)* '}'
	')'
	'['	
	
	(requiredTransformations+=AbstractRuleDependency 'and' (requiredTransformations+=AbstractRuleDependency)*  |
	requiredTransformations+=AbstractRuleDependency 'or' (requiredTransformations+=AbstractRuleDependency)* )
//	requiredTransformations+=AbstractRuleDependency ('and' | 'or')? (requiredTransformations+=AbstractRuleDependency)* 
//	requiredTransformations+=AbstractRuleDependency ('and' | 'or')? (requiredTransformations+=AbstractRuleDependency)* 

	']'
;

AbstractRuleDependency:
	//RuleDependencyConjunction | RuleDependencyDisjunction | RuleDependency
	RuleDependency
;

//RuleDependencyConjunction returns RuleDependencyConjunction:
//	requiredTransformations+=AbstractRuleDependency 'and' (requiredTransformations+=AbstractRuleDependency)* 
//;
//
//RuleDependencyDisjunction returns RuleDependencyDisjunction:
//	requiredTransformations+=AbstractRuleDependency 'or' (requiredTransformations+=AbstractRuleDependency)*
//;

RuleDependency :
		'requires' rd+=requiresDependency ('and' | 'or')? rd+=requiresDependency* | 'excludes' rd+=excludeDependency ('and' | 'or')? ed+=excludeDependency*
;

requiresDependency :
	'('
		requiredTransformation+=[Transformation|EString]'.'requiredRule+=[trcRule|QualifiedName]','fields=EString":"oclExpression=EString
//		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
//		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
	')'	
; 

excludeDependency :
	'('
//		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
		requiredTransformation+=[Transformation|EString]'.'requiredRule+=[trcRule|QualifiedName]',' fields=EString":"oclExpression=EString
//		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
	')'	
;

TransformationElement :
	'TransformationElement'
;

SpecificationElement :
	'SpecificationElement'
;

EString returns ecore::EString:
STRING | ID;

EInt returns ecore::EInt:
'-'? INT;

EBoolean returns ecore::EBoolean:
'true' | 'false';