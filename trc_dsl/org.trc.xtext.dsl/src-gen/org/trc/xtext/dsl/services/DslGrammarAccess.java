/*
* generated by Xtext
*/
package org.trc.xtext.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TrcSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrcSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromsFromParserRuleCall_0_0 = (RuleCall)cFromsAssignment_0.eContents().get(0);
		private final Assignment cModuleListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleListModuleListParserRuleCall_1_0 = (RuleCall)cModuleListAssignment_1.eContents().get(0);
		private final Assignment cTransformationListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransformationListTransformationListParserRuleCall_2_0 = (RuleCall)cTransformationListAssignment_2.eContents().get(0);
		private final Assignment cDependencyListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDependencyListTransformationDependencyListParserRuleCall_3_0 = (RuleCall)cDependencyListAssignment_3.eContents().get(0);
		
		//TrcSpecification:
		//	froms+=From* //		(imports+=Import)*
		//	moduleList+=ModuleList transformationList+=TransformationList dependencyList+=TransformationDependencyList;
		public ParserRule getRule() { return rule; }

		//froms+=From* //		(imports+=Import)*
		//moduleList+=ModuleList transformationList+=TransformationList dependencyList+=TransformationDependencyList
		public Group getGroup() { return cGroup; }

		//froms+=From*
		public Assignment getFromsAssignment_0() { return cFromsAssignment_0; }

		//From
		public RuleCall getFromsFromParserRuleCall_0_0() { return cFromsFromParserRuleCall_0_0; }

		////		(imports+=Import)*
		//moduleList+=ModuleList
		public Assignment getModuleListAssignment_1() { return cModuleListAssignment_1; }

		//ModuleList
		public RuleCall getModuleListModuleListParserRuleCall_1_0() { return cModuleListModuleListParserRuleCall_1_0; }

		//transformationList+=TransformationList
		public Assignment getTransformationListAssignment_2() { return cTransformationListAssignment_2; }

		//TransformationList
		public RuleCall getTransformationListTransformationListParserRuleCall_2_0() { return cTransformationListTransformationListParserRuleCall_2_0; }

		//dependencyList+=TransformationDependencyList
		public Assignment getDependencyListAssignment_3() { return cDependencyListAssignment_3; }

		//TransformationDependencyList
		public RuleCall getDependencyListTransformationDependencyListParserRuleCall_3_0() { return cDependencyListTransformationDependencyListParserRuleCall_3_0; }
	}

	public class FromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "From");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////From :
		////	'from' ImportUri=STRING
		////;
		//From: //	'from' importedNamespace = QualifiedNameWithWildcard 
		//	"from" importURI=STRING ";";
		public ParserRule getRule() { return rule; }

		////	'from' importedNamespace = QualifiedNameWithWildcard 
		//"from" importURI=STRING ";"
		public Group getGroup() { return cGroup; }

		////	'from' importedNamespace = QualifiedNameWithWildcard 
		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class RulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rules");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////Import returns MyTestImport :
		////'import' ( (static?='static' extension?='extension'? importedType=[types::JvmType|QualifiedName] '.' '*') 
		////	| importedType=[types::JvmType|QualifiedName]
		////	| importedNamespace=QualifiedNameWithWildcard ';'
		////)?
		////;
		////
		////QualifiedNameWithWildcard:
		////    QualifiedName '.*'?
		////;
		////Import: 
		////     'import' ImportURI=STRING
		////     'import' importedNamespace=QualifiedNameWithWildcard
		////;
		//Rules:
		//	name=EString;
		public ParserRule getRule() { return rule; }

		//name=EString
		public Assignment getNameAssignment() { return cNameAssignment; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0() { return cNameEStringParserRuleCall_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ModuleListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModuleListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModulesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cModulesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cModulesModulesParserRuleCall_3_0_0 = (RuleCall)cModulesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cModulesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cModulesModulesParserRuleCall_3_1_1_0 = (RuleCall)cModulesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ModuleList:
		//	{ModuleList} "Modules" "{" (modules+=Modules (";" modules+=Modules)*)? "}";
		public ParserRule getRule() { return rule; }

		//{ModuleList} "Modules" "{" (modules+=Modules (";" modules+=Modules)*)? "}"
		public Group getGroup() { return cGroup; }

		//{ModuleList}
		public Action getModuleListAction_0() { return cModuleListAction_0; }

		//"Modules"
		public Keyword getModulesKeyword_1() { return cModulesKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(modules+=Modules (";" modules+=Modules)*)?
		public Group getGroup_3() { return cGroup_3; }

		//modules+=Modules
		public Assignment getModulesAssignment_3_0() { return cModulesAssignment_3_0; }

		//Modules
		public RuleCall getModulesModulesParserRuleCall_3_0_0() { return cModulesModulesParserRuleCall_3_0_0; }

		//(";" modules+=Modules)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//";"
		public Keyword getSemicolonKeyword_3_1_0() { return cSemicolonKeyword_3_1_0; }

		//modules+=Modules
		public Assignment getModulesAssignment_3_1_1() { return cModulesAssignment_3_1_1; }

		//Modules
		public RuleCall getModulesModulesParserRuleCall_3_1_1_0() { return cModulesModulesParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ModulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathEStringParserRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRuleNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRuleNameRulesParserRuleCall_4_0 = (RuleCall)cRuleNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRuleNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRuleNameRulesParserRuleCall_5_1_0 = (RuleCall)cRuleNameAssignment_5_1.eContents().get(0);
		
		//Modules:
		//	path=EString "::" name=EString ":" ruleName+=Rules ("," ruleName+=Rules)*;
		public ParserRule getRule() { return rule; }

		//path=EString "::" name=EString ":" ruleName+=Rules ("," ruleName+=Rules)*
		public Group getGroup() { return cGroup; }

		//path=EString
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }

		//EString
		public RuleCall getPathEStringParserRuleCall_0_0() { return cPathEStringParserRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//ruleName+=Rules
		public Assignment getRuleNameAssignment_4() { return cRuleNameAssignment_4; }

		//Rules
		public RuleCall getRuleNameRulesParserRuleCall_4_0() { return cRuleNameRulesParserRuleCall_4_0; }

		//("," ruleName+=Rules)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//ruleName+=Rules
		public Assignment getRuleNameAssignment_5_1() { return cRuleNameAssignment_5_1; }

		//Rules
		public RuleCall getRuleNameRulesParserRuleCall_5_1_0() { return cRuleNameRulesParserRuleCall_5_1_0; }
	}

	public class TransformationListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTransformationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransformationsTransformationParserRuleCall_2_0 = (RuleCall)cTransformationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTransformationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTransformationsTransformationParserRuleCall_3_1_0 = (RuleCall)cTransformationsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TransformationList:
		//	"Transformations" "{" transformations+=Transformation ("," transformations+=Transformation)* "}";
		public ParserRule getRule() { return rule; }

		//"Transformations" "{" transformations+=Transformation ("," transformations+=Transformation)* "}"
		public Group getGroup() { return cGroup; }

		//"Transformations"
		public Keyword getTransformationsKeyword_0() { return cTransformationsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//transformations+=Transformation
		public Assignment getTransformationsAssignment_2() { return cTransformationsAssignment_2; }

		//Transformation
		public RuleCall getTransformationsTransformationParserRuleCall_2_0() { return cTransformationsTransformationParserRuleCall_2_0; }

		//("," transformations+=Transformation)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//transformations+=Transformation
		public Assignment getTransformationsAssignment_3_1() { return cTransformationsAssignment_3_1; }

		//Transformation
		public RuleCall getTransformationsTransformationParserRuleCall_3_1_0() { return cTransformationsTransformationParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cModulesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cModulesModulesCrossReference_4_0 = (CrossReference)cModulesAssignment_4.eContents().get(0);
		private final RuleCall cModulesModulesEStringParserRuleCall_4_0_1 = (RuleCall)cModulesModulesCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cModulesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cModulesModulesCrossReference_5_1_0 = (CrossReference)cModulesAssignment_5_1.eContents().get(0);
		private final RuleCall cModulesModulesEStringParserRuleCall_5_1_0_1 = (RuleCall)cModulesModulesCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cImpactsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cImpactsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cImpactsTransformationImpactParserRuleCall_6_2_0 = (RuleCall)cImpactsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cImpactsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cImpactsTransformationImpactParserRuleCall_6_3_1_0 = (RuleCall)cImpactsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Transformation:
		//	name=EString "{" "modules" ":" modules+=[Modules|EString] ("," modules+=[Modules|EString])* ("impacts" ":"
		//	impacts+=TransformationImpact ("," impacts+=TransformationImpact)*)? "}";
		public ParserRule getRule() { return rule; }

		//name=EString "{" "modules" ":" modules+=[Modules|EString] ("," modules+=[Modules|EString])* ("impacts" ":"
		//impacts+=TransformationImpact ("," impacts+=TransformationImpact)*)? "}"
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"modules"
		public Keyword getModulesKeyword_2() { return cModulesKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//modules+=[Modules|EString]
		public Assignment getModulesAssignment_4() { return cModulesAssignment_4; }

		//[Modules|EString]
		public CrossReference getModulesModulesCrossReference_4_0() { return cModulesModulesCrossReference_4_0; }

		//EString
		public RuleCall getModulesModulesEStringParserRuleCall_4_0_1() { return cModulesModulesEStringParserRuleCall_4_0_1; }

		//("," modules+=[Modules|EString])*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//modules+=[Modules|EString]
		public Assignment getModulesAssignment_5_1() { return cModulesAssignment_5_1; }

		//[Modules|EString]
		public CrossReference getModulesModulesCrossReference_5_1_0() { return cModulesModulesCrossReference_5_1_0; }

		//EString
		public RuleCall getModulesModulesEStringParserRuleCall_5_1_0_1() { return cModulesModulesEStringParserRuleCall_5_1_0_1; }

		//("impacts" ":" impacts+=TransformationImpact ("," impacts+=TransformationImpact)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"impacts"
		public Keyword getImpactsKeyword_6_0() { return cImpactsKeyword_6_0; }

		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//impacts+=TransformationImpact
		public Assignment getImpactsAssignment_6_2() { return cImpactsAssignment_6_2; }

		//TransformationImpact
		public RuleCall getImpactsTransformationImpactParserRuleCall_6_2_0() { return cImpactsTransformationImpactParserRuleCall_6_2_0; }

		//("," impacts+=TransformationImpact)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//impacts+=TransformationImpact
		public Assignment getImpactsAssignment_6_3_1() { return cImpactsAssignment_6_3_1; }

		//TransformationImpact
		public RuleCall getImpactsTransformationImpactParserRuleCall_6_3_1_0() { return cImpactsTransformationImpactParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TransformationImpactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationImpact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cQualityAttributeNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cQualityAttributeNameEStringParserRuleCall_1_0_0 = (RuleCall)cQualityAttributeNameAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cImpactValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImpactValueEIntParserRuleCall_2_0 = (RuleCall)cImpactValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TransformationImpact:
		//	"(" (qualityAttributeName=EString ",")? impactValue=EInt ")";
		public ParserRule getRule() { return rule; }

		//"(" (qualityAttributeName=EString ",")? impactValue=EInt ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//(qualityAttributeName=EString ",")?
		public Group getGroup_1() { return cGroup_1; }

		//qualityAttributeName=EString
		public Assignment getQualityAttributeNameAssignment_1_0() { return cQualityAttributeNameAssignment_1_0; }

		//EString
		public RuleCall getQualityAttributeNameEStringParserRuleCall_1_0_0() { return cQualityAttributeNameEStringParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//impactValue=EInt
		public Assignment getImpactValueAssignment_2() { return cImpactValueAssignment_2; }

		//EInt
		public RuleCall getImpactValueEIntParserRuleCall_2_0() { return cImpactValueEIntParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TransformationDependencyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDependencyList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependenciesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTransformationDependenciesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransformationDependenciesTransformationDependencyParserRuleCall_4_0 = (RuleCall)cTransformationDependenciesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTransformationDependenciesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTransformationDependenciesTransformationDependencyParserRuleCall_5_1_0 = (RuleCall)cTransformationDependenciesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TransformationDependencyList:
		//	"Dependencies" "{" name=EString "{" transformationDependencies+=TransformationDependency (";"
		//	transformationDependencies+=TransformationDependency)* "}" "}";
		public ParserRule getRule() { return rule; }

		//"Dependencies" "{" name=EString "{" transformationDependencies+=TransformationDependency (";"
		//transformationDependencies+=TransformationDependency)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"Dependencies"
		public Keyword getDependenciesKeyword_0() { return cDependenciesKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//transformationDependencies+=TransformationDependency
		public Assignment getTransformationDependenciesAssignment_4() { return cTransformationDependenciesAssignment_4; }

		//TransformationDependency
		public RuleCall getTransformationDependenciesTransformationDependencyParserRuleCall_4_0() { return cTransformationDependenciesTransformationDependencyParserRuleCall_4_0; }

		//(";" transformationDependencies+=TransformationDependency)*
		public Group getGroup_5() { return cGroup_5; }

		//";"
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }

		//transformationDependencies+=TransformationDependency
		public Assignment getTransformationDependenciesAssignment_5_1() { return cTransformationDependenciesAssignment_5_1; }

		//TransformationDependency
		public RuleCall getTransformationDependenciesTransformationDependencyParserRuleCall_5_1_0() { return cTransformationDependenciesTransformationDependencyParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TransformationDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAppliedTransformationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAppliedTransformationTransformationCrossReference_2_0 = (CrossReference)cAppliedTransformationAssignment_2.eContents().get(0);
		private final RuleCall cAppliedTransformationTransformationEStringParserRuleCall_2_0_1 = (RuleCall)cAppliedTransformationTransformationCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAppliedRuleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAppliedRuleEStringParserRuleCall_4_0 = (RuleCall)cAppliedRuleAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFieldsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFieldsEStringParserRuleCall_7_0 = (RuleCall)cFieldsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFieldsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFieldsEStringParserRuleCall_8_1_0 = (RuleCall)cFieldsAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cRequiredTransformationsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cRequiredTransformationsAbstractRuleDependencyParserRuleCall_12_0 = (RuleCall)cRequiredTransformationsAssignment_12.eContents().get(0);
		private final Alternatives cAlternatives_13 = (Alternatives)cGroup.eContents().get(13);
		private final Keyword cAndKeyword_13_0 = (Keyword)cAlternatives_13.eContents().get(0);
		private final Keyword cOrKeyword_13_1 = (Keyword)cAlternatives_13.eContents().get(1);
		private final Assignment cRequiredTransformationsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cRequiredTransformationsAbstractRuleDependencyParserRuleCall_14_0 = (RuleCall)cRequiredTransformationsAssignment_14.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//TransformationDependency:
		//	"Apply" "(" //		appliedTransformation=[Transformation|EString]'.'appliedRule=[Rules|EString] ','
		//	appliedTransformation=[Transformation|EString] "." appliedRule=EString "," "{" fields+=EString ("," fields+=EString)*
		//	"}" ")" "[" requiredTransformations+=AbstractRuleDependency ("and" | "or")?
		//	requiredTransformations+=AbstractRuleDependency* "]";
		public ParserRule getRule() { return rule; }

		//"Apply" "(" //		appliedTransformation=[Transformation|EString]'.'appliedRule=[Rules|EString] ','
		//appliedTransformation=[Transformation|EString] "." appliedRule=EString "," "{" fields+=EString ("," fields+=EString)*
		//"}" ")" "[" requiredTransformations+=AbstractRuleDependency ("and" | "or")?
		//requiredTransformations+=AbstractRuleDependency* "]"
		public Group getGroup() { return cGroup; }

		//"Apply"
		public Keyword getApplyKeyword_0() { return cApplyKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		////		appliedTransformation=[Transformation|EString]'.'appliedRule=[Rules|EString] ','
		//appliedTransformation=[Transformation|EString]
		public Assignment getAppliedTransformationAssignment_2() { return cAppliedTransformationAssignment_2; }

		//[Transformation|EString]
		public CrossReference getAppliedTransformationTransformationCrossReference_2_0() { return cAppliedTransformationTransformationCrossReference_2_0; }

		//EString
		public RuleCall getAppliedTransformationTransformationEStringParserRuleCall_2_0_1() { return cAppliedTransformationTransformationEStringParserRuleCall_2_0_1; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//appliedRule=EString
		public Assignment getAppliedRuleAssignment_4() { return cAppliedRuleAssignment_4; }

		//EString
		public RuleCall getAppliedRuleEStringParserRuleCall_4_0() { return cAppliedRuleEStringParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//fields+=EString
		public Assignment getFieldsAssignment_7() { return cFieldsAssignment_7; }

		//EString
		public RuleCall getFieldsEStringParserRuleCall_7_0() { return cFieldsEStringParserRuleCall_7_0; }

		//("," fields+=EString)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//fields+=EString
		public Assignment getFieldsAssignment_8_1() { return cFieldsAssignment_8_1; }

		//EString
		public RuleCall getFieldsEStringParserRuleCall_8_1_0() { return cFieldsEStringParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//"["
		public Keyword getLeftSquareBracketKeyword_11() { return cLeftSquareBracketKeyword_11; }

		//requiredTransformations+=AbstractRuleDependency
		public Assignment getRequiredTransformationsAssignment_12() { return cRequiredTransformationsAssignment_12; }

		//AbstractRuleDependency
		public RuleCall getRequiredTransformationsAbstractRuleDependencyParserRuleCall_12_0() { return cRequiredTransformationsAbstractRuleDependencyParserRuleCall_12_0; }

		//("and" | "or")?
		public Alternatives getAlternatives_13() { return cAlternatives_13; }

		//"and"
		public Keyword getAndKeyword_13_0() { return cAndKeyword_13_0; }

		//"or"
		public Keyword getOrKeyword_13_1() { return cOrKeyword_13_1; }

		//requiredTransformations+=AbstractRuleDependency*
		public Assignment getRequiredTransformationsAssignment_14() { return cRequiredTransformationsAssignment_14; }

		//AbstractRuleDependency
		public RuleCall getRequiredTransformationsAbstractRuleDependencyParserRuleCall_14_0() { return cRequiredTransformationsAbstractRuleDependencyParserRuleCall_14_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_15() { return cRightSquareBracketKeyword_15; }
	}

	public class AbstractRuleDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRuleDependency");
		private final RuleCall cRuleDependencyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractRuleDependency: //RuleDependencyConjunction | RuleDependencyDisjunction | RuleDependency
		//	RuleDependency;
		public ParserRule getRule() { return rule; }

		////RuleDependencyConjunction | RuleDependencyDisjunction | RuleDependency
		//RuleDependency
		public RuleCall getRuleDependencyParserRuleCall() { return cRuleDependencyParserRuleCall; }
	}

	public class RuleDependencyConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDependencyConjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequiredTransformationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_0 = (RuleCall)cRequiredTransformationsAssignment_1.eContents().get(0);
		private final Keyword cAndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRequiredTransformationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRequiredTransformationsAbstractRuleDependencyParserRuleCall_3_0 = (RuleCall)cRequiredTransformationsAssignment_3.eContents().get(0);
		
		//RuleDependencyConjunction:
		//	"" requiredTransformations+=AbstractRuleDependency "and" requiredTransformations+=AbstractRuleDependency*;
		public ParserRule getRule() { return rule; }

		//"" requiredTransformations+=AbstractRuleDependency "and" requiredTransformations+=AbstractRuleDependency*
		public Group getGroup() { return cGroup; }

		//""
		public Keyword getKeyword_0() { return cKeyword_0; }

		//requiredTransformations+=AbstractRuleDependency
		public Assignment getRequiredTransformationsAssignment_1() { return cRequiredTransformationsAssignment_1; }

		//AbstractRuleDependency
		public RuleCall getRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_0() { return cRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_0; }

		//"and"
		public Keyword getAndKeyword_2() { return cAndKeyword_2; }

		//requiredTransformations+=AbstractRuleDependency*
		public Assignment getRequiredTransformationsAssignment_3() { return cRequiredTransformationsAssignment_3; }

		//AbstractRuleDependency
		public RuleCall getRequiredTransformationsAbstractRuleDependencyParserRuleCall_3_0() { return cRequiredTransformationsAbstractRuleDependencyParserRuleCall_3_0; }
	}

	public class RuleDependencyDisjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDependencyDisjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequiredTransformationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_0 = (RuleCall)cRequiredTransformationsAssignment_1.eContents().get(0);
		private final Keyword cOrKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRequiredTransformationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRequiredTransformationsAbstractRuleDependencyParserRuleCall_3_0 = (RuleCall)cRequiredTransformationsAssignment_3.eContents().get(0);
		
		//RuleDependencyDisjunction:
		//	"" requiredTransformations+=AbstractRuleDependency "or" requiredTransformations+=AbstractRuleDependency*;
		public ParserRule getRule() { return rule; }

		//"" requiredTransformations+=AbstractRuleDependency "or" requiredTransformations+=AbstractRuleDependency*
		public Group getGroup() { return cGroup; }

		//""
		public Keyword getKeyword_0() { return cKeyword_0; }

		//requiredTransformations+=AbstractRuleDependency
		public Assignment getRequiredTransformationsAssignment_1() { return cRequiredTransformationsAssignment_1; }

		//AbstractRuleDependency
		public RuleCall getRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_0() { return cRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_0; }

		//"or"
		public Keyword getOrKeyword_2() { return cOrKeyword_2; }

		//requiredTransformations+=AbstractRuleDependency*
		public Assignment getRequiredTransformationsAssignment_3() { return cRequiredTransformationsAssignment_3; }

		//AbstractRuleDependency
		public RuleCall getRequiredTransformationsAbstractRuleDependencyParserRuleCall_3_0() { return cRequiredTransformationsAbstractRuleDependencyParserRuleCall_3_0; }
	}

	public class RuleDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDependency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRequiresKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRdRequiresDependencyParserRuleCall_0_1_0 = (RuleCall)cRdAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Keyword cAndKeyword_0_2_0 = (Keyword)cAlternatives_0_2.eContents().get(0);
		private final Keyword cOrKeyword_0_2_1 = (Keyword)cAlternatives_0_2.eContents().get(1);
		private final Assignment cRdAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRdRequiresDependencyParserRuleCall_0_3_0 = (RuleCall)cRdAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExcludesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRdExcludeDependencyParserRuleCall_1_1_0 = (RuleCall)cRdAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Keyword cAndKeyword_1_2_0 = (Keyword)cAlternatives_1_2.eContents().get(0);
		private final Keyword cOrKeyword_1_2_1 = (Keyword)cAlternatives_1_2.eContents().get(1);
		private final Assignment cEdAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEdExcludeDependencyParserRuleCall_1_3_0 = (RuleCall)cEdAssignment_1_3.eContents().get(0);
		
		//RuleDependency:
		//	"requires" rd+=requiresDependency ("and" | "or")? rd+=requiresDependency* | "excludes" rd+=excludeDependency ("and" |
		//	"or")? ed+=excludeDependency*;
		public ParserRule getRule() { return rule; }

		//"requires" rd+=requiresDependency ("and" | "or")? rd+=requiresDependency* | "excludes" rd+=excludeDependency ("and" |
		//"or")? ed+=excludeDependency*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"requires" rd+=requiresDependency ("and" | "or")? rd+=requiresDependency*
		public Group getGroup_0() { return cGroup_0; }

		//"requires"
		public Keyword getRequiresKeyword_0_0() { return cRequiresKeyword_0_0; }

		//rd+=requiresDependency
		public Assignment getRdAssignment_0_1() { return cRdAssignment_0_1; }

		//requiresDependency
		public RuleCall getRdRequiresDependencyParserRuleCall_0_1_0() { return cRdRequiresDependencyParserRuleCall_0_1_0; }

		//("and" | "or")?
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//"and"
		public Keyword getAndKeyword_0_2_0() { return cAndKeyword_0_2_0; }

		//"or"
		public Keyword getOrKeyword_0_2_1() { return cOrKeyword_0_2_1; }

		//rd+=requiresDependency*
		public Assignment getRdAssignment_0_3() { return cRdAssignment_0_3; }

		//requiresDependency
		public RuleCall getRdRequiresDependencyParserRuleCall_0_3_0() { return cRdRequiresDependencyParserRuleCall_0_3_0; }

		//"excludes" rd+=excludeDependency ("and" | "or")? ed+=excludeDependency*
		public Group getGroup_1() { return cGroup_1; }

		//"excludes"
		public Keyword getExcludesKeyword_1_0() { return cExcludesKeyword_1_0; }

		//rd+=excludeDependency
		public Assignment getRdAssignment_1_1() { return cRdAssignment_1_1; }

		//excludeDependency
		public RuleCall getRdExcludeDependencyParserRuleCall_1_1_0() { return cRdExcludeDependencyParserRuleCall_1_1_0; }

		//("and" | "or")?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//"and"
		public Keyword getAndKeyword_1_2_0() { return cAndKeyword_1_2_0; }

		//"or"
		public Keyword getOrKeyword_1_2_1() { return cOrKeyword_1_2_1; }

		//ed+=excludeDependency*
		public Assignment getEdAssignment_1_3() { return cEdAssignment_1_3; }

		//excludeDependency
		public RuleCall getEdExcludeDependencyParserRuleCall_1_3_0() { return cEdExcludeDependencyParserRuleCall_1_3_0; }
	}

	public class RequiresDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "requiresDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequiredTransformationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRequiredTransformationTransformationCrossReference_1_0 = (CrossReference)cRequiredTransformationAssignment_1.eContents().get(0);
		private final RuleCall cRequiredTransformationTransformationEStringParserRuleCall_1_0_1 = (RuleCall)cRequiredTransformationTransformationCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRequiredRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRequiredRuleEStringParserRuleCall_3_0 = (RuleCall)cRequiredRuleAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldsEStringParserRuleCall_5_0 = (RuleCall)cFieldsAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOclExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOclExpressionEStringParserRuleCall_7_0 = (RuleCall)cOclExpressionAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//requiresDependency:
		//	"(" requiredTransformation+=[Transformation|EString] "." requiredRule=EString "," fields=EString ":"
		//	oclExpression=EString //		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
		//	//		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
		//	")";
		public ParserRule getRule() { return rule; }

		//"(" requiredTransformation+=[Transformation|EString] "." requiredRule=EString "," fields=EString ":"
		//oclExpression=EString //		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
		////		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
		//")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//requiredTransformation+=[Transformation|EString]
		public Assignment getRequiredTransformationAssignment_1() { return cRequiredTransformationAssignment_1; }

		//[Transformation|EString]
		public CrossReference getRequiredTransformationTransformationCrossReference_1_0() { return cRequiredTransformationTransformationCrossReference_1_0; }

		//EString
		public RuleCall getRequiredTransformationTransformationEStringParserRuleCall_1_0_1() { return cRequiredTransformationTransformationEStringParserRuleCall_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//requiredRule=EString
		public Assignment getRequiredRuleAssignment_3() { return cRequiredRuleAssignment_3; }

		//EString
		public RuleCall getRequiredRuleEStringParserRuleCall_3_0() { return cRequiredRuleEStringParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//fields=EString
		public Assignment getFieldsAssignment_5() { return cFieldsAssignment_5; }

		//EString
		public RuleCall getFieldsEStringParserRuleCall_5_0() { return cFieldsEStringParserRuleCall_5_0; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//oclExpression=EString
		public Assignment getOclExpressionAssignment_7() { return cOclExpressionAssignment_7; }

		//EString
		public RuleCall getOclExpressionEStringParserRuleCall_7_0() { return cOclExpressionEStringParserRuleCall_7_0; }

		////		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
		////		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class ExcludeDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "excludeDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequiredTransformationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRequiredTransformationTransformationCrossReference_1_0 = (CrossReference)cRequiredTransformationAssignment_1.eContents().get(0);
		private final RuleCall cRequiredTransformationTransformationEStringParserRuleCall_1_0_1 = (RuleCall)cRequiredTransformationTransformationCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRequiredRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRequiredRuleEStringParserRuleCall_3_0 = (RuleCall)cRequiredRuleAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldsEStringParserRuleCall_5_0 = (RuleCall)cFieldsAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOclExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOclExpressionEStringParserRuleCall_7_0 = (RuleCall)cOclExpressionAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//excludeDependency:
		//	"(" //		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
		//	requiredTransformation+=[Transformation|EString] "." requiredRule=EString "," fields=EString ":" oclExpression=EString //		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
		//	")";
		public ParserRule getRule() { return rule; }

		//"(" //		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
		//requiredTransformation+=[Transformation|EString] "." requiredRule=EString "," fields=EString ":" oclExpression=EString //		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
		//")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		////		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
		//requiredTransformation+=[Transformation|EString]
		public Assignment getRequiredTransformationAssignment_1() { return cRequiredTransformationAssignment_1; }

		//[Transformation|EString]
		public CrossReference getRequiredTransformationTransformationCrossReference_1_0() { return cRequiredTransformationTransformationCrossReference_1_0; }

		//EString
		public RuleCall getRequiredTransformationTransformationEStringParserRuleCall_1_0_1() { return cRequiredTransformationTransformationEStringParserRuleCall_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//requiredRule=EString
		public Assignment getRequiredRuleAssignment_3() { return cRequiredRuleAssignment_3; }

		//EString
		public RuleCall getRequiredRuleEStringParserRuleCall_3_0() { return cRequiredRuleEStringParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//fields=EString
		public Assignment getFieldsAssignment_5() { return cFieldsAssignment_5; }

		//EString
		public RuleCall getFieldsEStringParserRuleCall_5_0() { return cFieldsEStringParserRuleCall_5_0; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//oclExpression=EString
		public Assignment getOclExpressionAssignment_7() { return cOclExpressionAssignment_7; }

		//EString
		public RuleCall getOclExpressionEStringParserRuleCall_7_0() { return cOclExpressionEStringParserRuleCall_7_0; }

		////		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class TransformationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationElement");
		private final Keyword cTransformationElementKeyword = (Keyword)rule.eContents().get(1);
		
		//TransformationElement:
		//	"TransformationElement";
		public ParserRule getRule() { return rule; }

		//"TransformationElement"
		public Keyword getTransformationElementKeyword() { return cTransformationElementKeyword; }
	}

	public class SpecificationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificationElement");
		private final Keyword cSpecificationElementKeyword = (Keyword)rule.eContents().get(1);
		
		//SpecificationElement:
		//	"SpecificationElement";
		public ParserRule getRule() { return rule; }

		//"SpecificationElement"
		public Keyword getSpecificationElementKeyword() { return cSpecificationElementKeyword; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private TrcSpecificationElements pTrcSpecification;
	private FromElements pFrom;
	private RulesElements pRules;
	private QualifiedNameElements pQualifiedName;
	private ModuleListElements pModuleList;
	private ModulesElements pModules;
	private TransformationListElements pTransformationList;
	private TransformationElements pTransformation;
	private TransformationImpactElements pTransformationImpact;
	private TransformationDependencyListElements pTransformationDependencyList;
	private TransformationDependencyElements pTransformationDependency;
	private AbstractRuleDependencyElements pAbstractRuleDependency;
	private RuleDependencyConjunctionElements pRuleDependencyConjunction;
	private RuleDependencyDisjunctionElements pRuleDependencyDisjunction;
	private RuleDependencyElements pRuleDependency;
	private RequiresDependencyElements pRequiresDependency;
	private ExcludeDependencyElements pExcludeDependency;
	private TransformationElementElements pTransformationElement;
	private SpecificationElementElements pSpecificationElement;
	private EStringElements pEString;
	private EIntElements pEInt;
	private EBooleanElements pEBoolean;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.trc.xtext.dsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TrcSpecification:
	//	froms+=From* //		(imports+=Import)*
	//	moduleList+=ModuleList transformationList+=TransformationList dependencyList+=TransformationDependencyList;
	public TrcSpecificationElements getTrcSpecificationAccess() {
		return (pTrcSpecification != null) ? pTrcSpecification : (pTrcSpecification = new TrcSpecificationElements());
	}
	
	public ParserRule getTrcSpecificationRule() {
		return getTrcSpecificationAccess().getRule();
	}

	////From :
	////	'from' ImportUri=STRING
	////;
	//From: //	'from' importedNamespace = QualifiedNameWithWildcard 
	//	"from" importURI=STRING ";";
	public FromElements getFromAccess() {
		return (pFrom != null) ? pFrom : (pFrom = new FromElements());
	}
	
	public ParserRule getFromRule() {
		return getFromAccess().getRule();
	}

	////Import returns MyTestImport :
	////'import' ( (static?='static' extension?='extension'? importedType=[types::JvmType|QualifiedName] '.' '*') 
	////	| importedType=[types::JvmType|QualifiedName]
	////	| importedNamespace=QualifiedNameWithWildcard ';'
	////)?
	////;
	////
	////QualifiedNameWithWildcard:
	////    QualifiedName '.*'?
	////;
	////Import: 
	////     'import' ImportURI=STRING
	////     'import' importedNamespace=QualifiedNameWithWildcard
	////;
	//Rules:
	//	name=EString;
	public RulesElements getRulesAccess() {
		return (pRules != null) ? pRules : (pRules = new RulesElements());
	}
	
	public ParserRule getRulesRule() {
		return getRulesAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ModuleList:
	//	{ModuleList} "Modules" "{" (modules+=Modules (";" modules+=Modules)*)? "}";
	public ModuleListElements getModuleListAccess() {
		return (pModuleList != null) ? pModuleList : (pModuleList = new ModuleListElements());
	}
	
	public ParserRule getModuleListRule() {
		return getModuleListAccess().getRule();
	}

	//Modules:
	//	path=EString "::" name=EString ":" ruleName+=Rules ("," ruleName+=Rules)*;
	public ModulesElements getModulesAccess() {
		return (pModules != null) ? pModules : (pModules = new ModulesElements());
	}
	
	public ParserRule getModulesRule() {
		return getModulesAccess().getRule();
	}

	//TransformationList:
	//	"Transformations" "{" transformations+=Transformation ("," transformations+=Transformation)* "}";
	public TransformationListElements getTransformationListAccess() {
		return (pTransformationList != null) ? pTransformationList : (pTransformationList = new TransformationListElements());
	}
	
	public ParserRule getTransformationListRule() {
		return getTransformationListAccess().getRule();
	}

	//Transformation:
	//	name=EString "{" "modules" ":" modules+=[Modules|EString] ("," modules+=[Modules|EString])* ("impacts" ":"
	//	impacts+=TransformationImpact ("," impacts+=TransformationImpact)*)? "}";
	public TransformationElements getTransformationAccess() {
		return (pTransformation != null) ? pTransformation : (pTransformation = new TransformationElements());
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}

	//TransformationImpact:
	//	"(" (qualityAttributeName=EString ",")? impactValue=EInt ")";
	public TransformationImpactElements getTransformationImpactAccess() {
		return (pTransformationImpact != null) ? pTransformationImpact : (pTransformationImpact = new TransformationImpactElements());
	}
	
	public ParserRule getTransformationImpactRule() {
		return getTransformationImpactAccess().getRule();
	}

	//TransformationDependencyList:
	//	"Dependencies" "{" name=EString "{" transformationDependencies+=TransformationDependency (";"
	//	transformationDependencies+=TransformationDependency)* "}" "}";
	public TransformationDependencyListElements getTransformationDependencyListAccess() {
		return (pTransformationDependencyList != null) ? pTransformationDependencyList : (pTransformationDependencyList = new TransformationDependencyListElements());
	}
	
	public ParserRule getTransformationDependencyListRule() {
		return getTransformationDependencyListAccess().getRule();
	}

	//TransformationDependency:
	//	"Apply" "(" //		appliedTransformation=[Transformation|EString]'.'appliedRule=[Rules|EString] ','
	//	appliedTransformation=[Transformation|EString] "." appliedRule=EString "," "{" fields+=EString ("," fields+=EString)*
	//	"}" ")" "[" requiredTransformations+=AbstractRuleDependency ("and" | "or")?
	//	requiredTransformations+=AbstractRuleDependency* "]";
	public TransformationDependencyElements getTransformationDependencyAccess() {
		return (pTransformationDependency != null) ? pTransformationDependency : (pTransformationDependency = new TransformationDependencyElements());
	}
	
	public ParserRule getTransformationDependencyRule() {
		return getTransformationDependencyAccess().getRule();
	}

	//AbstractRuleDependency: //RuleDependencyConjunction | RuleDependencyDisjunction | RuleDependency
	//	RuleDependency;
	public AbstractRuleDependencyElements getAbstractRuleDependencyAccess() {
		return (pAbstractRuleDependency != null) ? pAbstractRuleDependency : (pAbstractRuleDependency = new AbstractRuleDependencyElements());
	}
	
	public ParserRule getAbstractRuleDependencyRule() {
		return getAbstractRuleDependencyAccess().getRule();
	}

	//RuleDependencyConjunction:
	//	"" requiredTransformations+=AbstractRuleDependency "and" requiredTransformations+=AbstractRuleDependency*;
	public RuleDependencyConjunctionElements getRuleDependencyConjunctionAccess() {
		return (pRuleDependencyConjunction != null) ? pRuleDependencyConjunction : (pRuleDependencyConjunction = new RuleDependencyConjunctionElements());
	}
	
	public ParserRule getRuleDependencyConjunctionRule() {
		return getRuleDependencyConjunctionAccess().getRule();
	}

	//RuleDependencyDisjunction:
	//	"" requiredTransformations+=AbstractRuleDependency "or" requiredTransformations+=AbstractRuleDependency*;
	public RuleDependencyDisjunctionElements getRuleDependencyDisjunctionAccess() {
		return (pRuleDependencyDisjunction != null) ? pRuleDependencyDisjunction : (pRuleDependencyDisjunction = new RuleDependencyDisjunctionElements());
	}
	
	public ParserRule getRuleDependencyDisjunctionRule() {
		return getRuleDependencyDisjunctionAccess().getRule();
	}

	//RuleDependency:
	//	"requires" rd+=requiresDependency ("and" | "or")? rd+=requiresDependency* | "excludes" rd+=excludeDependency ("and" |
	//	"or")? ed+=excludeDependency*;
	public RuleDependencyElements getRuleDependencyAccess() {
		return (pRuleDependency != null) ? pRuleDependency : (pRuleDependency = new RuleDependencyElements());
	}
	
	public ParserRule getRuleDependencyRule() {
		return getRuleDependencyAccess().getRule();
	}

	//requiresDependency:
	//	"(" requiredTransformation+=[Transformation|EString] "." requiredRule=EString "," fields=EString ":"
	//	oclExpression=EString //		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
	//	//		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
	//	")";
	public RequiresDependencyElements getRequiresDependencyAccess() {
		return (pRequiresDependency != null) ? pRequiresDependency : (pRequiresDependency = new RequiresDependencyElements());
	}
	
	public ParserRule getRequiresDependencyRule() {
		return getRequiresDependencyAccess().getRule();
	}

	//excludeDependency:
	//	"(" //		requiredTransformation+=[Transformation|EString]'.'requiredRule=[Rules|EString]','fields=EString":"oclExpression=EString
	//	requiredTransformation+=[Transformation|EString] "." requiredRule=EString "," fields=EString ":" oclExpression=EString //		'.'fieldNames+=EString ( "," fieldNames+=EString)* 
	//	")";
	public ExcludeDependencyElements getExcludeDependencyAccess() {
		return (pExcludeDependency != null) ? pExcludeDependency : (pExcludeDependency = new ExcludeDependencyElements());
	}
	
	public ParserRule getExcludeDependencyRule() {
		return getExcludeDependencyAccess().getRule();
	}

	//TransformationElement:
	//	"TransformationElement";
	public TransformationElementElements getTransformationElementAccess() {
		return (pTransformationElement != null) ? pTransformationElement : (pTransformationElement = new TransformationElementElements());
	}
	
	public ParserRule getTransformationElementRule() {
		return getTransformationElementAccess().getRule();
	}

	//SpecificationElement:
	//	"SpecificationElement";
	public SpecificationElementElements getSpecificationElementAccess() {
		return (pSpecificationElement != null) ? pSpecificationElement : (pSpecificationElement = new SpecificationElementElements());
	}
	
	public ParserRule getSpecificationElementRule() {
		return getSpecificationElementAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
