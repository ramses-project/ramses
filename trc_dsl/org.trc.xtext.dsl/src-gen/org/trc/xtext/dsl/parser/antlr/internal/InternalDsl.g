/*
* generated by Xtext
*/
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.trc.xtext.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.trc.xtext.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.trc.xtext.dsl.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;
 	
    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "TrcSpecification";	
   	}
   	
   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTrcSpecification
entryRuleTrcSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrcSpecificationRule()); }
	 iv_ruleTrcSpecification=ruleTrcSpecification 
	 { $current=$iv_ruleTrcSpecification.current; } 
	 EOF 
;

// Rule TrcSpecification
ruleTrcSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTrcSpecificationAccess().getModuleListModuleListParserRuleCall_0_0()); 
	    }
		lv_moduleList_0_0=ruleModuleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrcSpecificationRule());
	        }
       		add(
       			$current, 
       			"moduleList",
        		lv_moduleList_0_0, 
        		"ModuleList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTrcSpecificationAccess().getTransformationListTransformationListParserRuleCall_1_0()); 
	    }
		lv_transformationList_1_0=ruleTransformationList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrcSpecificationRule());
	        }
       		add(
       			$current, 
       			"transformationList",
        		lv_transformationList_1_0, 
        		"TransformationList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTrcSpecificationAccess().getDependencyListTransformationDependencyListParserRuleCall_2_0()); 
	    }
		lv_dependencyList_2_0=ruleTransformationDependencyList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrcSpecificationRule());
	        }
       		add(
       			$current, 
       			"dependencyList",
        		lv_dependencyList_2_0, 
        		"TransformationDependencyList");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuletrcRule
entryRuletrcRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrcRuleRule()); }
	 iv_ruletrcRule=ruletrcRule 
	 { $current=$iv_ruletrcRule.current; } 
	 EOF 
;

// Rule trcRule
ruletrcRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrcRuleAccess().getNameEStringParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrcRuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleModuleList
entryRuleModuleList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleListRule()); }
	 iv_ruleModuleList=ruleModuleList 
	 { $current=$iv_ruleModuleList.current; } 
	 EOF 
;

// Rule ModuleList
ruleModuleList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Modules' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleListAccess().getModulesKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleListAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleListAccess().getModulesModuleParserRuleCall_2_0()); 
	    }
		lv_modules_2_0=ruleModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleListRule());
	        }
       		add(
       			$current, 
       			"modules",
        		lv_modules_2_0, 
        		"Module");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleListAccess().getSemicolonKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleListAccess().getModulesModuleParserRuleCall_3_1_0()); 
	    }
		lv_modules_4_0=ruleModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleListRule());
	        }
       		add(
       			$current, 
       			"modules",
        		lv_modules_4_0, 
        		"Module");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModuleListAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModuleAccess().getModuleAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getNameEStringParserRuleCall_1_0_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getColonKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getRulesTrcRuleParserRuleCall_1_2_0()); 
	    }
		lv_rules_3_0=ruletrcRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_3_0, 
        		"trcRule");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModuleAccess().getCommaKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getRulesTrcRuleParserRuleCall_1_3_1_0()); 
	    }
		lv_rules_5_0=ruletrcRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_5_0, 
        		"trcRule");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleTransformationList
entryRuleTransformationList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationListRule()); }
	 iv_ruleTransformationList=ruleTransformationList 
	 { $current=$iv_ruleTransformationList.current; } 
	 EOF 
;

// Rule TransformationList
ruleTransformationList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Transformations' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransformationListAccess().getTransformationsKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransformationListAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationListAccess().getTransformationsTransformationParserRuleCall_2_0()); 
	    }
		lv_transformations_2_0=ruleTransformation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationListRule());
	        }
       		add(
       			$current, 
       			"transformations",
        		lv_transformations_2_0, 
        		"Transformation");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransformationListAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationListAccess().getTransformationsTransformationParserRuleCall_3_1_0()); 
	    }
		lv_transformations_4_0=ruleTransformation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationListRule());
	        }
       		add(
       			$current, 
       			"transformations",
        		lv_transformations_4_0, 
        		"Transformation");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransformationListAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTransformation
entryRuleTransformation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationRule()); }
	 iv_ruleTransformation=ruleTransformation 
	 { $current=$iv_ruleTransformation.current; } 
	 EOF 
;

// Rule Transformation
ruleTransformation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransformationAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='modules' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransformationAccess().getModulesKeyword_2());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransformationAccess().getColonKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTransformationAccess().getModulesModuleCrossReference_4_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransformationAccess().getCommaKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTransformationAccess().getModulesModuleCrossReference_5_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_7='impacts' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransformationAccess().getImpactsKeyword_6_0());
    }
	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransformationAccess().getColonKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationAccess().getImpactsTransformationImpactParserRuleCall_6_2_0()); 
	    }
		lv_impacts_9_0=ruleTransformationImpact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationRule());
	        }
       		add(
       			$current, 
       			"impacts",
        		lv_impacts_9_0, 
        		"TransformationImpact");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTransformationAccess().getCommaKeyword_6_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationAccess().getImpactsTransformationImpactParserRuleCall_6_3_1_0()); 
	    }
		lv_impacts_11_0=ruleTransformationImpact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationRule());
	        }
       		add(
       			$current, 
       			"impacts",
        		lv_impacts_11_0, 
        		"TransformationImpact");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTransformationAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleTransformationImpact
entryRuleTransformationImpact returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationImpactRule()); }
	 iv_ruleTransformationImpact=ruleTransformationImpact 
	 { $current=$iv_ruleTransformationImpact.current; } 
	 EOF 
;

// Rule TransformationImpact
ruleTransformationImpact returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransformationImpactAccess().getLeftParenthesisKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationImpactAccess().getQualityAttributeNameEStringParserRuleCall_1_0_0()); 
	    }
		lv_qualityAttributeName_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationImpactRule());
	        }
       		set(
       			$current, 
       			"qualityAttributeName",
        		lv_qualityAttributeName_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransformationImpactAccess().getCommaKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationImpactAccess().getImpactValueEIntParserRuleCall_2_0()); 
	    }
		lv_impactValue_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationImpactRule());
	        }
       		set(
       			$current, 
       			"impactValue",
        		lv_impactValue_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransformationImpactAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTransformationDependencyList
entryRuleTransformationDependencyList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationDependencyListRule()); }
	 iv_ruleTransformationDependencyList=ruleTransformationDependencyList 
	 { $current=$iv_ruleTransformationDependencyList.current; } 
	 EOF 
;

// Rule TransformationDependencyList
ruleTransformationDependencyList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Dependencies' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransformationDependencyListAccess().getDependenciesKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransformationDependencyListAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyListAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyListRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransformationDependencyListAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyListAccess().getTransformationDependenciesTransformationDependencyParserRuleCall_4_0()); 
	    }
		lv_transformationDependencies_4_0=ruleTransformationDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyListRule());
	        }
       		add(
       			$current, 
       			"transformationDependencies",
        		lv_transformationDependencies_4_0, 
        		"TransformationDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransformationDependencyListAccess().getSemicolonKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyListAccess().getTransformationDependenciesTransformationDependencyParserRuleCall_5_1_0()); 
	    }
		lv_transformationDependencies_6_0=ruleTransformationDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyListRule());
	        }
       		add(
       			$current, 
       			"transformationDependencies",
        		lv_transformationDependencies_6_0, 
        		"TransformationDependency");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransformationDependencyListAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransformationDependencyListAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleTransformationDependency
entryRuleTransformationDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationDependencyRule()); }
	 iv_ruleTransformationDependency=ruleTransformationDependency 
	 { $current=$iv_ruleTransformationDependency.current; } 
	 EOF 
;

// Rule TransformationDependency
ruleTransformationDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Apply' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransformationDependencyAccess().getApplyKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransformationDependencyAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getAppliedTransformationTransformationCrossReference_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransformationDependencyAccess().getFullStopKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getAppliedRuleTrcRuleCrossReference_4_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransformationDependencyAccess().getCommaKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTransformationDependencyAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getFieldsEStringParserRuleCall_7_0()); 
	    }
		lv_fields_7_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_7_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransformationDependencyAccess().getCommaKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getFieldsEStringParserRuleCall_8_1_0()); 
	    }
		lv_fields_9_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_9_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTransformationDependencyAccess().getRightCurlyBracketKeyword_9());
    }
	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTransformationDependencyAccess().getRightParenthesisKeyword_10());
    }
	otherlv_12='[' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTransformationDependencyAccess().getLeftSquareBracketKeyword_11());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getRequiredTransformationsAbstractRuleDependencyParserRuleCall_12_0_0_0()); 
	    }
		lv_requiredTransformations_13_0=ruleAbstractRuleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyRule());
	        }
       		add(
       			$current, 
       			"requiredTransformations",
        		lv_requiredTransformations_13_0, 
        		"AbstractRuleDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14='and' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTransformationDependencyAccess().getAndKeyword_12_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getRequiredTransformationsAbstractRuleDependencyParserRuleCall_12_0_2_0()); 
	    }
		lv_requiredTransformations_15_0=ruleAbstractRuleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyRule());
	        }
       		add(
       			$current, 
       			"requiredTransformations",
        		lv_requiredTransformations_15_0, 
        		"AbstractRuleDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getRequiredTransformationsAbstractRuleDependencyParserRuleCall_12_1_0_0()); 
	    }
		lv_requiredTransformations_16_0=ruleAbstractRuleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyRule());
	        }
       		add(
       			$current, 
       			"requiredTransformations",
        		lv_requiredTransformations_16_0, 
        		"AbstractRuleDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17='or' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getTransformationDependencyAccess().getOrKeyword_12_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getRequiredTransformationsAbstractRuleDependencyParserRuleCall_12_1_2_0()); 
	    }
		lv_requiredTransformations_18_0=ruleAbstractRuleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyRule());
	        }
       		add(
       			$current, 
       			"requiredTransformations",
        		lv_requiredTransformations_18_0, 
        		"AbstractRuleDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)*))	otherlv_19=']' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getTransformationDependencyAccess().getRightSquareBracketKeyword_13());
    }
)
;





// Entry rule entryRuleAbstractRuleDependency
entryRuleAbstractRuleDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractRuleDependencyRule()); }
	 iv_ruleAbstractRuleDependency=ruleAbstractRuleDependency 
	 { $current=$iv_ruleAbstractRuleDependency.current; } 
	 EOF 
;

// Rule AbstractRuleDependency
ruleAbstractRuleDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAbstractRuleDependencyAccess().getRuleDependencyParserRuleCall()); 
    }
    this_RuleDependency_0=ruleRuleDependency
    { 
        $current = $this_RuleDependency_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleRuleDependency
entryRuleRuleDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleDependencyRule()); }
	 iv_ruleRuleDependency=ruleRuleDependency 
	 { $current=$iv_ruleRuleDependency.current; } 
	 EOF 
;

// Rule RuleDependency
ruleRuleDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='requires' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleDependencyAccess().getRequiresKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyAccess().getRdRequiresDependencyParserRuleCall_0_1_0()); 
	    }
		lv_rd_1_0=rulerequiresDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDependencyRule());
	        }
       		add(
       			$current, 
       			"rd",
        		lv_rd_1_0, 
        		"requiresDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleDependencyAccess().getAndKeyword_0_2_0());
    }

    |	otherlv_3='or' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleDependencyAccess().getOrKeyword_0_2_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyAccess().getRdRequiresDependencyParserRuleCall_0_3_0()); 
	    }
		lv_rd_4_0=rulerequiresDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDependencyRule());
	        }
       		add(
       			$current, 
       			"rd",
        		lv_rd_4_0, 
        		"requiresDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |(	otherlv_5='excludes' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleDependencyAccess().getExcludesKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyAccess().getRdExcludeDependencyParserRuleCall_1_1_0()); 
	    }
		lv_rd_6_0=ruleexcludeDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDependencyRule());
	        }
       		add(
       			$current, 
       			"rd",
        		lv_rd_6_0, 
        		"excludeDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7='and' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRuleDependencyAccess().getAndKeyword_1_2_0());
    }

    |	otherlv_8='or' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRuleDependencyAccess().getOrKeyword_1_2_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyAccess().getEdExcludeDependencyParserRuleCall_1_3_0()); 
	    }
		lv_ed_9_0=ruleexcludeDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDependencyRule());
	        }
       		add(
       			$current, 
       			"ed",
        		lv_ed_9_0, 
        		"excludeDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)*))
;





// Entry rule entryRulerequiresDependency
entryRulerequiresDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequiresDependencyRule()); }
	 iv_rulerequiresDependency=rulerequiresDependency 
	 { $current=$iv_rulerequiresDependency.current; } 
	 EOF 
;

// Rule requiresDependency
rulerequiresDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequiresDependencyAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiresDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRequiresDependencyAccess().getRequiredTransformationTransformationCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRequiresDependencyAccess().getFullStopKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRequiresDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRequiresDependencyAccess().getRequiredRuleTrcRuleCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRequiresDependencyAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequiresDependencyAccess().getFieldsEStringParserRuleCall_5_0()); 
	    }
		lv_fields_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequiresDependencyRule());
	        }
       		set(
       			$current, 
       			"fields",
        		lv_fields_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRequiresDependencyAccess().getColonKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequiresDependencyAccess().getOclExpressionEStringParserRuleCall_7_0()); 
	    }
		lv_oclExpression_7_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequiresDependencyRule());
	        }
       		set(
       			$current, 
       			"oclExpression",
        		lv_oclExpression_7_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRequiresDependencyAccess().getRightParenthesisKeyword_8());
    }
)
;





// Entry rule entryRuleexcludeDependency
entryRuleexcludeDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExcludeDependencyRule()); }
	 iv_ruleexcludeDependency=ruleexcludeDependency 
	 { $current=$iv_ruleexcludeDependency.current; } 
	 EOF 
;

// Rule excludeDependency
ruleexcludeDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExcludeDependencyAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExcludeDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getExcludeDependencyAccess().getRequiredTransformationTransformationCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExcludeDependencyAccess().getFullStopKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExcludeDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getExcludeDependencyAccess().getRequiredRuleTrcRuleCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExcludeDependencyAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExcludeDependencyAccess().getFieldsEStringParserRuleCall_5_0()); 
	    }
		lv_fields_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExcludeDependencyRule());
	        }
       		set(
       			$current, 
       			"fields",
        		lv_fields_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExcludeDependencyAccess().getColonKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExcludeDependencyAccess().getOclExpressionEStringParserRuleCall_7_0()); 
	    }
		lv_oclExpression_7_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExcludeDependencyRule());
	        }
       		set(
       			$current, 
       			"oclExpression",
        		lv_oclExpression_7_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExcludeDependencyAccess().getRightParenthesisKeyword_8());
    }
)
;









// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;







RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


