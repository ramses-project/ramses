/*
* generated by Xtext
*/
package org.trc.xtext.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.trc.xtext.dsl.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {
	
	@Inject
	private DslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.trc.xtext.dsl.ui.contentassist.antlr.internal.InternalDslParser createParser() {
		org.trc.xtext.dsl.ui.contentassist.antlr.internal.InternalDslParser result = new org.trc.xtext.dsl.ui.contentassist.antlr.internal.InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTransformationDependencyAccess().getAlternatives_12(), "rule__TransformationDependency__Alternatives_12");
					put(grammarAccess.getRuleDependencyAccess().getAlternatives(), "rule__RuleDependency__Alternatives");
					put(grammarAccess.getRuleDependencyAccess().getAlternatives_0_2(), "rule__RuleDependency__Alternatives_0_2");
					put(grammarAccess.getRuleDependencyAccess().getAlternatives_1_2(), "rule__RuleDependency__Alternatives_1_2");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getTrcSpecificationAccess().getGroup(), "rule__TrcSpecification__Group__0");
					put(grammarAccess.getModuleListAccess().getGroup(), "rule__ModuleList__Group__0");
					put(grammarAccess.getModuleListAccess().getGroup_3(), "rule__ModuleList__Group_3__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getModuleAccess().getGroup_1(), "rule__Module__Group_1__0");
					put(grammarAccess.getModuleAccess().getGroup_1_3(), "rule__Module__Group_1_3__0");
					put(grammarAccess.getTransformationListAccess().getGroup(), "rule__TransformationList__Group__0");
					put(grammarAccess.getTransformationListAccess().getGroup_3(), "rule__TransformationList__Group_3__0");
					put(grammarAccess.getTransformationAccess().getGroup(), "rule__Transformation__Group__0");
					put(grammarAccess.getTransformationAccess().getGroup_5(), "rule__Transformation__Group_5__0");
					put(grammarAccess.getTransformationAccess().getGroup_6(), "rule__Transformation__Group_6__0");
					put(grammarAccess.getTransformationAccess().getGroup_6_3(), "rule__Transformation__Group_6_3__0");
					put(grammarAccess.getTransformationImpactAccess().getGroup(), "rule__TransformationImpact__Group__0");
					put(grammarAccess.getTransformationImpactAccess().getGroup_1(), "rule__TransformationImpact__Group_1__0");
					put(grammarAccess.getTransformationDependencyListAccess().getGroup(), "rule__TransformationDependencyList__Group__0");
					put(grammarAccess.getTransformationDependencyListAccess().getGroup_5(), "rule__TransformationDependencyList__Group_5__0");
					put(grammarAccess.getTransformationDependencyAccess().getGroup(), "rule__TransformationDependency__Group__0");
					put(grammarAccess.getTransformationDependencyAccess().getGroup_8(), "rule__TransformationDependency__Group_8__0");
					put(grammarAccess.getTransformationDependencyAccess().getGroup_12_0(), "rule__TransformationDependency__Group_12_0__0");
					put(grammarAccess.getTransformationDependencyAccess().getGroup_12_1(), "rule__TransformationDependency__Group_12_1__0");
					put(grammarAccess.getRuleDependencyAccess().getGroup_0(), "rule__RuleDependency__Group_0__0");
					put(grammarAccess.getRuleDependencyAccess().getGroup_1(), "rule__RuleDependency__Group_1__0");
					put(grammarAccess.getRequiresDependencyAccess().getGroup(), "rule__RequiresDependency__Group__0");
					put(grammarAccess.getExcludeDependencyAccess().getGroup(), "rule__ExcludeDependency__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getTrcSpecificationAccess().getModuleListAssignment_0(), "rule__TrcSpecification__ModuleListAssignment_0");
					put(grammarAccess.getTrcSpecificationAccess().getTransformationListAssignment_1(), "rule__TrcSpecification__TransformationListAssignment_1");
					put(grammarAccess.getTrcSpecificationAccess().getDependencyListAssignment_2(), "rule__TrcSpecification__DependencyListAssignment_2");
					put(grammarAccess.getTrcRuleAccess().getNameAssignment(), "rule__TrcRule__NameAssignment");
					put(grammarAccess.getModuleListAccess().getModulesAssignment_2(), "rule__ModuleList__ModulesAssignment_2");
					put(grammarAccess.getModuleListAccess().getModulesAssignment_3_1(), "rule__ModuleList__ModulesAssignment_3_1");
					put(grammarAccess.getModuleAccess().getNameAssignment_1_0(), "rule__Module__NameAssignment_1_0");
					put(grammarAccess.getModuleAccess().getRulesAssignment_1_2(), "rule__Module__RulesAssignment_1_2");
					put(grammarAccess.getModuleAccess().getRulesAssignment_1_3_1(), "rule__Module__RulesAssignment_1_3_1");
					put(grammarAccess.getTransformationListAccess().getTransformationsAssignment_2(), "rule__TransformationList__TransformationsAssignment_2");
					put(grammarAccess.getTransformationListAccess().getTransformationsAssignment_3_1(), "rule__TransformationList__TransformationsAssignment_3_1");
					put(grammarAccess.getTransformationAccess().getNameAssignment_0(), "rule__Transformation__NameAssignment_0");
					put(grammarAccess.getTransformationAccess().getModulesAssignment_4(), "rule__Transformation__ModulesAssignment_4");
					put(grammarAccess.getTransformationAccess().getModulesAssignment_5_1(), "rule__Transformation__ModulesAssignment_5_1");
					put(grammarAccess.getTransformationAccess().getImpactsAssignment_6_2(), "rule__Transformation__ImpactsAssignment_6_2");
					put(grammarAccess.getTransformationAccess().getImpactsAssignment_6_3_1(), "rule__Transformation__ImpactsAssignment_6_3_1");
					put(grammarAccess.getTransformationImpactAccess().getQualityAttributeNameAssignment_1_0(), "rule__TransformationImpact__QualityAttributeNameAssignment_1_0");
					put(grammarAccess.getTransformationImpactAccess().getImpactValueAssignment_2(), "rule__TransformationImpact__ImpactValueAssignment_2");
					put(grammarAccess.getTransformationDependencyListAccess().getNameAssignment_2(), "rule__TransformationDependencyList__NameAssignment_2");
					put(grammarAccess.getTransformationDependencyListAccess().getTransformationDependenciesAssignment_4(), "rule__TransformationDependencyList__TransformationDependenciesAssignment_4");
					put(grammarAccess.getTransformationDependencyListAccess().getTransformationDependenciesAssignment_5_1(), "rule__TransformationDependencyList__TransformationDependenciesAssignment_5_1");
					put(grammarAccess.getTransformationDependencyAccess().getAppliedTransformationAssignment_2(), "rule__TransformationDependency__AppliedTransformationAssignment_2");
					put(grammarAccess.getTransformationDependencyAccess().getAppliedRuleAssignment_4(), "rule__TransformationDependency__AppliedRuleAssignment_4");
					put(grammarAccess.getTransformationDependencyAccess().getFieldsAssignment_7(), "rule__TransformationDependency__FieldsAssignment_7");
					put(grammarAccess.getTransformationDependencyAccess().getFieldsAssignment_8_1(), "rule__TransformationDependency__FieldsAssignment_8_1");
					put(grammarAccess.getTransformationDependencyAccess().getRequiredTransformationsAssignment_12_0_0(), "rule__TransformationDependency__RequiredTransformationsAssignment_12_0_0");
					put(grammarAccess.getTransformationDependencyAccess().getRequiredTransformationsAssignment_12_0_2(), "rule__TransformationDependency__RequiredTransformationsAssignment_12_0_2");
					put(grammarAccess.getTransformationDependencyAccess().getRequiredTransformationsAssignment_12_1_0(), "rule__TransformationDependency__RequiredTransformationsAssignment_12_1_0");
					put(grammarAccess.getTransformationDependencyAccess().getRequiredTransformationsAssignment_12_1_2(), "rule__TransformationDependency__RequiredTransformationsAssignment_12_1_2");
					put(grammarAccess.getRuleDependencyAccess().getRdAssignment_0_1(), "rule__RuleDependency__RdAssignment_0_1");
					put(grammarAccess.getRuleDependencyAccess().getRdAssignment_0_3(), "rule__RuleDependency__RdAssignment_0_3");
					put(grammarAccess.getRuleDependencyAccess().getRdAssignment_1_1(), "rule__RuleDependency__RdAssignment_1_1");
					put(grammarAccess.getRuleDependencyAccess().getEdAssignment_1_3(), "rule__RuleDependency__EdAssignment_1_3");
					put(grammarAccess.getRequiresDependencyAccess().getRequiredTransformationAssignment_1(), "rule__RequiresDependency__RequiredTransformationAssignment_1");
					put(grammarAccess.getRequiresDependencyAccess().getRequiredRuleAssignment_3(), "rule__RequiresDependency__RequiredRuleAssignment_3");
					put(grammarAccess.getRequiresDependencyAccess().getFieldsAssignment_5(), "rule__RequiresDependency__FieldsAssignment_5");
					put(grammarAccess.getRequiresDependencyAccess().getOclExpressionAssignment_7(), "rule__RequiresDependency__OclExpressionAssignment_7");
					put(grammarAccess.getExcludeDependencyAccess().getRequiredTransformationAssignment_1(), "rule__ExcludeDependency__RequiredTransformationAssignment_1");
					put(grammarAccess.getExcludeDependencyAccess().getRequiredRuleAssignment_3(), "rule__ExcludeDependency__RequiredRuleAssignment_3");
					put(grammarAccess.getExcludeDependencyAccess().getFieldsAssignment_5(), "rule__ExcludeDependency__FieldsAssignment_5");
					put(grammarAccess.getExcludeDependencyAccess().getOclExpressionAssignment_7(), "rule__ExcludeDependency__OclExpressionAssignment_7");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.trc.xtext.dsl.ui.contentassist.antlr.internal.InternalDslParser typedParser = (org.trc.xtext.dsl.ui.contentassist.antlr.internal.InternalDslParser) parser;
			typedParser.entryRuleTrcSpecification();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
