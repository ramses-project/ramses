[**
 * @author Etienne Borde 
 */]

[module GenerateMakefile('http://aadl.info/AADL/2.0/instance','http://aadl.info/AADL/2.0')/]

[import Services/]

[comment: @TODO check if properties in extended components are found; patch if not
				throw exception in case you have component instances for which the declarative element is a component type
				/]

[template public MakefileGenerator(aSystemInst:SystemInstance)]
	[comment @main /]

	[if(aSystemInst.systemImplementation <> null)]
		[aSystemInst.systemImplementation.oclAsType(SystemImplementation).generateSystemMakefile()/]
		[for (aComponentInst : ComponentInstance | aSystemInst.componentInstance)]
			[if (aComponentInst.category.toString()='processor')]
[aComponentInst.generateProcessorMakefile()/]
			[elseif (aComponentInst.category.toString()='process')]
[aComponentInst.generateProcessMakefile()/]
			[/if]
		[/for]
	[else]
		[comment: error, must be a system implementation/]
	[/if]
[/template]



[template public generateProcessorMakefile(aProcessor : ComponentInstance)]
	[file ('generated-code/'.concat(aProcessor.subcomponent.name).concat('/Makefile'), false, 'UTF-8')]
	[let theProcessorImplementation : ProcessorImplementation = aProcessor.subcomponent.getComponentImplementation().oclAsType(ProcessorImplementation)]
			[if(theProcessorImplementation <> null)]
[theProcessorImplementation.generateProcessorMakefile()/]
			[else]
				[comment: error, must be a system implementation/]
# ERROR : Processor implementation not found in the source model
			[/if]
	[/let]
	[/file]
[/template]

[template public generateProcessorMakefile(aProcessor : ProcessorImplementation)]
	[for(propAssoc: PropertyAssociation | aProcessor.ownedPropertyAssociation)]
		[if (propAssoc.property.name = 'Architecture')]
export ARCH=[propAssoc.ownedValue.ownedValue.oclAsType(EnumerationValue).literal.name/]
		[/if]
		[if (propAssoc.property.name = 'BSP')]
export BSP=[propAssoc.ownedValue.ownedValue.oclAsType(EnumerationValue).literal.name/]
		[/if]
	[/for]
export POK_CONFIG_OPTIMIZE_FOR_GENERATED_CODE=1
include $(POK_PATH)/misc/mk/config.mk
include $(POK_PATH)/misc/mk/common-$(ARCH).mk
TARGET=$(shell pwd)/pok.elf
[comment: retreive partitions deployed on this processor/]
PARTITIONS=[for(virtProc:Subcomponent | aProcessor.ownedVirtualProcessorSubcomponent)][virtProc.name/]/[virtProc.name/].elf [/for]

KERNEL=kernel/kernel.lo
all: build-kernel partitions $(TARGET)
build-kernel:
    $(CD) kernel && $(MAKE)

partitions:
[for(virtProc:Subcomponent | aProcessor.ownedVirtualProcessorSubcomponent)] 
	$(CD) [virtProc.name/] && $(MAKE)
[/for]

clean: common-clean
    $(CD) kernel && $(MAKE) clean
[for(virtProc:Subcomponent | aProcessor.ownedVirtualProcessorSubcomponent)] 
	$(CD) [virtProc.name/] && $(MAKE) clean
[/for]


distclean: clean
    $(CD) kernel && $(MAKE) distclean
[for(virtProc:Subcomponent | aProcessor.ownedVirtualProcessorSubcomponent)] 
	$(CD) [virtProc.name/] && $(MAKE) distclean
[/for]

include $(POK_PATH)/misc/mk/rules-common.mk
include $(POK_PATH)/misc/mk/rules-main.mk
include $(POK_PATH)/misc/mk/install-rules.mk
[/template]

[template public generateProcessMakefile(aProcessInstance : ComponentInstance)]
	[if(aProcessInstance.subcomponent.getComponentImplementation() <> null)]
		[comment: 	retrieve the name of the processor subcomponent on which the current process subcomponent is deployed;
					this string is given as a parameter to the generation of the process makfile in order to be consistent with the 
					generated directory tree./]
		[let theProcessImplementation : ProcessImplementation = aProcessInstance.subcomponent.getComponentImplementation().oclAsType(ProcessImplementation)]
		[let theDeploymentProcessorName : String = aProcessInstance.getDeloymentProcessorSubcomponentName()]
		[let theProcessSubcomponentName : String = aProcessInstance.subcomponent.name]
			[file ('generated-code/'.concat(theDeploymentProcessorName).concat('/').concat('tttt').concat('/Makefile'), false, 'UTF-8')]
[theProcessImplementation.generateProcessMakefile('ttt')/]
			[/file]
		[/let]
		[/let]
		[/let]
	[else]
			[file ('ERROR', true, 'UTF-8')]
# ERROR: Process implementation not found in the source model
			[/file]
	[/if]
[/template]


[template public generateProcessMakefile(aProcessImplementation : ProcessImplementation, processSubcomponentName:String)]
export DEPLOYMENT_HEADER=$(shell pwd)/deployment.h
include $(POK_PATH)/misc/mk/config.mk
TARGET = [processSubcomponentName/].elf
[comment introduce variability here /]
OBJS = main.o activity.o subprograms.o gtypes.o[for(aProcessImplementation.getListOfReferencedObjects()->asSet()) separator (' ') ] [self/] [/for]
all: libpok $(TARGET)
clean: common-clean
include $(POK_PATH)/misc/mk/common-$(ARCH).mk
include $(POK_PATH)/misc/mk/rules-partition.mk
include $(POK_PATH)/misc/mk/rules-common.mk
[/template]

[template public generateSystemMakefile(aSystemImpl : SystemImplementation)]
	[file ('generated-code'.concat('/Makefile'), false, 'UTF-8')]
all:
	[for(aProcessorSubcomponent: ProcessorSubcomponent | aSystemImpl.ownedProcessorSubcomponent)]
	$(MAKE) -C [aProcessorSubcomponent.name/] all
	[/for]

clean:
	[for(aProcessorSubcomponent: ProcessorSubcomponent | aSystemImpl.ownedProcessorSubcomponent)]
	$(MAKE) -C [aProcessorSubcomponent.name/] clean
	[/for]	

run:
	[for(aProcessorSubcomponent: ProcessorSubcomponent | aSystemImpl.ownedProcessorSubcomponent)]
	$(MAKE) -C [aProcessorSubcomponent.name/] run&
	[/for]
[/file]
[/template]
