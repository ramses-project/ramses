/**
 */
package fr.tpt.aadl.ramses.transformation.trc.provider;

import fr.tpt.aadl.ramses.transformation.trc.util.TrcAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TrcItemProviderAdapterFactory extends TrcAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TrcItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.TrcSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrcSpecificationItemProvider trcSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.TrcSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
  public Adapter createTrcSpecificationAdapter() {
		if (trcSpecificationItemProvider == null) {
			trcSpecificationItemProvider = new TrcSpecificationItemProvider(this);
		}

		return trcSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.Transformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformationItemProvider transformationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.Transformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
  public Adapter createTransformationAdapter() {
		if (transformationItemProvider == null) {
			transformationItemProvider = new TransformationItemProvider(this);
		}

		return transformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.TransformationImpact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformationImpactItemProvider transformationImpactItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.TransformationImpact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
  public Adapter createTransformationImpactAdapter() {
		if (transformationImpactItemProvider == null) {
			transformationImpactItemProvider = new TransformationImpactItemProvider(this);
		}

		return transformationImpactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.Module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleItemProvider moduleItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.Module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
  public Adapter createModuleAdapter() {
		if (moduleItemProvider == null) {
			moduleItemProvider = new ModuleItemProvider(this);
		}

		return moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.TransformationDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformationDependencyItemProvider transformationDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.TransformationDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
  public Adapter createTransformationDependencyAdapter() {
		if (transformationDependencyItemProvider == null) {
			transformationDependencyItemProvider = new TransformationDependencyItemProvider(this);
		}

		return transformationDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.RuleDependencyConjunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleDependencyConjunctionItemProvider ruleDependencyConjunctionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.RuleDependencyConjunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
  public Adapter createRuleDependencyConjunctionAdapter() {
		if (ruleDependencyConjunctionItemProvider == null) {
			ruleDependencyConjunctionItemProvider = new RuleDependencyConjunctionItemProvider(this);
		}

		return ruleDependencyConjunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.RuleDependencyDisjunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleDependencyDisjunctionItemProvider ruleDependencyDisjunctionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.RuleDependencyDisjunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
  public Adapter createRuleDependencyDisjunctionAdapter() {
		if (ruleDependencyDisjunctionItemProvider == null) {
			ruleDependencyDisjunctionItemProvider = new RuleDependencyDisjunctionItemProvider(this);
		}

		return ruleDependencyDisjunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.RuleDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleDependencyItemProvider ruleDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.RuleDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
  public Adapter createRuleDependencyAdapter() {
		if (ruleDependencyItemProvider == null) {
			ruleDependencyItemProvider = new RuleDependencyItemProvider(this);
		}

		return ruleDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.ModuleList} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ModuleListItemProvider moduleListItemProvider;

  /**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.ModuleList}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createModuleListAdapter()
  {
		if (moduleListItemProvider == null) {
			moduleListItemProvider = new ModuleListItemProvider(this);
		}

		return moduleListItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.TransformationList} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected TransformationListItemProvider transformationListItemProvider;

  /**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.TransformationList}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createTransformationListAdapter()
  {
		if (transformationListItemProvider == null) {
			transformationListItemProvider = new TransformationListItemProvider(this);
		}

		return transformationListItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.TransformationDependencyList} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected TransformationDependencyListItemProvider transformationDependencyListItemProvider;

  /**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.TransformationDependencyList}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createTransformationDependencyListAdapter()
  {
		if (transformationDependencyListItemProvider == null) {
			transformationDependencyListItemProvider = new TransformationDependencyListItemProvider(this);
		}

		return transformationDependencyListItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.transformation.trc.TrcRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrcRuleItemProvider trcRuleItemProvider;

		/**
	 * This creates an adapter for a {@link fr.tpt.aadl.ramses.transformation.trc.TrcRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrcRuleAdapter() {
		if (trcRuleItemProvider == null) {
			trcRuleItemProvider = new TrcRuleItemProvider(this);
		}

		return trcRuleItemProvider;
	}

		/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
  public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
  public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
  public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (trcSpecificationItemProvider != null) trcSpecificationItemProvider.dispose();
		if (transformationImpactItemProvider != null) transformationImpactItemProvider.dispose();
		if (moduleItemProvider != null) moduleItemProvider.dispose();
		if (transformationItemProvider != null) transformationItemProvider.dispose();
		if (transformationDependencyItemProvider != null) transformationDependencyItemProvider.dispose();
		if (ruleDependencyConjunctionItemProvider != null) ruleDependencyConjunctionItemProvider.dispose();
		if (ruleDependencyDisjunctionItemProvider != null) ruleDependencyDisjunctionItemProvider.dispose();
		if (ruleDependencyItemProvider != null) ruleDependencyItemProvider.dispose();
		if (moduleListItemProvider != null) moduleListItemProvider.dispose();
		if (transformationListItemProvider != null) transformationListItemProvider.dispose();
		if (transformationDependencyListItemProvider != null) transformationDependencyListItemProvider.dispose();
		if (trcRuleItemProvider != null) trcRuleItemProvider.dispose();
	}

}
