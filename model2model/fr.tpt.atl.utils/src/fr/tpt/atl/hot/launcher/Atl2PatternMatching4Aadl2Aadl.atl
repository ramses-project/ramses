-- @atlcompiler atl2006


module Atl2PatternMatching4Aadl2Aadl;

create OUT : MM_ATL from IN : MM_ATL;

helper def : inElements : Set(MM_ATL!LocatedElement) = MM_ATL!LocatedElement.allInstancesFrom('IN');

helper def : getModuleName : String = MM_ATL!Unit.allInstancesFrom('IN')->first().name;

rule Unit {
    from s : MM_ATL!"ATL::Unit" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(MM_ATL!"ATL::Unit")
		else false endif)
    to t : MM_ATL!"ATL::Unit" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        libraries <- s.libraries)
}

rule Library {
    from s : MM_ATL!"ATL::Library" (thisModule.inElements->includes(s)) 
    to t : MM_ATL!"ATL::Library" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        libraries <- s.libraries,
        helpers <- s.helpers)
}

rule Query {
    from s : MM_ATL!"ATL::Query" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::Query" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        libraries <- s.libraries,
        body <- s.body,
        helpers <- s.helpers)
}

rule Module {
    from s : MM_ATL!"ATL::Module" (thisModule.inElements->includes(s))
    to 
	t : MM_ATL!"ATL::Module" 
	(
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        isRefining <- s.isRefining,
        libraries <- s.libraries,
		inModels <- s.inModels,
-- ElementTransformationTupleEcore to be added to outModels
		outModels <- metamodelOut,
        elements <- s.elements->select(e| e.oclIsTypeOf(MM_ATL!"ATL::MatchedRule") or e.oclIsTypeOf(MM_ATL!"ATL::Helper"))
	),
	metamodelOut : MM_ATL!OclModel 
	(
		metamodel <- metamodelPM,
		name <- 'OUT'
	),
	metamodelPM : MM_ATL!OclModel 
	(
		name <- 'MM_ATL2PM'
	)
}

rule Helper {
    from s : MM_ATL!"ATL::Helper" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::Helper" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        definition <- s.definition)
}

rule MatchedRule {
    from s : MM_ATL!"ATL::MatchedRule" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(MM_ATL!"ATL::MatchedRule")
		else false endif)
	using
	{
    	str_deb: String = s.name.toString();
	}
	to t : MM_ATL!"ATL::MatchedRule" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        isAbstract <- s.isAbstract,
        isRefining <- s.isRefining,
        isNoDefault <- s.isNoDefault,
-- output pattern to be replaced by new MM_ATL2PM assignments
    --to t : MM_ATL2PM!"PatternMatching::ElementTransformationTuple" (
        --key <- s.name,
		--value <- 'MatchedRuleMatching'
		--)
        outPattern <- op,
-- as output pattern is replaced then action block is removed
		--actionBlock <- s.actionBlock,
        --variables <- s.variables,
        inPattern <- s.inPattern,
        children <- s.children,
        superRule <- s.superRule),
		op : MM_ATL!OutPattern (
			elements <- element
		),
		element : MM_ATL!SimpleOutPatternElement (
			varName <- 't',
			type <- opet,
			bindings <- Sequence { b1, b2 }
		),
		opet : MM_ATL!OclModelElement (
			name <- 'ElementTransformationTuple',
			model <- metamodel4pm
		),
		metamodel4pm : MM_ATL!OclModel (
			name <- 'MM_ATL2PM'			
		),
		b1 : MM_ATL!Binding (
			propertyName <- 'key',
			value <- b1value,
			isAssignment <- true
		),
		b1value :  MM_ATL!SequenceExp
		(
			elements <- s.inPattern.elements->collect(e| thisModule.getVariableQualifiedName(e))
		),
		b2 : MM_ATL!Binding (
			propertyName <- 'value',
			value <- b2value
		),
		b2value : MM_ATL!StringExp (
			stringSymbol <- thisModule.getModuleName+'.'+s.name
		)
}

unique lazy rule getVariableQualifiedName
{
	from
		elt: MM_ATL!"ATL::InPatternElement"
	to
--		n: MM_ATL!"OCL::NavigationOrAttributeCallExp"
--		(
--			name <- 'qualifiedName',
--			source <- v
--		),
		v: MM_ATL!"OCL::VariableExp"
		(
			referredVariable <- elt
		)
--	do
--	{
--		n;
--	}
}

rule LazyMatchedRule {
    from s : MM_ATL!"ATL::LazyMatchedRule" (thisModule.inElements->includes(s))
    to 
		drop
--t : MM_ATL!"ATL::LazyMatchedRule" (
--        location <- s.location,
--        commentsBefore <- s.commentsBefore,
--        commentsAfter <- s.commentsAfter,
--        name <- s.name,
--        isAbstract <- s.isAbstract,
--        isRefining <- s.isRefining,
--        isNoDefault <- s.isNoDefault,
--        isUnique <- s.isUnique,
--        outPattern <- s.outPattern,
--        actionBlock <- s.actionBlock,
--        variables <- s.variables,
--        inPattern <- s.inPattern,
--        children <- s.children,
--        superRule <- s.superRule)
}

rule CalledRule {
    from s : MM_ATL!"ATL::CalledRule" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::CalledRule" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        isEntrypoint <- s.isEntrypoint,
        isEndpoint <- s.isEndpoint,
        outPattern <- s.outPattern,
        actionBlock <- s.actionBlock,
        variables <- s.variables,
        parameters <- s.parameters)
}

rule InPattern {
    from s : MM_ATL!"ATL::InPattern" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::InPattern" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        elements <- s.elements,
        filter <- s.filter)
}

rule OutPattern {
    from s : MM_ATL!"ATL::OutPattern" (thisModule.inElements->includes(s))
   to t : MM_ATL!"ATL::OutPattern" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        elements <- s.elements)
}

rule SimpleInPatternElement {
    from s : MM_ATL!"ATL::SimpleInPatternElement" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::SimpleInPatternElement" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        id <- s.id,
        varName <- s.varName,
        type <- s.type,
        initExpression <- s.initExpression,
        variableExp <- s.variableExp,
        "mapsTo" <- s."mapsTo",
        models <- s.models)
}

rule SimpleOutPatternElement {
    from s : MM_ATL!"ATL::SimpleOutPatternElement" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::SimpleOutPatternElement" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        id <- s.id,
        varName <- s.varName,
        type <- s.type,
        initExpression <- s.initExpression,
        variableExp <- s.variableExp,
        sourceElement <- s.sourceElement,
        bindings <- s.bindings,
        model <- s.model,
        reverseBindings <- s.reverseBindings)
}

rule ForEachOutPatternElement {
    from s : MM_ATL!"ATL::ForEachOutPatternElement" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::ForEachOutPatternElement" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        id <- s.id,
        varName <- s.varName,
        type <- s.type,
        initExpression <- s.initExpression,
        variableExp <- s.variableExp,
        sourceElement <- s.sourceElement,
        bindings <- s.bindings,
        model <- s.model,
        collection <- s.collection,
        iterator <- s.iterator)
}

rule Binding {
    from s : MM_ATL!"ATL::Binding" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::Binding" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        propertyName <- s.propertyName,
        value <- s.value)
}

rule RuleVariableDeclaration {
    from s : MM_ATL!"ATL::RuleVariableDeclaration" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::RuleVariableDeclaration" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        id <- s.id,
        varName <- s.varName,
        type <- s.type,
        initExpression <- s.initExpression,
        variableExp <- s.variableExp)
}

rule LibraryRef {
    from s : MM_ATL!"ATL::LibraryRef" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::LibraryRef" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name)
}

rule ActionBlock {
    from s : MM_ATL!"ATL::ActionBlock" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::ActionBlock" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        statements <- s.statements)
}

rule ExpressionStat {
    from s : MM_ATL!"ATL::ExpressionStat" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::ExpressionStat" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        expression <- s.expression)
}

rule BindingStat {
    from s : MM_ATL!"ATL::BindingStat" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::BindingStat" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        propertyName <- s.propertyName,
        source <- s.source,
        value <- s.value)
}

rule IfStat {
    from s : MM_ATL!"ATL::IfStat" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::IfStat" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        condition <- s.condition,
        thenStatements <- s.thenStatements,
        elseStatements <- s.elseStatements)
}

rule ForStat {
    from s : MM_ATL!"ATL::ForStat" (thisModule.inElements->includes(s))
    to t : MM_ATL!"ATL::ForStat" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        iterator <- s.iterator,
        collection <- s.collection,
        statements <- s.statements)
}

rule VariableExp {
    from s : MM_ATL!"OCL::VariableExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::VariableExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type,
        referredVariable <- s.referredVariable)
}

rule SuperExp {
    from s : MM_ATL!"OCL::SuperExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::SuperExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type)
}

rule StringExp {
    from s : MM_ATL!"OCL::StringExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::StringExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        stringSymbol <- s.stringSymbol,
        type <- s.type)
}

rule BooleanExp {
    from s : MM_ATL!"OCL::BooleanExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::BooleanExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        booleanSymbol <- s.booleanSymbol,
        type <- s.type)
}

rule RealExp {
    from s : MM_ATL!"OCL::RealExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::RealExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        realSymbol <- s.realSymbol,
        type <- s.type)
}

rule IntegerExp {
    from s : MM_ATL!"OCL::IntegerExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::IntegerExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        integerSymbol <- s.integerSymbol,
        type <- s.type)
}

rule BagExp {
    from s : MM_ATL!"OCL::BagExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::BagExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type,
        elements <- s.elements)
}

rule OrderedSetExp {
    from s : MM_ATL!"OCL::OrderedSetExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::OrderedSetExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type,
        elements <- s.elements)
}

rule SequenceExp {
    from s : MM_ATL!"OCL::SequenceExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::SequenceExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type,
        elements <- s.elements)
}

rule SetExp {
    from s : MM_ATL!"OCL::SetExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::SetExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type,
        elements <- s.elements)
}

rule TupleExp {
    from s : MM_ATL!"OCL::TupleExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::TupleExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type,
        tuplePart <- s.tuplePart)
}

rule TuplePart {
    from s : MM_ATL!"OCL::TuplePart" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::TuplePart" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        id <- s.id,
        varName <- s.varName,
        type <- s.type,
        initExpression <- s.initExpression,
        variableExp <- s.variableExp)
}

rule MapExp {
    from s : MM_ATL!"OCL::MapExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::MapExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type,
        elements <- s.elements)
}

rule MapElement {
    from s : MM_ATL!"OCL::MapElement" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::MapElement" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        key <- s.key,
        value <- s.value)
}

rule EnumLiteralExp {
    from s : MM_ATL!"OCL::EnumLiteralExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::EnumLiteralExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type)
}

rule OclUndefinedExp {
    from s : MM_ATL!"OCL::OclUndefinedExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::OclUndefinedExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type)
}

rule NavigationOrAttributeCallExp {
    from s : MM_ATL!"OCL::NavigationOrAttributeCallExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::NavigationOrAttributeCallExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type,
        source <- s.source)
}

rule OperationCallExp {
    from s : MM_ATL!"OCL::OperationCallExp" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(MM_ATL!"OCL::OperationCallExp")
		else false endif)
    to t : MM_ATL!"OCL::OperationCallExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        operationName <- s.operationName,
        type <- s.type,
        source <- s.source,
        arguments <- s.arguments)
}

rule OperatorCallExp {
    from s : MM_ATL!"OCL::OperatorCallExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::OperatorCallExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        operationName <- s.operationName,
        type <- s.type,
        source <- s.source,
        arguments <- s.arguments)
}

rule CollectionOperationCallExp {
    from s : MM_ATL!"OCL::CollectionOperationCallExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::CollectionOperationCallExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        operationName <- s.operationName,
        type <- s.type,
        source <- s.source,
        arguments <- s.arguments)
}

rule IterateExp {
    from s : MM_ATL!"OCL::IterateExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::IterateExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type,
        source <- s.source,
        body <- s.body,
        iterators <- s.iterators,
        result <- s.result)
}

rule IteratorExp {
    from s : MM_ATL!"OCL::IteratorExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::IteratorExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type,
        source <- s.source,
        body <- s.body,
        iterators <- s.iterators)
}

rule LetExp {
    from s : MM_ATL!"OCL::LetExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::LetExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type,
        variable <- s.variable,
        in_ <- s.in_)
}

rule IfExp {
    from s : MM_ATL!"OCL::IfExp" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::IfExp" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        type <- s.type,
        thenExpression <- s.thenExpression,
        condition <- s.condition,
        elseExpression <- s.elseExpression)
}

rule VariableDeclaration {
    from s : MM_ATL!"OCL::VariableDeclaration" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(MM_ATL!"OCL::VariableDeclaration")
		else false endif)
    to t : MM_ATL!"OCL::VariableDeclaration" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        id <- s.id,
        varName <- s.varName,
        type <- s.type,
        initExpression <- s.initExpression,
        variableExp <- s.variableExp)
}

rule Iterator {
    from s : MM_ATL!"OCL::Iterator" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::Iterator" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        id <- s.id,
        varName <- s.varName,
        type <- s.type,
        initExpression <- s.initExpression,
        variableExp <- s.variableExp)
}

rule Parameter {
    from s : MM_ATL!"OCL::Parameter" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::Parameter" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        id <- s.id,
        varName <- s.varName,
        type <- s.type,
        initExpression <- s.initExpression,
        variableExp <- s.variableExp)
}

rule CollectionType {
    from s : MM_ATL!"OCL::CollectionType" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(MM_ATL!"OCL::CollectionType")
		else false endif)
    to t : MM_ATL!"OCL::CollectionType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type,
        elementType <- s.elementType)
}

rule "OclType" {
    from s : MM_ATL!"OCL::OclType" (
		if thisModule.inElements->includes(s) then
			s.oclIsTypeOf(MM_ATL!"OCL::OclType")
		else false endif)
    to t : MM_ATL!"OCL::OclType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type)
}

rule StringType {
    from s : MM_ATL!"OCL::StringType" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::StringType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type)
}

rule BooleanType {
    from s : MM_ATL!"OCL::BooleanType" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::BooleanType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type)
}

rule IntegerType {
    from s : MM_ATL!"OCL::IntegerType" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::IntegerType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type)
}

rule RealType {
    from s : MM_ATL!"OCL::RealType" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::RealType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type)
}

rule BagType {
    from s : MM_ATL!"OCL::BagType" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::BagType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type,
        elementType <- s.elementType)
}

rule OrderedSetType {
    from s : MM_ATL!"OCL::OrderedSetType" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::OrderedSetType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type,
        elementType <- s.elementType)
}

rule SequenceType {
    from s : MM_ATL!"OCL::SequenceType" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::SequenceType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type,
        elementType <- s.elementType)
}

rule SetType {
    from s : MM_ATL!"OCL::SetType" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::SetType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type,
        elementType <- s.elementType)
}

rule OclAnyType {
    from s : MM_ATL!"OCL::OclAnyType" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::OclAnyType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type)
}

rule "TupleType" {
    from s : MM_ATL!"OCL::TupleType" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::TupleType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type,
        attributes <- s.attributes)
}

rule TupleTypeAttribute {
    from s : MM_ATL!"OCL::TupleTypeAttribute" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::TupleTypeAttribute" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type)
}

rule OclModelElement {
    from s : MM_ATL!"OCL::OclModelElement" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::OclModelElement" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type,
        model <- s.model)
}

rule MapType {
    from s : MM_ATL!"OCL::MapType" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::MapType" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        type <- s.type,
        valueType <- s.valueType,
        keyType <- s.keyType)
}

rule OclFeatureDefinition {
    from s : MM_ATL!"OCL::OclFeatureDefinition" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::OclFeatureDefinition" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        feature <- s.feature,
        context_ <- s.context_)
}

rule OclContextDefinition {
    from s : MM_ATL!"OCL::OclContextDefinition" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::OclContextDefinition" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        context_ <- s.context_)
}

rule Attribute {
    from s : MM_ATL!"OCL::Attribute" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::Attribute" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        initExpression <- s.initExpression,
        type <- s.type)
}

rule Operation {
    from s : MM_ATL!"OCL::Operation" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::Operation" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        parameters <- s.parameters,
        returnType <- s.returnType,
        body <- s.body)
}

rule OclModel {
    from s : MM_ATL!"OCL::OclModel" (thisModule.inElements->includes(s))
    to t : MM_ATL!"OCL::OclModel" (
        location <- s.location,
        commentsBefore <- s.commentsBefore,
        commentsAfter <- s.commentsAfter,
        name <- s.name,
        metamodel <- s.metamodel,
        elements <- s.elements,
        model <- s.model)
}

