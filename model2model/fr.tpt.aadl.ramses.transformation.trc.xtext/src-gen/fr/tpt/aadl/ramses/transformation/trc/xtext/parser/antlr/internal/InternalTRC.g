/*
* generated by Xtext
*/
grammar InternalTRC;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package fr.tpt.aadl.ramses.transformation.trc.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.tpt.aadl.ramses.transformation.trc.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.tpt.aadl.ramses.transformation.trc.xtext.services.TRCGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private TRCGrammarAccess grammarAccess;
 	
    public InternalTRCParser(TokenStream input, TRCGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "TrcSpecification";	
   	}
   	
   	@Override
   	protected TRCGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTrcSpecification
entryRuleTrcSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrcSpecificationRule()); }
	 iv_ruleTrcSpecification=ruleTrcSpecification 
	 { $current=$iv_ruleTrcSpecification.current; } 
	 EOF 
;

// Rule TrcSpecification
ruleTrcSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTrcSpecificationAccess().getModuleListModuleListParserRuleCall_0_0()); 
	    }
		lv_moduleList_0_0=ruleModuleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrcSpecificationRule());
	        }
       		set(
       			$current, 
       			"moduleList",
        		lv_moduleList_0_0, 
        		"ModuleList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTrcSpecificationAccess().getTransformationListTransformationListParserRuleCall_1_0()); 
	    }
		lv_transformationList_1_0=ruleTransformationList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrcSpecificationRule());
	        }
       		set(
       			$current, 
       			"transformationList",
        		lv_transformationList_1_0, 
        		"TransformationList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTrcSpecificationAccess().getDependencyListTransformationDependencyListParserRuleCall_2_0()); 
	    }
		lv_dependencyList_2_0=ruleTransformationDependencyList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrcSpecificationRule());
	        }
       		set(
       			$current, 
       			"dependencyList",
        		lv_dependencyList_2_0, 
        		"TransformationDependencyList");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTrcRule
entryRuleTrcRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrcRuleRule()); }
	 iv_ruleTrcRule=ruleTrcRule 
	 { $current=$iv_ruleTrcRule.current; } 
	 EOF 
;

// Rule TrcRule
ruleTrcRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrcRuleAccess().getNameEStringParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrcRuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleModuleList
entryRuleModuleList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleListRule()); }
	 iv_ruleModuleList=ruleModuleList 
	 { $current=$iv_ruleModuleList.current; } 
	 EOF 
;

// Rule ModuleList
ruleModuleList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Modules' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleListAccess().getModulesKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleListAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleListAccess().getModulesModuleParserRuleCall_2_0()); 
	    }
		lv_modules_2_0=ruleModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleListRule());
	        }
       		add(
       			$current, 
       			"modules",
        		lv_modules_2_0, 
        		"Module");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleListAccess().getSemicolonKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleListAccess().getModulesModuleParserRuleCall_4_0_0()); 
	    }
		lv_modules_4_0=ruleModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleListRule());
	        }
       		add(
       			$current, 
       			"modules",
        		lv_modules_4_0, 
        		"Module");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModuleListAccess().getSemicolonKeyword_4_1());
    }
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModuleListAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getPathEStringParserRuleCall_2_0()); 
	    }
		lv_path_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleAccess().getRightSquareBracketKeyword_3());
    }
(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModuleAccess().getColonKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getRulesTrcRuleParserRuleCall_4_1_0()); 
	    }
		lv_rules_5_0=ruleTrcRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_5_0, 
        		"TrcRule");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModuleAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getRulesTrcRuleParserRuleCall_4_2_1_0()); 
	    }
		lv_rules_7_0=ruleTrcRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_7_0, 
        		"TrcRule");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleTransformationList
entryRuleTransformationList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationListRule()); }
	 iv_ruleTransformationList=ruleTransformationList 
	 { $current=$iv_ruleTransformationList.current; } 
	 EOF 
;

// Rule TransformationList
ruleTransformationList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Transformations' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransformationListAccess().getTransformationsKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransformationListAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationListAccess().getTransformationsTransformationParserRuleCall_2_0()); 
	    }
		lv_transformations_2_0=ruleTransformation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationListRule());
	        }
       		add(
       			$current, 
       			"transformations",
        		lv_transformations_2_0, 
        		"Transformation");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransformationListAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationListAccess().getTransformationsTransformationParserRuleCall_3_1_0()); 
	    }
		lv_transformations_4_0=ruleTransformation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationListRule());
	        }
       		add(
       			$current, 
       			"transformations",
        		lv_transformations_4_0, 
        		"Transformation");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransformationListAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTransformation
entryRuleTransformation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationRule()); }
	 iv_ruleTransformation=ruleTransformation 
	 { $current=$iv_ruleTransformation.current; } 
	 EOF 
;

// Rule Transformation
ruleTransformation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransformationAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='modules' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransformationAccess().getModulesKeyword_2());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransformationAccess().getColonKeyword_3());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getTransformationAccess().getModulesModuleCrossReference_4_0()); 
	}

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransformationAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getTransformationAccess().getModulesModuleCrossReference_5_1_0()); 
	}

)
))*(	otherlv_7='impacts' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransformationAccess().getImpactsKeyword_6_0());
    }
	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransformationAccess().getColonKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationAccess().getImpactsTransformationImpactParserRuleCall_6_2_0()); 
	    }
		lv_impacts_9_0=ruleTransformationImpact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationRule());
	        }
       		add(
       			$current, 
       			"impacts",
        		lv_impacts_9_0, 
        		"TransformationImpact");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTransformationAccess().getCommaKeyword_6_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationAccess().getImpactsTransformationImpactParserRuleCall_6_3_1_0()); 
	    }
		lv_impacts_11_0=ruleTransformationImpact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationRule());
	        }
       		add(
       			$current, 
       			"impacts",
        		lv_impacts_11_0, 
        		"TransformationImpact");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTransformationAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleTransformationImpact
entryRuleTransformationImpact returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationImpactRule()); }
	 iv_ruleTransformationImpact=ruleTransformationImpact 
	 { $current=$iv_ruleTransformationImpact.current; } 
	 EOF 
;

// Rule TransformationImpact
ruleTransformationImpact returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransformationImpactAccess().getLeftParenthesisKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationImpactAccess().getQualityAttributeNameEStringParserRuleCall_1_0_0()); 
	    }
		lv_qualityAttributeName_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationImpactRule());
	        }
       		set(
       			$current, 
       			"qualityAttributeName",
        		lv_qualityAttributeName_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransformationImpactAccess().getCommaKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationImpactAccess().getImpactValueEIntParserRuleCall_2_0()); 
	    }
		lv_impactValue_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationImpactRule());
	        }
       		set(
       			$current, 
       			"impactValue",
        		lv_impactValue_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransformationImpactAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTransformationDependencyList
entryRuleTransformationDependencyList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationDependencyListRule()); }
	 iv_ruleTransformationDependencyList=ruleTransformationDependencyList 
	 { $current=$iv_ruleTransformationDependencyList.current; } 
	 EOF 
;

// Rule TransformationDependencyList
ruleTransformationDependencyList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Dependencies' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransformationDependencyListAccess().getDependenciesKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransformationDependencyListAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyListAccess().getTransformationDependenciesTransformationDependencyParserRuleCall_2_0()); 
	    }
		lv_transformationDependencies_2_0=ruleTransformationDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyListRule());
	        }
       		add(
       			$current, 
       			"transformationDependencies",
        		lv_transformationDependencies_2_0, 
        		"TransformationDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransformationDependencyListAccess().getSemicolonKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyListAccess().getTransformationDependenciesTransformationDependencyParserRuleCall_4_0_0()); 
	    }
		lv_transformationDependencies_4_0=ruleTransformationDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyListRule());
	        }
       		add(
       			$current, 
       			"transformationDependencies",
        		lv_transformationDependencies_4_0, 
        		"TransformationDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransformationDependencyListAccess().getSemicolonKeyword_4_1());
    }
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTransformationDependencyListAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleTransformationDependency
entryRuleTransformationDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationDependencyRule()); }
	 iv_ruleTransformationDependency=ruleTransformationDependency 
	 { $current=$iv_ruleTransformationDependency.current; } 
	 EOF 
;

// Rule TransformationDependency
ruleTransformationDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Apply' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransformationDependencyAccess().getApplyKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransformationDependencyAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getAppliedTransformationTransformationCrossReference_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransformationDependencyAccess().getFullStopKeyword_3());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getAppliedRuleTrcRuleCrossReference_4_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransformationDependencyAccess().getCommaKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTransformationDependencyAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getVariableIdEStringParserRuleCall_7_0()); 
	    }
		lv_variableId_7_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyRule());
	        }
       		add(
       			$current, 
       			"variableId",
        		lv_variableId_7_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransformationDependencyAccess().getCommaKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getVariableIdEStringParserRuleCall_8_1_0()); 
	    }
		lv_variableId_9_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyRule());
	        }
       		add(
       			$current, 
       			"variableId",
        		lv_variableId_9_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTransformationDependencyAccess().getRightCurlyBracketKeyword_9());
    }
	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTransformationDependencyAccess().getRightParenthesisKeyword_10());
    }
	otherlv_12='[' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTransformationDependencyAccess().getLeftSquareBracketKeyword_11());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDependencyAccess().getRequiredTransformationsAbstractRuleDependencyParserRuleCall_12_0()); 
	    }
		lv_requiredTransformations_13_0=ruleAbstractRuleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDependencyRule());
	        }
       		set(
       			$current, 
       			"requiredTransformations",
        		lv_requiredTransformations_13_0, 
        		"AbstractRuleDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14=']' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTransformationDependencyAccess().getRightSquareBracketKeyword_13());
    }
)
;





// Entry rule entryRuleRuleDependencyDisjunction
entryRuleRuleDependencyDisjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleDependencyDisjunctionRule()); }
	 iv_ruleRuleDependencyDisjunction=ruleRuleDependencyDisjunction 
	 { $current=$iv_ruleRuleDependencyDisjunction.current; } 
	 EOF 
;

// Rule RuleDependencyDisjunction
ruleRuleDependencyDisjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyDisjunctionAccess().getRequiredTransformationsAbstractRuleDependencyParserRuleCall_0_0()); 
	    }
		lv_requiredTransformations_0_0=ruleAbstractRuleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDependencyDisjunctionRule());
	        }
       		add(
       			$current, 
       			"requiredTransformations",
        		lv_requiredTransformations_0_0, 
        		"AbstractRuleDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleDependencyDisjunctionAccess().getOrKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyDisjunctionAccess().getRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_1_0()); 
	    }
		lv_requiredTransformations_2_0=ruleAbstractRuleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDependencyDisjunctionRule());
	        }
       		add(
       			$current, 
       			"requiredTransformations",
        		lv_requiredTransformations_2_0, 
        		"AbstractRuleDependency");
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRuleRuleDependencyComposite
entryRuleRuleDependencyComposite returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleDependencyCompositeRule()); }
	 iv_ruleRuleDependencyComposite=ruleRuleDependencyComposite 
	 { $current=$iv_ruleRuleDependencyComposite.current; } 
	 EOF 
;

// Rule RuleDependencyComposite
ruleRuleDependencyComposite returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleDependencyCompositeAccess().getLeftParenthesisKeyword_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRuleDependencyCompositeAccess().getRuleDependencyConjunctionParserRuleCall_0_1()); 
    }
    this_RuleDependencyConjunction_1=ruleRuleDependencyConjunction
    { 
        $current = $this_RuleDependencyConjunction_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleDependencyCompositeAccess().getRightParenthesisKeyword_0_2());
    }
)
    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleDependencyCompositeAccess().getLeftParenthesisKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRuleDependencyCompositeAccess().getRuleDependencyDisjunctionParserRuleCall_1_1()); 
    }
    this_RuleDependencyDisjunction_4=ruleRuleDependencyDisjunction
    { 
        $current = $this_RuleDependencyDisjunction_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleDependencyCompositeAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleRuleDependencyConjunction
entryRuleRuleDependencyConjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleDependencyConjunctionRule()); }
	 iv_ruleRuleDependencyConjunction=ruleRuleDependencyConjunction 
	 { $current=$iv_ruleRuleDependencyConjunction.current; } 
	 EOF 
;

// Rule RuleDependencyConjunction
ruleRuleDependencyConjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyConjunctionAccess().getRequiredTransformationsAbstractRuleDependencyParserRuleCall_0_0()); 
	    }
		lv_requiredTransformations_0_0=ruleAbstractRuleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDependencyConjunctionRule());
	        }
       		add(
       			$current, 
       			"requiredTransformations",
        		lv_requiredTransformations_0_0, 
        		"AbstractRuleDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='and' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleDependencyConjunctionAccess().getAndKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyConjunctionAccess().getRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_1_0()); 
	    }
		lv_requiredTransformations_2_0=ruleAbstractRuleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDependencyConjunctionRule());
	        }
       		add(
       			$current, 
       			"requiredTransformations",
        		lv_requiredTransformations_2_0, 
        		"AbstractRuleDependency");
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRuleAbstractRuleDependency
entryRuleAbstractRuleDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractRuleDependencyRule()); }
	 iv_ruleAbstractRuleDependency=ruleAbstractRuleDependency 
	 { $current=$iv_ruleAbstractRuleDependency.current; } 
	 EOF 
;

// Rule AbstractRuleDependency
ruleAbstractRuleDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAbstractRuleDependencyAccess().getRuleDependencyCompositeParserRuleCall_0()); 
    }
    this_RuleDependencyComposite_0=ruleRuleDependencyComposite
    { 
        $current = $this_RuleDependencyComposite_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAbstractRuleDependencyAccess().getRuleDependencyParserRuleCall_1()); 
    }
    this_RuleDependency_1=ruleRuleDependency
    { 
        $current = $this_RuleDependency_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRuleDependency
entryRuleRuleDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleDependencyRule()); }
	 iv_ruleRuleDependency=ruleRuleDependency 
	 { $current=$iv_ruleRuleDependency.current; } 
	 EOF 
;

// Rule RuleDependency
ruleRuleDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_type_0_1=	'requires' 
    {
        newLeafNode(lv_type_0_1, grammarAccess.getRuleDependencyAccess().getTypeRequiresKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDependencyRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_1, null);
	    }

    |		lv_type_0_2=	'excludes' 
    {
        newLeafNode(lv_type_0_2, grammarAccess.getRuleDependencyAccess().getTypeExcludesKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDependencyRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_2, null);
	    }

)

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleDependencyAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyAccess().getRequiredTransformationTransformationCrossReference_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleDependencyAccess().getFullStopKeyword_3());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDependencyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyAccess().getRequiredRuleTrcRuleCrossReference_4_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuleDependencyAccess().getCommaKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRuleDependencyAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyAccess().getFieldNamesEStringParserRuleCall_7_0()); 
	    }
		lv_fieldNames_7_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDependencyRule());
	        }
       		add(
       			$current, 
       			"fieldNames",
        		lv_fieldNames_7_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRuleDependencyAccess().getCommaKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDependencyAccess().getFieldNamesEStringParserRuleCall_8_1_0()); 
	    }
		lv_fieldNames_9_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDependencyRule());
	        }
       		add(
       			$current, 
       			"fieldNames",
        		lv_fieldNames_9_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRuleDependencyAccess().getRightCurlyBracketKeyword_9());
    }
	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRuleDependencyAccess().getRightParenthesisKeyword_10());
    }
)
;









// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;







// Entry rule entryRuleEssentialOCLUnrestrictedName
entryRuleEssentialOCLUnrestrictedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEssentialOCLUnrestrictedNameRule()); } 
	 iv_ruleEssentialOCLUnrestrictedName=ruleEssentialOCLUnrestrictedName 
	 { $current=$iv_ruleEssentialOCLUnrestrictedName.current.getText(); }  
	 EOF 
;

// Rule EssentialOCLUnrestrictedName
ruleEssentialOCLUnrestrictedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getEssentialOCLUnrestrictedNameAccess().getIdentifierParserRuleCall()); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleUnrestrictedName
entryRuleUnrestrictedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnrestrictedNameRule()); } 
	 iv_ruleUnrestrictedName=ruleUnrestrictedName 
	 { $current=$iv_ruleUnrestrictedName.current.getText(); }  
	 EOF 
;

// Rule UnrestrictedName
ruleUnrestrictedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getUnrestrictedNameAccess().getEssentialOCLUnrestrictedNameParserRuleCall()); 
    }
    this_EssentialOCLUnrestrictedName_0=ruleEssentialOCLUnrestrictedName    {
		$current.merge(this_EssentialOCLUnrestrictedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;











// Entry rule entryRuleEssentialOCLUnreservedName
entryRuleEssentialOCLUnreservedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEssentialOCLUnreservedNameRule()); } 
	 iv_ruleEssentialOCLUnreservedName=ruleEssentialOCLUnreservedName 
	 { $current=$iv_ruleEssentialOCLUnreservedName.current.getText(); }  
	 EOF 
;

// Rule EssentialOCLUnreservedName
ruleEssentialOCLUnreservedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEssentialOCLUnreservedNameAccess().getUnrestrictedNameParserRuleCall_0()); 
    }
    this_UnrestrictedName_0=ruleUnrestrictedName    {
		$current.merge(this_UnrestrictedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEssentialOCLUnreservedNameAccess().getCollectionTypeIdentifierParserRuleCall_1()); 
    }
    this_CollectionTypeIdentifier_1=ruleCollectionTypeIdentifier    {
		$current.merge(this_CollectionTypeIdentifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEssentialOCLUnreservedNameAccess().getPrimitiveTypeIdentifierParserRuleCall_2()); 
    }
    this_PrimitiveTypeIdentifier_2=rulePrimitiveTypeIdentifier    {
		$current.merge(this_PrimitiveTypeIdentifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='Tuple' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEssentialOCLUnreservedNameAccess().getTupleKeyword_3()); 
    }
)
    ;





// Entry rule entryRulePrimitiveTypeIdentifier
entryRulePrimitiveTypeIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeIdentifierRule()); } 
	 iv_rulePrimitiveTypeIdentifier=rulePrimitiveTypeIdentifier 
	 { $current=$iv_rulePrimitiveTypeIdentifier.current.getText(); }  
	 EOF 
;

// Rule PrimitiveTypeIdentifier
rulePrimitiveTypeIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getBooleanKeyword_0()); 
    }

    |
	kw='Integer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getIntegerKeyword_1()); 
    }

    |
	kw='Real' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getRealKeyword_2()); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getStringKeyword_3()); 
    }

    |
	kw='UnlimitedNatural' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getUnlimitedNaturalKeyword_4()); 
    }

    |
	kw='OclAny' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getOclAnyKeyword_5()); 
    }

    |
	kw='OclInvalid' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getOclInvalidKeyword_6()); 
    }

    |
	kw='OclVoid' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeIdentifierAccess().getOclVoidKeyword_7()); 
    }
)
    ;





// Entry rule entryRuleCollectionTypeIdentifier
entryRuleCollectionTypeIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionTypeIdentifierRule()); } 
	 iv_ruleCollectionTypeIdentifier=ruleCollectionTypeIdentifier 
	 { $current=$iv_ruleCollectionTypeIdentifier.current.getText(); }  
	 EOF 
;

// Rule CollectionTypeIdentifier
ruleCollectionTypeIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Set' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getSetKeyword_0()); 
    }

    |
	kw='Bag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getBagKeyword_1()); 
    }

    |
	kw='Sequence' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getSequenceKeyword_2()); 
    }

    |
	kw='Collection' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getCollectionKeyword_3()); 
    }

    |
	kw='OrderedSet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCollectionTypeIdentifierAccess().getOrderedSetKeyword_4()); 
    }
)
    ;





RULE_UNQUOTED_STRING : '\u00A3$%^\u00A3$%^';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


