/*
* generated by Xtext
*/
package fr.tpt.aadl.ramses.transformation.trc.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TRCGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TrcSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrcSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModuleListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModuleListModuleListParserRuleCall_0_0 = (RuleCall)cModuleListAssignment_0.eContents().get(0);
		private final Assignment cTransformationListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransformationListTransformationListParserRuleCall_1_0 = (RuleCall)cTransformationListAssignment_1.eContents().get(0);
		private final Assignment cDependencyListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDependencyListTransformationDependencyListParserRuleCall_2_0 = (RuleCall)cDependencyListAssignment_2.eContents().get(0);
		
		////generate tRC "http://www.tpt.fr/aadl/ramses/transformation/trc/xtext/TRC"
		//TrcSpecification returns TRC::TrcSpecification:
		//	moduleList=ModuleList transformationList=TransformationList dependencyList=TransformationDependencyList;
		public ParserRule getRule() { return rule; }

		//moduleList=ModuleList transformationList=TransformationList dependencyList=TransformationDependencyList
		public Group getGroup() { return cGroup; }

		//moduleList=ModuleList
		public Assignment getModuleListAssignment_0() { return cModuleListAssignment_0; }

		//ModuleList
		public RuleCall getModuleListModuleListParserRuleCall_0_0() { return cModuleListModuleListParserRuleCall_0_0; }

		//transformationList=TransformationList
		public Assignment getTransformationListAssignment_1() { return cTransformationListAssignment_1; }

		//TransformationList
		public RuleCall getTransformationListTransformationListParserRuleCall_1_0() { return cTransformationListTransformationListParserRuleCall_1_0; }

		//dependencyList=TransformationDependencyList
		public Assignment getDependencyListAssignment_2() { return cDependencyListAssignment_2; }

		//TransformationDependencyList
		public RuleCall getDependencyListTransformationDependencyListParserRuleCall_2_0() { return cDependencyListTransformationDependencyListParserRuleCall_2_0; }
	}

	public class TrcRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrcRule");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TrcRule returns TRC::TrcRule:
		//	name=EString;
		public ParserRule getRule() { return rule; }

		//name=EString
		public Assignment getNameAssignment() { return cNameAssignment; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0() { return cNameEStringParserRuleCall_0; }
	}

	public class ModuleListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModulesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModulesModuleParserRuleCall_2_0 = (RuleCall)cModulesAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cModulesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cModulesModuleParserRuleCall_4_0_0 = (RuleCall)cModulesAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ModuleList returns TRC::ModuleList:
		//	"Modules" "{" modules+=Module ";" (modules+=Module ";")* "}";
		public ParserRule getRule() { return rule; }

		//"Modules" "{" modules+=Module ";" (modules+=Module ";")* "}"
		public Group getGroup() { return cGroup; }

		//"Modules"
		public Keyword getModulesKeyword_0() { return cModulesKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//modules+=Module
		public Assignment getModulesAssignment_2() { return cModulesAssignment_2; }

		//Module
		public RuleCall getModulesModuleParserRuleCall_2_0() { return cModulesModuleParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//(modules+=Module ";")*
		public Group getGroup_4() { return cGroup_4; }

		//modules+=Module
		public Assignment getModulesAssignment_4_0() { return cModulesAssignment_4_0; }

		//Module
		public RuleCall getModulesModuleParserRuleCall_4_0_0() { return cModulesModuleParserRuleCall_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathEStringParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRulesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRulesTrcRuleParserRuleCall_4_1_0 = (RuleCall)cRulesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cRulesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cRulesTrcRuleParserRuleCall_4_2_1_0 = (RuleCall)cRulesAssignment_4_2_1.eContents().get(0);
		
		//Module returns TRC::Module:
		//	name=EString "[" path=EString "]" (":" rules+=TrcRule ("," rules+=TrcRule)*)?;
		public ParserRule getRule() { return rule; }

		//name=EString "[" path=EString "]" (":" rules+=TrcRule ("," rules+=TrcRule)*)?
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//path=EString
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//EString
		public RuleCall getPathEStringParserRuleCall_2_0() { return cPathEStringParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//(":" rules+=TrcRule ("," rules+=TrcRule)*)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//rules+=TrcRule
		public Assignment getRulesAssignment_4_1() { return cRulesAssignment_4_1; }

		//TrcRule
		public RuleCall getRulesTrcRuleParserRuleCall_4_1_0() { return cRulesTrcRuleParserRuleCall_4_1_0; }

		//("," rules+=TrcRule)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//rules+=TrcRule
		public Assignment getRulesAssignment_4_2_1() { return cRulesAssignment_4_2_1; }

		//TrcRule
		public RuleCall getRulesTrcRuleParserRuleCall_4_2_1_0() { return cRulesTrcRuleParserRuleCall_4_2_1_0; }
	}

	public class TransformationListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransformationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTransformationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransformationsTransformationParserRuleCall_2_0 = (RuleCall)cTransformationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTransformationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTransformationsTransformationParserRuleCall_3_1_0 = (RuleCall)cTransformationsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TransformationList returns TRC::TransformationList:
		//	"Transformations" "{" transformations+=Transformation ("," transformations+=Transformation)* "}";
		public ParserRule getRule() { return rule; }

		//"Transformations" "{" transformations+=Transformation ("," transformations+=Transformation)* "}"
		public Group getGroup() { return cGroup; }

		//"Transformations"
		public Keyword getTransformationsKeyword_0() { return cTransformationsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//transformations+=Transformation
		public Assignment getTransformationsAssignment_2() { return cTransformationsAssignment_2; }

		//Transformation
		public RuleCall getTransformationsTransformationParserRuleCall_2_0() { return cTransformationsTransformationParserRuleCall_2_0; }

		//("," transformations+=Transformation)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//transformations+=Transformation
		public Assignment getTransformationsAssignment_3_1() { return cTransformationsAssignment_3_1; }

		//Transformation
		public RuleCall getTransformationsTransformationParserRuleCall_3_1_0() { return cTransformationsTransformationParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cModulesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cModulesModuleCrossReference_4_0 = (CrossReference)cModulesAssignment_4.eContents().get(0);
		private final RuleCall cModulesModuleIDTerminalRuleCall_4_0_1 = (RuleCall)cModulesModuleCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cModulesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cModulesModuleCrossReference_5_1_0 = (CrossReference)cModulesAssignment_5_1.eContents().get(0);
		private final RuleCall cModulesModuleIDTerminalRuleCall_5_1_0_1 = (RuleCall)cModulesModuleCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cImpactsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cImpactsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cImpactsTransformationImpactParserRuleCall_6_2_0 = (RuleCall)cImpactsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cImpactsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cImpactsTransformationImpactParserRuleCall_6_3_1_0 = (RuleCall)cImpactsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Transformation returns TRC::Transformation:
		//	name=EString "{" "modules" ":" modules+=[TRC::Module] ("," modules+=[TRC::Module])* ("impacts" ":"
		//	impacts+=TransformationImpact ("," impacts+=TransformationImpact)*)? "}";
		public ParserRule getRule() { return rule; }

		//name=EString "{" "modules" ":" modules+=[TRC::Module] ("," modules+=[TRC::Module])* ("impacts" ":"
		//impacts+=TransformationImpact ("," impacts+=TransformationImpact)*)? "}"
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"modules"
		public Keyword getModulesKeyword_2() { return cModulesKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//modules+=[TRC::Module]
		public Assignment getModulesAssignment_4() { return cModulesAssignment_4; }

		//[TRC::Module]
		public CrossReference getModulesModuleCrossReference_4_0() { return cModulesModuleCrossReference_4_0; }

		//ID
		public RuleCall getModulesModuleIDTerminalRuleCall_4_0_1() { return cModulesModuleIDTerminalRuleCall_4_0_1; }

		//("," modules+=[TRC::Module])*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//modules+=[TRC::Module]
		public Assignment getModulesAssignment_5_1() { return cModulesAssignment_5_1; }

		//[TRC::Module]
		public CrossReference getModulesModuleCrossReference_5_1_0() { return cModulesModuleCrossReference_5_1_0; }

		//ID
		public RuleCall getModulesModuleIDTerminalRuleCall_5_1_0_1() { return cModulesModuleIDTerminalRuleCall_5_1_0_1; }

		//("impacts" ":" impacts+=TransformationImpact ("," impacts+=TransformationImpact)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"impacts"
		public Keyword getImpactsKeyword_6_0() { return cImpactsKeyword_6_0; }

		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//impacts+=TransformationImpact
		public Assignment getImpactsAssignment_6_2() { return cImpactsAssignment_6_2; }

		//TransformationImpact
		public RuleCall getImpactsTransformationImpactParserRuleCall_6_2_0() { return cImpactsTransformationImpactParserRuleCall_6_2_0; }

		//("," impacts+=TransformationImpact)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//impacts+=TransformationImpact
		public Assignment getImpactsAssignment_6_3_1() { return cImpactsAssignment_6_3_1; }

		//TransformationImpact
		public RuleCall getImpactsTransformationImpactParserRuleCall_6_3_1_0() { return cImpactsTransformationImpactParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TransformationImpactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationImpact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cQualityAttributeNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cQualityAttributeNameEStringParserRuleCall_1_0_0 = (RuleCall)cQualityAttributeNameAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cImpactValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImpactValueEIntParserRuleCall_2_0 = (RuleCall)cImpactValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TransformationImpact returns TRC::TransformationImpact:
		//	"(" (qualityAttributeName=EString ",")? impactValue=EInt ")";
		public ParserRule getRule() { return rule; }

		//"(" (qualityAttributeName=EString ",")? impactValue=EInt ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//(qualityAttributeName=EString ",")?
		public Group getGroup_1() { return cGroup_1; }

		//qualityAttributeName=EString
		public Assignment getQualityAttributeNameAssignment_1_0() { return cQualityAttributeNameAssignment_1_0; }

		//EString
		public RuleCall getQualityAttributeNameEStringParserRuleCall_1_0_0() { return cQualityAttributeNameEStringParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//impactValue=EInt
		public Assignment getImpactValueAssignment_2() { return cImpactValueAssignment_2; }

		//EInt
		public RuleCall getImpactValueEIntParserRuleCall_2_0() { return cImpactValueEIntParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TransformationDependencyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDependencyList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependenciesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTransformationDependenciesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransformationDependenciesTransformationDependencyParserRuleCall_2_0 = (RuleCall)cTransformationDependenciesAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cTransformationDependenciesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTransformationDependenciesTransformationDependencyParserRuleCall_4_0_0 = (RuleCall)cTransformationDependenciesAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TransformationDependencyList returns TRC::TransformationDependencyList:
		//	"Dependencies" "{" transformationDependencies+=TransformationDependency ";"
		//	(transformationDependencies+=TransformationDependency ";")* "}";
		public ParserRule getRule() { return rule; }

		//"Dependencies" "{" transformationDependencies+=TransformationDependency ";"
		//(transformationDependencies+=TransformationDependency ";")* "}"
		public Group getGroup() { return cGroup; }

		//"Dependencies"
		public Keyword getDependenciesKeyword_0() { return cDependenciesKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//transformationDependencies+=TransformationDependency
		public Assignment getTransformationDependenciesAssignment_2() { return cTransformationDependenciesAssignment_2; }

		//TransformationDependency
		public RuleCall getTransformationDependenciesTransformationDependencyParserRuleCall_2_0() { return cTransformationDependenciesTransformationDependencyParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//(transformationDependencies+=TransformationDependency ";")*
		public Group getGroup_4() { return cGroup_4; }

		//transformationDependencies+=TransformationDependency
		public Assignment getTransformationDependenciesAssignment_4_0() { return cTransformationDependenciesAssignment_4_0; }

		//TransformationDependency
		public RuleCall getTransformationDependenciesTransformationDependencyParserRuleCall_4_0_0() { return cTransformationDependenciesTransformationDependencyParserRuleCall_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TransformationDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAppliedTransformationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAppliedTransformationTransformationCrossReference_2_0 = (CrossReference)cAppliedTransformationAssignment_2.eContents().get(0);
		private final RuleCall cAppliedTransformationTransformationEStringParserRuleCall_2_0_1 = (RuleCall)cAppliedTransformationTransformationCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAppliedRuleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAppliedRuleTrcRuleCrossReference_4_0 = (CrossReference)cAppliedRuleAssignment_4.eContents().get(0);
		private final RuleCall cAppliedRuleTrcRuleQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cAppliedRuleTrcRuleCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cVariableIdAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVariableIdEStringParserRuleCall_7_0 = (RuleCall)cVariableIdAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cVariableIdAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cVariableIdEStringParserRuleCall_8_1_0 = (RuleCall)cVariableIdAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cRequiredTransformationsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cRequiredTransformationsAbstractRuleDependencyParserRuleCall_12_0 = (RuleCall)cRequiredTransformationsAssignment_12.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//TransformationDependency returns TRC::TransformationDependency:
		//	"Apply" "(" appliedTransformation=[TRC::Transformation|EString] "." appliedRule=[TRC::TrcRule|QualifiedName] "," "{"
		//	variableId+=EString ("," variableId+=EString)* "}" ")" "[" requiredTransformations=AbstractRuleDependency "]";
		public ParserRule getRule() { return rule; }

		//"Apply" "(" appliedTransformation=[TRC::Transformation|EString] "." appliedRule=[TRC::TrcRule|QualifiedName] "," "{"
		//variableId+=EString ("," variableId+=EString)* "}" ")" "[" requiredTransformations=AbstractRuleDependency "]"
		public Group getGroup() { return cGroup; }

		//"Apply"
		public Keyword getApplyKeyword_0() { return cApplyKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//appliedTransformation=[TRC::Transformation|EString]
		public Assignment getAppliedTransformationAssignment_2() { return cAppliedTransformationAssignment_2; }

		//[TRC::Transformation|EString]
		public CrossReference getAppliedTransformationTransformationCrossReference_2_0() { return cAppliedTransformationTransformationCrossReference_2_0; }

		//EString
		public RuleCall getAppliedTransformationTransformationEStringParserRuleCall_2_0_1() { return cAppliedTransformationTransformationEStringParserRuleCall_2_0_1; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//appliedRule=[TRC::TrcRule|QualifiedName]
		public Assignment getAppliedRuleAssignment_4() { return cAppliedRuleAssignment_4; }

		//[TRC::TrcRule|QualifiedName]
		public CrossReference getAppliedRuleTrcRuleCrossReference_4_0() { return cAppliedRuleTrcRuleCrossReference_4_0; }

		//QualifiedName
		public RuleCall getAppliedRuleTrcRuleQualifiedNameParserRuleCall_4_0_1() { return cAppliedRuleTrcRuleQualifiedNameParserRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//variableId+=EString
		public Assignment getVariableIdAssignment_7() { return cVariableIdAssignment_7; }

		//EString
		public RuleCall getVariableIdEStringParserRuleCall_7_0() { return cVariableIdEStringParserRuleCall_7_0; }

		//("," variableId+=EString)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//variableId+=EString
		public Assignment getVariableIdAssignment_8_1() { return cVariableIdAssignment_8_1; }

		//EString
		public RuleCall getVariableIdEStringParserRuleCall_8_1_0() { return cVariableIdEStringParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//"["
		public Keyword getLeftSquareBracketKeyword_11() { return cLeftSquareBracketKeyword_11; }

		//requiredTransformations=AbstractRuleDependency
		public Assignment getRequiredTransformationsAssignment_12() { return cRequiredTransformationsAssignment_12; }

		//AbstractRuleDependency
		public RuleCall getRequiredTransformationsAbstractRuleDependencyParserRuleCall_12_0() { return cRequiredTransformationsAbstractRuleDependencyParserRuleCall_12_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_13() { return cRightSquareBracketKeyword_13; }
	}

	public class RuleDependencyDisjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDependencyDisjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredTransformationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRequiredTransformationsAbstractRuleDependencyParserRuleCall_0_0 = (RuleCall)cRequiredTransformationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRequiredTransformationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_1_0 = (RuleCall)cRequiredTransformationsAssignment_1_1.eContents().get(0);
		
		//RuleDependencyDisjunction returns TRC::RuleDependencyDisjunction:
		//	requiredTransformations+=AbstractRuleDependency ("or" requiredTransformations+=AbstractRuleDependency)+;
		public ParserRule getRule() { return rule; }

		//requiredTransformations+=AbstractRuleDependency ("or" requiredTransformations+=AbstractRuleDependency)+
		public Group getGroup() { return cGroup; }

		//requiredTransformations+=AbstractRuleDependency
		public Assignment getRequiredTransformationsAssignment_0() { return cRequiredTransformationsAssignment_0; }

		//AbstractRuleDependency
		public RuleCall getRequiredTransformationsAbstractRuleDependencyParserRuleCall_0_0() { return cRequiredTransformationsAbstractRuleDependencyParserRuleCall_0_0; }

		//("or" requiredTransformations+=AbstractRuleDependency)+
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//requiredTransformations+=AbstractRuleDependency
		public Assignment getRequiredTransformationsAssignment_1_1() { return cRequiredTransformationsAssignment_1_1; }

		//AbstractRuleDependency
		public RuleCall getRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_1_0() { return cRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_1_0; }
	}

	public class RuleDependencyCompositeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDependencyComposite");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRuleDependencyConjunctionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRuleDependencyDisjunctionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//RuleDependencyComposite returns TRC::RuleDependencyComposite:
		//	"(" RuleDependencyConjunction ")" | "(" RuleDependencyDisjunction ")";
		public ParserRule getRule() { return rule; }

		//"(" RuleDependencyConjunction ")" | "(" RuleDependencyDisjunction ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" RuleDependencyConjunction ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//RuleDependencyConjunction
		public RuleCall getRuleDependencyConjunctionParserRuleCall_0_1() { return cRuleDependencyConjunctionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//"(" RuleDependencyDisjunction ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//RuleDependencyDisjunction
		public RuleCall getRuleDependencyDisjunctionParserRuleCall_1_1() { return cRuleDependencyDisjunctionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class RuleDependencyConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDependencyConjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredTransformationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRequiredTransformationsAbstractRuleDependencyParserRuleCall_0_0 = (RuleCall)cRequiredTransformationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRequiredTransformationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_1_0 = (RuleCall)cRequiredTransformationsAssignment_1_1.eContents().get(0);
		
		//RuleDependencyConjunction returns TRC::RuleDependencyConjunction:
		//	requiredTransformations+=AbstractRuleDependency ("and" requiredTransformations+=AbstractRuleDependency)+;
		public ParserRule getRule() { return rule; }

		//requiredTransformations+=AbstractRuleDependency ("and" requiredTransformations+=AbstractRuleDependency)+
		public Group getGroup() { return cGroup; }

		//requiredTransformations+=AbstractRuleDependency
		public Assignment getRequiredTransformationsAssignment_0() { return cRequiredTransformationsAssignment_0; }

		//AbstractRuleDependency
		public RuleCall getRequiredTransformationsAbstractRuleDependencyParserRuleCall_0_0() { return cRequiredTransformationsAbstractRuleDependencyParserRuleCall_0_0; }

		//("and" requiredTransformations+=AbstractRuleDependency)+
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//requiredTransformations+=AbstractRuleDependency
		public Assignment getRequiredTransformationsAssignment_1_1() { return cRequiredTransformationsAssignment_1_1; }

		//AbstractRuleDependency
		public RuleCall getRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_1_0() { return cRequiredTransformationsAbstractRuleDependencyParserRuleCall_1_1_0; }
	}

	public class AbstractRuleDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRuleDependency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDependencyCompositeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleDependencyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractRuleDependency returns TRC::AbstractRuleDependency:
		//	RuleDependencyComposite | RuleDependency;
		public ParserRule getRule() { return rule; }

		//RuleDependencyComposite | RuleDependency
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDependencyComposite
		public RuleCall getRuleDependencyCompositeParserRuleCall_0() { return cRuleDependencyCompositeParserRuleCall_0; }

		//RuleDependency
		public RuleCall getRuleDependencyParserRuleCall_1() { return cRuleDependencyParserRuleCall_1; }
	}

	public class RuleDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeRequiresKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeExcludesKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequiredTransformationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRequiredTransformationTransformationCrossReference_2_0 = (CrossReference)cRequiredTransformationAssignment_2.eContents().get(0);
		private final RuleCall cRequiredTransformationTransformationEStringParserRuleCall_2_0_1 = (RuleCall)cRequiredTransformationTransformationCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRequiredRuleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRequiredRuleTrcRuleCrossReference_4_0 = (CrossReference)cRequiredRuleAssignment_4.eContents().get(0);
		private final RuleCall cRequiredRuleTrcRuleQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cRequiredRuleTrcRuleCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFieldNamesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFieldNamesEStringParserRuleCall_7_0 = (RuleCall)cFieldNamesAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFieldNamesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFieldNamesEStringParserRuleCall_8_1_0 = (RuleCall)cFieldNamesAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//RuleDependency returns TRC::RuleDependency:
		//	type=("requires" | "excludes") "(" requiredTransformation=[TRC::Transformation|EString] "."
		//	requiredRule=[TRC::TrcRule|QualifiedName] "," "{" fieldNames+=EString ("," fieldNames+=EString)* "}" ")";
		public ParserRule getRule() { return rule; }

		//type=("requires" | "excludes") "(" requiredTransformation=[TRC::Transformation|EString] "."
		//requiredRule=[TRC::TrcRule|QualifiedName] "," "{" fieldNames+=EString ("," fieldNames+=EString)* "}" ")"
		public Group getGroup() { return cGroup; }

		//type=("requires" | "excludes")
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"requires" | "excludes"
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }

		//"requires"
		public Keyword getTypeRequiresKeyword_0_0_0() { return cTypeRequiresKeyword_0_0_0; }

		//"excludes"
		public Keyword getTypeExcludesKeyword_0_0_1() { return cTypeExcludesKeyword_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//requiredTransformation=[TRC::Transformation|EString]
		public Assignment getRequiredTransformationAssignment_2() { return cRequiredTransformationAssignment_2; }

		//[TRC::Transformation|EString]
		public CrossReference getRequiredTransformationTransformationCrossReference_2_0() { return cRequiredTransformationTransformationCrossReference_2_0; }

		//EString
		public RuleCall getRequiredTransformationTransformationEStringParserRuleCall_2_0_1() { return cRequiredTransformationTransformationEStringParserRuleCall_2_0_1; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//requiredRule=[TRC::TrcRule|QualifiedName]
		public Assignment getRequiredRuleAssignment_4() { return cRequiredRuleAssignment_4; }

		//[TRC::TrcRule|QualifiedName]
		public CrossReference getRequiredRuleTrcRuleCrossReference_4_0() { return cRequiredRuleTrcRuleCrossReference_4_0; }

		//QualifiedName
		public RuleCall getRequiredRuleTrcRuleQualifiedNameParserRuleCall_4_0_1() { return cRequiredRuleTrcRuleQualifiedNameParserRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//fieldNames+=EString
		public Assignment getFieldNamesAssignment_7() { return cFieldNamesAssignment_7; }

		//EString
		public RuleCall getFieldNamesEStringParserRuleCall_7_0() { return cFieldNamesEStringParserRuleCall_7_0; }

		//("," fieldNames+=EString)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//fieldNames+=EString
		public Assignment getFieldNamesAssignment_8_1() { return cFieldNamesAssignment_8_1; }

		//EString
		public RuleCall getFieldNamesEStringParserRuleCall_8_1_0() { return cFieldNamesEStringParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}

	public class TransformationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationElement");
		private final Keyword cTransformationElementKeyword = (Keyword)rule.eContents().get(1);
		
		//TransformationElement:
		//	"TransformationElement";
		public ParserRule getRule() { return rule; }

		//"TransformationElement"
		public Keyword getTransformationElementKeyword() { return cTransformationElementKeyword; }
	}

	public class SpecificationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecificationElement");
		private final Keyword cSpecificationElementKeyword = (Keyword)rule.eContents().get(1);
		
		//SpecificationElement:
		//	"SpecificationElement";
		public ParserRule getRule() { return rule; }

		//"SpecificationElement"
		public Keyword getSpecificationElementKeyword() { return cSpecificationElementKeyword; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class EssentialOCLUnrestrictedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EssentialOCLUnrestrictedName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EssentialOCLUnrestrictedName returns ecore::EString:
		//	Identifier;
		public ParserRule getRule() { return rule; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Identifier:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class UnrestrictedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnrestrictedName");
		private final RuleCall cEssentialOCLUnrestrictedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Intended to be overridden
		//UnrestrictedName returns ecore::EString:
		//	EssentialOCLUnrestrictedName;
		public ParserRule getRule() { return rule; }

		//EssentialOCLUnrestrictedName
		public RuleCall getEssentialOCLUnrestrictedNameParserRuleCall() { return cEssentialOCLUnrestrictedNameParserRuleCall; }
	}

	public class LOWERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOWER");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LOWER returns ecore::EInt:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class UPPERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UPPER");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UPPER returns ecore::EInt:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class UnreservedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnreservedName");
		private final RuleCall cEssentialOCLUnreservedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Intended to be overridden
		//UnreservedName returns ecore::EString:
		//	EssentialOCLUnreservedName;
		public ParserRule getRule() { return rule; }

		//EssentialOCLUnreservedName
		public RuleCall getEssentialOCLUnreservedNameParserRuleCall() { return cEssentialOCLUnreservedNameParserRuleCall; }
	}

	public class EssentialOCLUnreservedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EssentialOCLUnreservedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnrestrictedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCollectionTypeIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveTypeIdentifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cTupleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//EssentialOCLUnreservedName returns ecore::EString:
		//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | "Tuple";
		public ParserRule getRule() { return rule; }

		//UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | "Tuple"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnrestrictedName
		public RuleCall getUnrestrictedNameParserRuleCall_0() { return cUnrestrictedNameParserRuleCall_0; }

		//CollectionTypeIdentifier
		public RuleCall getCollectionTypeIdentifierParserRuleCall_1() { return cCollectionTypeIdentifierParserRuleCall_1; }

		//PrimitiveTypeIdentifier
		public RuleCall getPrimitiveTypeIdentifierParserRuleCall_2() { return cPrimitiveTypeIdentifierParserRuleCall_2; }

		//"Tuple"
		public Keyword getTupleKeyword_3() { return cTupleKeyword_3; }
	}

	public class PrimitiveTypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveTypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUnlimitedNaturalKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOclAnyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOclInvalidKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOclVoidKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//PrimitiveTypeIdentifier:
		//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclVoid";
		public ParserRule getRule() { return rule; }

		//"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclVoid"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"Integer"
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }

		//"Real"
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }

		//"String"
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }

		//"UnlimitedNatural"
		public Keyword getUnlimitedNaturalKeyword_4() { return cUnlimitedNaturalKeyword_4; }

		//"OclAny"
		public Keyword getOclAnyKeyword_5() { return cOclAnyKeyword_5; }

		//"OclInvalid"
		public Keyword getOclInvalidKeyword_6() { return cOclInvalidKeyword_6; }

		//"OclVoid"
		public Keyword getOclVoidKeyword_7() { return cOclVoidKeyword_7; }
	}

	public class CollectionTypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionTypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBagKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSequenceKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCollectionKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOrderedSetKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//CollectionTypeIdentifier returns ecore::EString:
		//	"Set" | "Bag" | "Sequence" | "Collection" | "OrderedSet";
		public ParserRule getRule() { return rule; }

		//"Set" | "Bag" | "Sequence" | "Collection" | "OrderedSet"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//"Bag"
		public Keyword getBagKeyword_1() { return cBagKeyword_1; }

		//"Sequence"
		public Keyword getSequenceKeyword_2() { return cSequenceKeyword_2; }

		//"Collection"
		public Keyword getCollectionKeyword_3() { return cCollectionKeyword_3; }

		//"OrderedSet"
		public Keyword getOrderedSetKeyword_4() { return cOrderedSetKeyword_4; }
	}
	
	
	private final TrcSpecificationElements pTrcSpecification;
	private final TrcRuleElements pTrcRule;
	private final ModuleListElements pModuleList;
	private final QualifiedNameElements pQualifiedName;
	private final ModuleElements pModule;
	private final TransformationListElements pTransformationList;
	private final TransformationElements pTransformation;
	private final TransformationImpactElements pTransformationImpact;
	private final TransformationDependencyListElements pTransformationDependencyList;
	private final TransformationDependencyElements pTransformationDependency;
	private final RuleDependencyDisjunctionElements pRuleDependencyDisjunction;
	private final RuleDependencyCompositeElements pRuleDependencyComposite;
	private final RuleDependencyConjunctionElements pRuleDependencyConjunction;
	private final AbstractRuleDependencyElements pAbstractRuleDependency;
	private final RuleDependencyElements pRuleDependency;
	private final TransformationElementElements pTransformationElement;
	private final SpecificationElementElements pSpecificationElement;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	private final EssentialOCLUnrestrictedNameElements pEssentialOCLUnrestrictedName;
	private final IdentifierElements pIdentifier;
	private final UnrestrictedNameElements pUnrestrictedName;
	private final LOWERElements pLOWER;
	private final UPPERElements pUPPER;
	private final UnreservedNameElements pUnreservedName;
	private final EssentialOCLUnreservedNameElements pEssentialOCLUnreservedName;
	private final PrimitiveTypeIdentifierElements pPrimitiveTypeIdentifier;
	private final CollectionTypeIdentifierElements pCollectionTypeIdentifier;
	private final TerminalRule tUNQUOTED_STRING;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TRCGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTrcSpecification = new TrcSpecificationElements();
		this.pTrcRule = new TrcRuleElements();
		this.pModuleList = new ModuleListElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pModule = new ModuleElements();
		this.pTransformationList = new TransformationListElements();
		this.pTransformation = new TransformationElements();
		this.pTransformationImpact = new TransformationImpactElements();
		this.pTransformationDependencyList = new TransformationDependencyListElements();
		this.pTransformationDependency = new TransformationDependencyElements();
		this.pRuleDependencyDisjunction = new RuleDependencyDisjunctionElements();
		this.pRuleDependencyComposite = new RuleDependencyCompositeElements();
		this.pRuleDependencyConjunction = new RuleDependencyConjunctionElements();
		this.pAbstractRuleDependency = new AbstractRuleDependencyElements();
		this.pRuleDependency = new RuleDependencyElements();
		this.pTransformationElement = new TransformationElementElements();
		this.pSpecificationElement = new SpecificationElementElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
		this.pEssentialOCLUnrestrictedName = new EssentialOCLUnrestrictedNameElements();
		this.pIdentifier = new IdentifierElements();
		this.pUnrestrictedName = new UnrestrictedNameElements();
		this.pLOWER = new LOWERElements();
		this.pUPPER = new UPPERElements();
		this.pUnreservedName = new UnreservedNameElements();
		this.pEssentialOCLUnreservedName = new EssentialOCLUnreservedNameElements();
		this.pPrimitiveTypeIdentifier = new PrimitiveTypeIdentifierElements();
		this.pCollectionTypeIdentifier = new CollectionTypeIdentifierElements();
		this.tUNQUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNQUOTED_STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.tpt.aadl.ramses.transformation.trc.xtext.TRC".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////generate tRC "http://www.tpt.fr/aadl/ramses/transformation/trc/xtext/TRC"
	//TrcSpecification returns TRC::TrcSpecification:
	//	moduleList=ModuleList transformationList=TransformationList dependencyList=TransformationDependencyList;
	public TrcSpecificationElements getTrcSpecificationAccess() {
		return pTrcSpecification;
	}
	
	public ParserRule getTrcSpecificationRule() {
		return getTrcSpecificationAccess().getRule();
	}

	//TrcRule returns TRC::TrcRule:
	//	name=EString;
	public TrcRuleElements getTrcRuleAccess() {
		return pTrcRule;
	}
	
	public ParserRule getTrcRuleRule() {
		return getTrcRuleAccess().getRule();
	}

	//ModuleList returns TRC::ModuleList:
	//	"Modules" "{" modules+=Module ";" (modules+=Module ";")* "}";
	public ModuleListElements getModuleListAccess() {
		return pModuleList;
	}
	
	public ParserRule getModuleListRule() {
		return getModuleListAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Module returns TRC::Module:
	//	name=EString "[" path=EString "]" (":" rules+=TrcRule ("," rules+=TrcRule)*)?;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//TransformationList returns TRC::TransformationList:
	//	"Transformations" "{" transformations+=Transformation ("," transformations+=Transformation)* "}";
	public TransformationListElements getTransformationListAccess() {
		return pTransformationList;
	}
	
	public ParserRule getTransformationListRule() {
		return getTransformationListAccess().getRule();
	}

	//Transformation returns TRC::Transformation:
	//	name=EString "{" "modules" ":" modules+=[TRC::Module] ("," modules+=[TRC::Module])* ("impacts" ":"
	//	impacts+=TransformationImpact ("," impacts+=TransformationImpact)*)? "}";
	public TransformationElements getTransformationAccess() {
		return pTransformation;
	}
	
	public ParserRule getTransformationRule() {
		return getTransformationAccess().getRule();
	}

	//TransformationImpact returns TRC::TransformationImpact:
	//	"(" (qualityAttributeName=EString ",")? impactValue=EInt ")";
	public TransformationImpactElements getTransformationImpactAccess() {
		return pTransformationImpact;
	}
	
	public ParserRule getTransformationImpactRule() {
		return getTransformationImpactAccess().getRule();
	}

	//TransformationDependencyList returns TRC::TransformationDependencyList:
	//	"Dependencies" "{" transformationDependencies+=TransformationDependency ";"
	//	(transformationDependencies+=TransformationDependency ";")* "}";
	public TransformationDependencyListElements getTransformationDependencyListAccess() {
		return pTransformationDependencyList;
	}
	
	public ParserRule getTransformationDependencyListRule() {
		return getTransformationDependencyListAccess().getRule();
	}

	//TransformationDependency returns TRC::TransformationDependency:
	//	"Apply" "(" appliedTransformation=[TRC::Transformation|EString] "." appliedRule=[TRC::TrcRule|QualifiedName] "," "{"
	//	variableId+=EString ("," variableId+=EString)* "}" ")" "[" requiredTransformations=AbstractRuleDependency "]";
	public TransformationDependencyElements getTransformationDependencyAccess() {
		return pTransformationDependency;
	}
	
	public ParserRule getTransformationDependencyRule() {
		return getTransformationDependencyAccess().getRule();
	}

	//RuleDependencyDisjunction returns TRC::RuleDependencyDisjunction:
	//	requiredTransformations+=AbstractRuleDependency ("or" requiredTransformations+=AbstractRuleDependency)+;
	public RuleDependencyDisjunctionElements getRuleDependencyDisjunctionAccess() {
		return pRuleDependencyDisjunction;
	}
	
	public ParserRule getRuleDependencyDisjunctionRule() {
		return getRuleDependencyDisjunctionAccess().getRule();
	}

	//RuleDependencyComposite returns TRC::RuleDependencyComposite:
	//	"(" RuleDependencyConjunction ")" | "(" RuleDependencyDisjunction ")";
	public RuleDependencyCompositeElements getRuleDependencyCompositeAccess() {
		return pRuleDependencyComposite;
	}
	
	public ParserRule getRuleDependencyCompositeRule() {
		return getRuleDependencyCompositeAccess().getRule();
	}

	//RuleDependencyConjunction returns TRC::RuleDependencyConjunction:
	//	requiredTransformations+=AbstractRuleDependency ("and" requiredTransformations+=AbstractRuleDependency)+;
	public RuleDependencyConjunctionElements getRuleDependencyConjunctionAccess() {
		return pRuleDependencyConjunction;
	}
	
	public ParserRule getRuleDependencyConjunctionRule() {
		return getRuleDependencyConjunctionAccess().getRule();
	}

	//AbstractRuleDependency returns TRC::AbstractRuleDependency:
	//	RuleDependencyComposite | RuleDependency;
	public AbstractRuleDependencyElements getAbstractRuleDependencyAccess() {
		return pAbstractRuleDependency;
	}
	
	public ParserRule getAbstractRuleDependencyRule() {
		return getAbstractRuleDependencyAccess().getRule();
	}

	//RuleDependency returns TRC::RuleDependency:
	//	type=("requires" | "excludes") "(" requiredTransformation=[TRC::Transformation|EString] "."
	//	requiredRule=[TRC::TrcRule|QualifiedName] "," "{" fieldNames+=EString ("," fieldNames+=EString)* "}" ")";
	public RuleDependencyElements getRuleDependencyAccess() {
		return pRuleDependency;
	}
	
	public ParserRule getRuleDependencyRule() {
		return getRuleDependencyAccess().getRule();
	}

	//TransformationElement:
	//	"TransformationElement";
	public TransformationElementElements getTransformationElementAccess() {
		return pTransformationElement;
	}
	
	public ParserRule getTransformationElementRule() {
		return getTransformationElementAccess().getRule();
	}

	//SpecificationElement:
	//	"SpecificationElement";
	public SpecificationElementElements getSpecificationElementAccess() {
		return pSpecificationElement;
	}
	
	public ParserRule getSpecificationElementRule() {
		return getSpecificationElementAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//EssentialOCLUnrestrictedName returns ecore::EString:
	//	Identifier;
	public EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return pEssentialOCLUnrestrictedName;
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}

	//Identifier:
	//	ID;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//// Intended to be overridden
	//UnrestrictedName returns ecore::EString:
	//	EssentialOCLUnrestrictedName;
	public UnrestrictedNameElements getUnrestrictedNameAccess() {
		return pUnrestrictedName;
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}

	//LOWER returns ecore::EInt:
	//	INT;
	public LOWERElements getLOWERAccess() {
		return pLOWER;
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	//UPPER returns ecore::EInt:
	//	INT;
	public UPPERElements getUPPERAccess() {
		return pUPPER;
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//// Intended to be overridden
	//UnreservedName returns ecore::EString:
	//	EssentialOCLUnreservedName;
	public UnreservedNameElements getUnreservedNameAccess() {
		return pUnreservedName;
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}

	//EssentialOCLUnreservedName returns ecore::EString:
	//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | "Tuple";
	public EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return pEssentialOCLUnreservedName;
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}

	//PrimitiveTypeIdentifier:
	//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclVoid";
	public PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return pPrimitiveTypeIdentifier;
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	//CollectionTypeIdentifier returns ecore::EString:
	//	"Set" | "Bag" | "Sequence" | "Collection" | "OrderedSet";
	public CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return pCollectionTypeIdentifier;
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//// Never forward parsed; just provides a placeholder
	//terminal UNQUOTED_STRING: //  for reverse serialisation of embedded OCL 
	//	"£$%^£$%^";
	public TerminalRule getUNQUOTED_STRINGRule() {
		return tUNQUOTED_STRING;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
