--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm

module HealthMonitoring;
create OUT : AADLBA 	from 		IN : AADLI,
									AADL_RUNTIME: AADLBA,
									DATA_MODEL: AADLBA,
									PROGRAMMING_PROPERTIES: AADLBA,
									HOOKS: ATLHOOKS,
									ARINC653_RUNTIME: AADLBA;

helper context AADLI!ComponentInstance def: retrieveErrorHandler(): Sequence(AADLBA!SubprogramSubcomponent) =
	let pa: AADLI!PropertyAssociation = self.ownedPropertyAssociation->any(e|e.property.name='Recovery_Actions') in
	if(not pa.oclIsUndefined()) then
		Sequence{thisModule.resolveMatchedTupleIfExists(Sequence{self,pa},'subprogramSubcomponent')}
	else 
		Sequence{}
	endif
;

helper def: getStopSelfSubprogram : AADLBA!SubprogramType = 'Stop_Self'.asSubprogramType('ARINC653_RUNTIME');
helper def: getStopSubprogram : AADLBA!SubprogramType = 'a_Stop'.asSubprogramType('ARINC653_RUNTIME');
helper def: getStartSubprogram : AADLBA!SubprogramType = 'Start'.asSubprogramType('ARINC653_RUNTIME');
helper def: getErrorStatusSubprogram : AADLBA!SubprogramType = 'Get_Error_Status'.asSubprogramType('ARINC653_RUNTIME');
helper def: getSetPartitionModeSubprogram : AADLBA!SubprogramType = 'Set_Partition_Mode'.asSubprogramType('ARINC653_RUNTIME');

-- @extends m_Process_Instance
rule m_Threads_HM
{
	from
		c: AADLI!ComponentInstance
		( 
			c.category=#process
			and
			c.componentInstance->exists(e|	e.category = #thread
											and 
											e.ownedPropertyAssociation->exists(e|e.property.name.equalsIgnoreCase('HM_Process_Recovery_Actions'))
										)
		)
	using
	{
		threadWith_HM: Sequence(AADLI!ComponentInstance) = c.componentInstance->select(e|	
											e.category = #thread
											and 
											e.ownedPropertyAssociation->exists(e|e.property.name.equalsIgnoreCase('HM_Process_Recovery_Actions'))
										);
		errorIds: Set(String) = threadWith_HM->collect(e| 
									e.ownedPropertyAssociation->any(f|f.property.name.equalsIgnoreCase('HM_Errors')).ownedValue->at(1).ownedValue.ownedListElement
									->collect(g|g.namedValue.name)
									)->asSet();
		getErrorSpg: AADLBA!SubprogramType = thisModule.getErrorStatusSubprogram;
		stopSelfSpg: AADLBA!SubprogramType = thisModule.getStopSelfSubprogram;
		
	}
	to
		sub : AADLBA!ProcessSubcomponent,
		implImg: AADLBA!ProcessImplementation
		(
			ownedThreadSubcomponent         <- c.componentInstance->select(e|e.category=#thread)
												->append(threadSubcomponent)
		),
		threadSubcomponent: AADLBA!ThreadSubcomponent
		(
			name <- 'error_handling_th',
			threadSubcomponentType <- threadImplementation,
			ownedPropertyAssociation <- Sequence{paEntryPoint,paDispatchProtocol,paErrorHandling}
		),
		threadType: AADLBA!ThreadType
		(
			name <- c.name+'_error_handler_th'
		),
		threadImplementation: AADLBA!ThreadImplementation
		(
			name <- c.name+'_error_handler_th.impl',
			ownedRealization <- thisModule.Realization(threadType),
			ownedSubprogramCallSequence <- Sequence{cs}
		),
		cs: AADLBA!SubprogramCallSequence
		(
			name <- c.name+'_error_handler_cs',
			ownedSubprogramCall <- Sequence{call}
		),
		call: AADLBA!SubprogramCall
		(
			name <- c.name+'_error_handler_call',
			calledSubprogram <- subprogramType
		),
		paEntryPoint: AADLBA!PropertyAssociation
		(
			property <- thisModule.getProperty('Compute_Entrypoint_Call_Sequence'),  
    		ownedValue <- Sequence{mpv}
		),
		mpv: AADLBA!ModalPropertyValue
		(
			ownedValue<-v
		),
		v: AADLBA!ReferenceValue
		(
			containmentPathElement <- Sequence{cpe}
		),
		cpe: AADLBA!ContainmentPathElement
		(
			namedElement <- cs
		),
		paDispatchProtocol: AADLBA!PropertyAssociation
		(
			property <- thisModule.getProperty('Dispatch_Protocol'),  
    		ownedValue <- Sequence{mpvDispatchProtocol}
		),
		mpvDispatchProtocol: AADLBA!ModalPropertyValue
		(
			ownedValue<-aperiodicValue
		),
		aperiodicValue:AADLBA!NamedValue
		(
			namedValue <- aperiodicEnum
		),
		aperiodicEnum: AADLBA!EnumerationLiteral
		(
			name <- 'Aperiodic'
		),
		paErrorHandling: AADLBA!PropertyAssociation
		(
			property <- thisModule.getProperty('Error_Handling'),  
    		ownedValue <- Sequence{mpvErrorHandling}
		),
		mpvErrorHandling: AADLBA!ModalPropertyValue
		(
			ownedValue <- blErrorHandling
		),
		blErrorHandling: AADLBA!BooleanLiteral
		(
			value <- true
		),
		subprogramType: AADLBA!SubprogramType
		(
			name <- c.name+'_error_handler_spg',
			ownedAnnexSubclause <- Sequence{ba}
		),
		ba:AADLBA!BehaviorAnnex
		(
			name        <- 'behavior_specification',
			states      <- Sequence{firstState,switchErrorState},
			transitions <- errorIds->asSequence()->flatten()
							->collect(e|thisModule.createTransition(c,e))
							->append(firstTransition),
			actions		<- Sequence{recoveryActionBlock}->union(errorIds->asSequence()->flatten()->collect(e|thisModule.resolveLazyTupleSingleIfExists(Sequence{c,e}, 'createTransition', 'recoveryActionBlock'))),
			variables   <- Sequence{errorStatus,errorCode}
		),
		firstState: AADLBA!BehaviorState
		(
			initial  <- true,
			final    <- true,
			complete <- false,
			name     <- 'error_recovery_state'
		),
		switchErrorState: AADLBA!BehaviorState
		(
			initial  <- false,
			final    <- false,
			complete <- false,
			name     <- 'switch_error_state'
		),
		firstTransition: AADLBA!BehaviorTransition
		(
			name <- 'get_error_transition',
			sourceState <- firstState,
			destinationState <- switchErrorState,
			actionBlock <- recoveryActionBlock
		),
		recoveryActionBlock: AADLBA!BehaviorActionBlock
		(content<-recoveryactions),
		recoveryactions: AADLBA!BehaviorActionSequence
		(actions <- Sequence{stopSelfCall,getErrorCall}),
		
		stopSelfCall: AADLBA!SubprogramCallAction
		(subprogram <- stopSelfHolder),
		stopSelfHolder: AADLBA!SubprogramHolder
		(element <- stopSelfSpg),
		
		getErrorCall: AADLBA!SubprogramCallAction
		(
			subprogram <- getErrorHolder,
			parameterLabels<-Sequence{errorStatusHolder,errorCodeHolder}
		),
		getErrorHolder: AADLBA!SubprogramHolder
		(element <- getErrorSpg),
		errorStatusHolder: AADLBA!BehaviorVariableHolder
		(
			element <- errorStatus
		),
		errorCodeHolder: AADLBA!BehaviorVariableHolder
		(
			element <- errorCode
		),
		errorStatus: AADLBA!BehaviorVariable
		(
			name <- 'error_status',
			dataClassifier <- 'Error_Status_Type.impl'.asDataType('ARINC653_RUNTIME')
		),
		errorCode: AADLBA!BehaviorVariable
		(
			name <- 'error_code',
			dataClassifier <- 'Return_Code_Type'.asDataType('ARINC653_RUNTIME')
		)
}


unique lazy rule createTransition
{
  from
	c: AADLI!ComponentInstance,
	errorId: String
  using
  {
	source: AADLBA!BehaviorState = thisModule.resolveMatchedSingleIfExists(c,'switchErrorState');
	destination: AADLBA!BehaviorState = thisModule.resolveMatchedSingleIfExists(c,'firstState');
	statusVariable: AADLBA!BehaviorVariable = thisModule.resolveMatchedSingleIfExists(c,'errorStatus');
	threadWith_HM: Sequence(AADLI!ComponentInstance) = c.componentInstance->select(e|	
											e.category = #thread
											and 
											e.ownedPropertyAssociation->exists(e|e.property.name.equalsIgnoreCase('HM_Process_Recovery_Actions'))
										);

	a: AADLBA!BehaviorAction = OclUndefined;
  }
  to
  	t: AADLBA!BehaviorTransition
	(
		name <- 'action_'+errorId,
	 	sourceState <- source,
	 	destinationState <- destination,
	 	condition <- fireErrorCondition
	),
	fireErrorCondition: AADLBA!ValueExpression
	(
		relations <- Sequence{fireErrorRelation}
	),
	fireErrorRelation: AADLBA!Relation
	(
		relationalOperator<-#Equal,
	 	firstExpression<-errorStatusExpression,
		secondExpression<-errorEnumExpression
	),
	errorStatusExpression: AADLBA!SimpleExpression
	(
		terms <- Sequence{errorStatusTerm}
	),
	errorStatusTerm: AADLBA!Term
	(
		factors <- Sequence{errorStatusFactor}
	),
	errorStatusFactor: AADLBA!Factor
	(
		firstValue <- errorStatusDataComponentReference
	),
	errorStatusDataComponentReference: AADLBA!DataComponentReference
	(
		data <- Sequence{errorStatusHolder,errorCodeFieldHolder}
	),
	errorStatusHolder: AADLBA!BehaviorVariableHolder
	(
		element <- statusVariable
	),
	errorCodeFieldHolder: AADLBA!DataSubcomponentHolder
	(
		element <- 'Error_Status_Type.impl'.asClassifier('ARINC653_RUNTIME').ownedDataSubcomponent->any(e|e.name = 'ERROR_CODE')
	),
	
	errorEnumExpression: AADLBA!SimpleExpression
	(
		terms <- Sequence{errorEnumTerm}
	),
	errorEnumTerm: AADLBA!Term
	(
		factors <- Sequence{errorEnumFactor}
	),
	errorEnumFactor: AADLBA!Factor
	(
		firstValue <- errorEnumLiteral
	),
	errorEnumLiteral: AADLBA!BehaviorEnumerationLiteral
	(
		component <- 'Error_Code_Type'.asDataType('ARINC653_RUNTIME'),
		enumLiteral <- enumSL
	),
	enumSL: AADLBA!StringLiteral
	(value<-if(errorId.equalsIgnoreCase('Deadline_Miss')) then
				'DEADLINE_MISSED'
			else
				errorId.toUpperCase()
			endif	
			),
	recoveryActionBlock: AADLBA!BehaviorActionBlock
	(
		content<-recoveryactions
	),
	recoveryactions: AADLBA!BehaviorActionSequence
  do
  {
  	 a <- threadWith_HM->collect(e|
						let error: AADLBA!NamedValue = e.ownedPropertyAssociation->any(e|e.property.name.equalsIgnoreCase('HM_Errors'))
							.ownedValue->at(1).ownedValue.ownedListElement->any(e|e.namedValue.name=errorId)
						in
						let idx:Integer = e.ownedPropertyAssociation->any(e|e.property.name.equalsIgnoreCase('HM_Errors'))
							.ownedValue->at(1).ownedValue.ownedListElement->indexOf(error)
						in
							
						e.ownedPropertyAssociation->any(e|e.property.name.equalsIgnoreCase('HM_Process_Recovery_Actions'))
						.ownedValue->at(1).ownedValue.ownedListElement->at(idx).namedValue.createAction(e)
					)->flatten();
	 if(not a.oclIsUndefined() and not a->isEmpty())
	 {
		recoveryactions.actions <- a;
  		t.actionBlock <- recoveryActionBlock;
	 }
	 else
	 {
		t.actionBlock <- OclUndefined;
	 }
	 t;
  }
}

helper context OclAny def: getPropertyAssociation() : AADLBA!PropertyAssociation =
	if self.eContainer().oclIsTypeOf(AADLBA!PropertyAssociation) then
		self.eContainer()
	else
		self.eContainer().getPropertyAssociation()
	endif
;


helper context AADLBA!EnumerationLiteral def: createAction(c: AADLI!ComponentInstance) : Sequence(AADLBA!BehaviorAction) =
	-- Ignore
	-- Nothing
	if(self.name.equalsIgnoreCase('Nothing') or self.name.equalsIgnoreCase('Ignore')) then
		Sequence{}
	else
		-- Confirm
		if(self.name.equalsIgnoreCase('Confirm')) then
			Sequence{}
		else
			-- Process_Restart
			if(self.name.equalsIgnoreCase('Process_Restart')) then
				Sequence{
					thisModule.createCallRestart(c)
				}
			else
				-- Process_Stop_And_Start_Another
				if(self.name.equalsIgnoreCase('Process_Stop_And_Start_Another')) then
					Sequence{}
				else
					-- Process_Stop
					if(self.name.equalsIgnoreCase('Process_Stop')) then
						Sequence{
							thisModule.createCallStop(c)
						}
					else
						-- Cold_Restart
						if(self.name.equalsIgnoreCase('Cold_Restart')) then
							Sequence{
								thisModule.createCallSetPartitionMode(c, 'COLD_START')
							}
						else
							-- Partition_Stop
							if(self.name.equalsIgnoreCase('Warm_Restart')) then
								Sequence{
									thisModule.createCallSetPartitionMode(c, 'WARM_START')
								}
							else
								-- Partition_Stop
								if(self.name.equalsIgnoreCase('Partition_Stop')) then
									Sequence{
										thisModule.createCallSetPartitionMode(c, 'IDLE')
									}
								else
									OclUndefined
								endif
							endif
						endif
					endif
				endif
			endif
		endif	
	endif
;


lazy rule createCallStop
{
  from
  	c: AADLI!ComponentInstance
  using
  {
	stopSpg: AADLI!SubprogramType = thisModule.getStopSubprogram;
	processInstance: AADLI!ComponentInstance = c.eContainer();
	idx: Integer = processInstance.componentInstance->select(e|e.category=#thread)
		->indexOf(c);
  }
  to
  	-- TEST SUPP POUR VERIFIER QUE LE THREAD FAUTIF EST BIEN CELUI CORRESPONDANT Ã  c
  	ifStatement:AADLBA!IfStatement
	(
		logicalValueExpression <- isFaultyThreadExpression,
		behaviorActions <- checkedActionSequence
	),
	checkedActionSequence: AADLBA!BehaviorActionSequence
	(
		actions <-Sequence{stopCall}
	),
	isFaultyThreadExpression: AADLBA!ValueExpression
	(
		relations <- Sequence{isFaultyThreadRelation}
	),
	isFaultyThreadRelation: AADLBA!Relation
	(
		relationalOperator<-#Equal,
	 	firstExpression<-faultyThreadExpression,
		secondExpression <- currentThreadExpression
	),
	faultyThreadExpression: AADLBA!SimpleExpression
	(
		terms <- Sequence{faultyThreadTerm}
	),
	faultyThreadTerm: AADLBA!Term
	(
		factors <- Sequence{faultyThreadFactor}
	),
	faultyThreadFactor: AADLBA!Factor
	(
		firstValue <- errorStatusForCheck
	),
	errorStatusForCheck:AADLBA!DataComponentReference
	(
		data <- Sequence{errorStatusForCheckHolder,processIdFieldForCheckHolder}
	),
	errorStatusForCheckHolder: AADLBA!BehaviorVariableHolder
	(
		element <- thisModule.resolveMatchedSingleIfExists(processInstance, 'errorStatus')
	),
	processIdFieldForCheckHolder: AADLBA!DataSubcomponentHolder
	(
		element <- 'Error_Status_Type.impl'.asDataType('ARINC653_RUNTIME').ownedDataSubcomponent->any(e|e.name = 'FAILED_PROCESS_ID')
	),
	
	currentThreadExpression: AADLBA!SimpleExpression
	(
		terms <- Sequence{currentThreadTerm}
	),
	currentThreadTerm: AADLBA!Term
	(
		factors <- Sequence{currentThreadFactor}
	),
	currentThreadFactor: AADLBA!Factor
	(
		firstValue <- currentThreadIdx
	),
	currentThreadIdx: AADLBA!BehaviorIntegerLiteral
	(
		value <- idx.longValue()
	),
	stopCall: AADLBA!SubprogramCallAction
	(
		subprogram <- stopHolder,
		parameterLabels <- Sequence{errorStatus, errorCodeHolder}
	),
	stopHolder: AADLBA!SubprogramHolder
	(element <- stopSpg),
	errorCodeHolder: AADLBA!BehaviorVariableHolder
	(
		element <- thisModule.resolveMatchedSingleIfExists(processInstance, 'errorCode')
	),
	errorStatus:AADLBA!DataComponentReference
	(
		data <- Sequence{errorStatusHolder,processIdFieldHolder}
	),
	errorStatusHolder: AADLBA!BehaviorVariableHolder
	(
		element <- thisModule.resolveMatchedSingleIfExists(processInstance, 'errorStatus')
	),
	processIdFieldHolder: AADLBA!DataSubcomponentHolder
	(
		element <- 'Error_Status_Type.impl'.asDataType('ARINC653_RUNTIME').ownedDataSubcomponent->any(e|e.name = 'FAILED_PROCESS_ID')
	)
  do
  {
  	ifStatement;
  }
}

lazy rule createCallRestart
{
  from
  	c: AADLI!ComponentInstance
  using
  {
  	startSpg: AADLI!SubprogramType = thisModule.getStartSubprogram;
	stopSpg: AADLI!SubprogramType = thisModule.getStopSubprogram;
	processInstance: AADLI!ComponentInstance = c.eContainer();
	idx: Integer = processInstance.componentInstance->select(e|e.category=#thread)
		->indexOf(c);
  }
  to
    ifStatement:AADLBA!IfStatement
	(
		logicalValueExpression <- isFaultyThreadExpression,
		behaviorActions <- checkedActionSequence
	),
	checkedActionSequence: AADLBA!BehaviorActionSequence
	(
		actions <-Sequence{startCall,stopCall}
	),
	isFaultyThreadExpression: AADLBA!ValueExpression
	(
		relations <- Sequence{isFaultyThreadRelation}
	),
	isFaultyThreadRelation: AADLBA!Relation
	(
		relationalOperator<-#Equal,
	 	firstExpression<-faultyThreadExpression,
		secondExpression <- currentThreadExpression
	),
	faultyThreadExpression: AADLBA!SimpleExpression
	(
		terms <- Sequence{faultyThreadTerm}
	),
	faultyThreadTerm: AADLBA!Term
	(
		factors <- Sequence{faultyThreadFactor}
	),
	faultyThreadFactor: AADLBA!Factor
	(
		firstValue <- errorStatusForCheck
	),
	errorStatusForCheck:AADLBA!DataComponentReference
	(
		data <- Sequence{errorStatusForCheckHolder,processIdFieldForCheckHolder}
	),
	errorStatusForCheckHolder: AADLBA!BehaviorVariableHolder
	(
		element <- thisModule.resolveMatchedSingleIfExists(processInstance, 'errorStatus')
	),
	processIdFieldForCheckHolder: AADLBA!DataSubcomponentHolder
	(
		element <- 'Error_Status_Type.impl'.asDataType('ARINC653_RUNTIME').ownedDataSubcomponent->any(e|e.name = 'FAILED_PROCESS_ID')
	),
	
	currentThreadExpression: AADLBA!SimpleExpression
	(
		terms <- Sequence{currentThreadTerm}
	),
	currentThreadTerm: AADLBA!Term
	(
		factors <- Sequence{currentThreadFactor}
	),
	currentThreadFactor: AADLBA!Factor
	(
		firstValue <- currentThreadIdx
	),
	currentThreadIdx: AADLBA!BehaviorIntegerLiteral
	(
		value <- idx.longValue()
	),
  	startCall: AADLBA!SubprogramCallAction
	(
		subprogram <- startHolder,
		parameterLabels <- Sequence{errorStatus, errorCodeHolder}
	),
	startHolder: AADLBA!SubprogramHolder
	(element <- startSpg),
	errorCodeHolder: AADLBA!BehaviorVariableHolder
	(
		element <- thisModule.resolveMatchedSingleIfExists(processInstance, 'errorCode')
	),
	errorStatus:AADLBA!DataComponentReference
	(
		data <- Sequence{errorStatusHolder,processIdFieldHolder}
	),
	errorStatusHolder: AADLBA!BehaviorVariableHolder
	(
		element <- thisModule.resolveMatchedSingleIfExists(processInstance, 'errorStatus')
	),
	processIdFieldHolder: AADLBA!DataSubcomponentHolder
	(
		element <- 'Error_Status_Type.impl'.asDataType('ARINC653_RUNTIME').ownedDataSubcomponent->any(e|e.name = 'FAILED_PROCESS_ID')
	),
	stopCall: AADLBA!SubprogramCallAction
	(
		subprogram <- stopHolder,
		parameterLabels <- Sequence{errorStatusForStop, errorCodeHolderForStop}
	),
	stopHolder: AADLBA!SubprogramHolder
	(element <- stopSpg),
	errorCodeHolderForStop: AADLBA!BehaviorVariableHolder
	(
		element <- thisModule.resolveMatchedSingleIfExists(processInstance, 'errorCode')
	),
	errorStatusForStop:AADLBA!DataComponentReference
	(
		data <- Sequence{errorStatusHolderForStop,processIdFieldHolderForStop}
	),
	errorStatusHolderForStop: AADLBA!BehaviorVariableHolder
	(
		element <- thisModule.resolveMatchedSingleIfExists(processInstance, 'errorStatus')
	),
	processIdFieldHolderForStop: AADLBA!DataSubcomponentHolder
	(
		element <- 'Error_Status_Type.impl'.asDataType('ARINC653_RUNTIME').ownedDataSubcomponent->any(e|e.name = 'FAILED_PROCESS_ID')
	)
  do
  {
  	ifStatement;
  }
}

lazy rule createCallSetPartitionMode
{
  from
  	c: AADLI!ComponentInstance,
	mode: String
  using
  {
	setPartitionModeSpg: AADLI!SubprogramType = thisModule.getSetPartitionModeSubprogram;
	processInstance: AADLI!ComponentInstance = c.eContainer();
	idx: Integer = processInstance.componentInstance->select(e|e.category=#thread)
		->indexOf(c);
  }
  to
  	ifStatement:AADLBA!IfStatement
	(
		logicalValueExpression <- isFaultyThreadExpression,
		behaviorActions <- checkedActionSequence
	),
	checkedActionSequence: AADLBA!BehaviorActionSequence
	(
		actions <-Sequence{setPartitionModeCall}
	),
	isFaultyThreadExpression: AADLBA!ValueExpression
	(
		relations <- Sequence{isFaultyThreadRelation}
	),
	isFaultyThreadRelation: AADLBA!Relation
	(
		relationalOperator<-#Equal,
	 	firstExpression<-faultyThreadExpression,
		secondExpression <- currentThreadExpression
	),
	faultyThreadExpression: AADLBA!SimpleExpression
	(
		terms <- Sequence{faultyThreadTerm}
	),
	faultyThreadTerm: AADLBA!Term
	(
		factors <- Sequence{faultyThreadFactor}
	),
	faultyThreadFactor: AADLBA!Factor
	(
		firstValue <- errorStatus
	),
	errorStatus:AADLBA!DataComponentReference
	(
		data <- Sequence{errorStatusHolder,processIdFieldHolder}
	),
	errorStatusHolder: AADLBA!BehaviorVariableHolder
	(
		element <- thisModule.resolveMatchedSingleIfExists(processInstance, 'errorStatus')
	),
	processIdFieldHolder: AADLBA!DataSubcomponentHolder
	(
		element <- 'Error_Status_Type.impl'.asDataType('ARINC653_RUNTIME').ownedDataSubcomponent->any(e|e.name = 'FAILED_PROCESS_ID')
	),
	
	currentThreadExpression: AADLBA!SimpleExpression
	(
		terms <- Sequence{currentThreadTerm}
	),
	currentThreadTerm: AADLBA!Term
	(
		factors <- Sequence{currentThreadFactor}
	),
	currentThreadFactor: AADLBA!Factor
	(
		firstValue <- currentThreadIdx
	),
	currentThreadIdx: AADLBA!BehaviorIntegerLiteral
	(
		value <- idx.longValue()
	),
	setPartitionModeCall: AADLBA!SubprogramCallAction
	(
		subprogram <- setPartitionModeHolder,
		parameterLabels <- Sequence{modeValueExpression, errorCodeHolder}
	),
	setPartitionModeHolder: AADLBA!SubprogramHolder
	(element <- setPartitionModeSpg),
	errorCodeHolder: AADLBA!BehaviorVariableHolder
	(
		element <- thisModule.resolveMatchedSingleIfExists(processInstance, 'errorCode')
	),
	modeValueExpression: AADLBA!ValueExpression
	(
		relations <- Sequence{modeErrorRelation}
	),
	modeErrorRelation: AADLBA!Relation
	(
		relationalOperator<-#None,
	 	firstExpression<-modeEnumExpression
	),
	modeEnumExpression: AADLBA!SimpleExpression
	(
		terms <- Sequence{modeEnumTerm}
	),
	modeEnumTerm: AADLBA!Term
	(
		factors <- Sequence{modeEnumFactor}
	),
	modeEnumFactor: AADLBA!Factor
	(
		firstValue <- modeEnumLiteral
	),
	modeEnumLiteral:AADLBA!BehaviorEnumerationLiteral
	(
		component <- 'OPERATING_MODE_TYPE'.asDataType('ARINC653_RUNTIME'),
		enumLiteral <- enumSL
	),
	enumSL: AADLBA!StringLiteral
	(
		value <- mode
	)
  do
  {
  	ifStatement;
  }
}