--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- nsURI AADLBA=http:///AADLBA
-- @atlcompiler emftvm

module ExpandThreadsDispatchProtocol;
create OUT : AADLBA 	from 		IN : AADLI,
									AADL_RUNTIME: AADLBA,
									DATA_MODEL: AADLBA,
									PROGRAMMING_PROPERTIES: AADLBA,
									HOOKS: ATLHOOKS,

									ARINC653_RUNTIME: AADLBA;


helper context AADLI!FeatureInstance def: isLastFeatureInstance() : Boolean =
	let c: AADLI!ComponentInstance = self.getComponentInstance() in
	c.featureInstance->last() = self
;

helper def: getLoadedAADLRuntime: String =
	'ARINC653_RUNTIME'
;

helper def: getRuntimeName: String =
	'arinc653_runtime'
;

helper def: getRuntimeTimeType: AADLBA!DataType = 'System_Time_Type'.asDataType('ARINC653_RUNTIME');

helper def: getWaitPeriodSubprogram : AADLBA!SubprogramType = 'Periodic_Wait'.asSubprogramType('ARINC653_RUNTIME');

helper def: getRuntimeEventType: AADLBA!DataType = 'Event_Id_Type'.asDataType('ARINC653_RUNTIME');

helper def: getWaitEventSubprogram: AADLBA!SubprogramType = 'Wait_Event'.asSubprogramType('ARINC653_RUNTIME');

helper def: getTimedWaitSubprogram: AADLBA!SubprogramType = 'Timed_Wait'.asSubprogramType('ARINC653_RUNTIME');


helper def: collectSporadicGlobalVariables (c: AADLI!ComponentInstance) : Sequence(AADLBA!DataSubcomponent) =
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'EVENT_ID')}
;

helper def: collectTimedGlobalVariables (c: AADLI!ComponentInstance) : Sequence(AADLBA!DataSubcomponent) =
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'EVENT_ID')}
;
	
helper def: collectSporadicThreadVariables (c: AADLI!ComponentInstance) : Sequence(AADLBA!DataSubcomponent) =	
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'DELAY'), thisModule.CreateInfiniteTimeOutSubcomponentFromCpt(c)}
;

helper def: collectTimedThreadVariables (c: AADLI!ComponentInstance) : Sequence(AADLBA!DataSubcomponent) =	
	Sequence{thisModule.CreateTimeOutSubcomponentFromCptPeriod(c)}
;

helper def: collectSporadicGlobalVariablesAccesses (c: AADLI!ComponentInstance) : Sequence(AADLBA!DataAccess) =
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'EVENT_ID_ACCESS')}
;

helper def: collectTimedGlobalVariablesAccesses (c: AADLI!ComponentInstance) : Sequence(AADLBA!DataAccess) =
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'EVENT_ID_ACCESS')}
;
	
helper def: collectSporadicThreadVariablesAccesses (c: AADLI!ComponentInstance) : Sequence(AADLBA!DataAccess) =
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'EVENT_ID_LOCAL_ACCESS')}
;

helper def: collectTimedThreadVariablesAccesses (c: AADLI!ComponentInstance) : Sequence(AADLBA!DataAccess) =
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'EVENT_ID_LOCAL_ACCESS')}
;

helper def: collectSporadicThreadVariablesAccessConnections (c: AADLI!ComponentInstance) : Sequence(AADLBA!AccessConnections) =
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'EVENT_ID_LOCAL_ACCESSCONNECTION')}
;

helper def: collectTimedThreadVariablesAccessConnections (c: AADLI!ComponentInstance) : Sequence(AADLBA!AccessConnections) =
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'EVENT_ID_LOCAL_ACCESSCONNECTION')}
;

helper def: collectSporadicGlobalVariablesAccessConnections (c: AADLI!ComponentInstance) : Sequence(AADLBA!AccessConnections) =
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'EVENT_ID_ACCESSCONNECTION')}
;

	
helper def: collectTimedGlobalVariablesAccessConnections (c: AADLI!ComponentInstance) : Sequence(AADLBA!AccessConnections) =
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'EVENT_ID_ACCESSCONNECTION')}
;
	
helper def: collectSporadicBehaviorActions (c: AADLI!ComponentInstance) : Sequence(AADLBA!BehaviorAction) =
	Sequence{thisModule.resolveMatchedSingleIfExists(c, 'timedWaitCall'),thisModule.resolveMatchedSingleIfExists(c, 'waitDispatchCall'),
		thisModule.resolveMatchedSingleIfExists(c,'resetEventCall')
	}
;

helper def: getDispatchTrigger (c: AADLI!ComponentInstance) : Sequence(AADLI!FeatureInstance) =
	if(c.ownedPropertyAssociation->exists(e|e.property.name.equalsIgnoreCase('dispatch_trigger'))) then
		let dispatch_trigger_property_value: Sequence(AADLI!Feature) = c.ownedPropertyAssociation->any(e|e.property.name.equalsIgnoreCase('dispatch_trigger')).ownedValue in
			c.featureInstance->select( e| dispatch_trigger_property_value->exists(f|f.name=e.name))
	else
		c.featureInstance->select(e|(e.feature.oclIsTypeOf(AADLI!EventPort) or e.feature.oclIsTypeOf(AADLI!EventDataPort)) and e.isInputFeature())
	endif
;


-- @extends m_ThreadEntrypoint
abstract rule m_SporadicOrTimedThread
{
	from
		c: AADLI!ComponentInstance
    	(
    		let portsForDispatch : Sequence(AADLI!FeatureInstance) = thisModule.getDispatchTrigger(c) in
    		portsForDispatch->select(e|e.dstConnectionInstance->exists(f|f.connectionReference->last().connection.source.connectionEnd.isProcessPort()))->isEmpty()
			and (not c.isPeriodicThread()) 
		)
	using
	{
		RETURN_CODE: AADLBA!DataSubcomponent = thisModule.resolveMatchedSingleIfExists(c, 'returnData');
		spg_event : AADLBA!SubprogramType = thisModule.getWaitEventSubprogram;
	}
	to
		sub: AADLBA!ThreadSubcomponent,
		waitDispatchCall: AADLBA!SubprogramCallAction
		(
			subprogram <- callHolder,
			parameterLabels <- Sequence{EVENT_ID_ACCESS_HOLDER,TIME_OUT_HOLDER,RETURN_CODE_HOLDER_EVT}
		),
		callHolder: AADLBA!CalledSubprogramHolder
		(
			element <- spg_event
		),
		TIME_OUT_HOLDER: AADLBA!DataSubcomponentHolder,
		EVENT_ID: AADLBA!DataSubcomponent
		(
			name <- c.uniqueName()+'_barrier',
			dataSubcomponentType <- thisModule.getRuntimeEventType
		),
		EVENT_ID_ACCESS_HOLDER: AADLBA!DataAccessHolder
		(
			element <- EVENT_ID_LOCAL_ACCESS
		),
		RETURN_CODE_HOLDER_EVT: AADLBA!DataSubcomponentHolder
		(
			element <- RETURN_CODE
		),
		
		
		EVENT_ID_LOCAL_ACCESS: AADLBA!DataAccess
		(
   			name <- c.name+thisModule.dataAccessSuffix()+'barrier',
			dataFeatureClassifier <- thisModule.getRuntimeEventType,
			kind <- #requires
		),
		EVENT_ID_LOCAL_ACCESSCONNECTION: AADLBA!AccessConnection
		(
			name <- c.uniqueName()+'_to_globalVariable',
			source<-connectedThreadAccess,
			accessCategory<-#data,
			destination<-connectedSubprogramAccess
		),
		connectedSubprogramAccess: AADLBA!ConnectedElement
		(
			connectionEnd<-EVENT_ID_LOCAL_ACCESS
		),
		connectedThreadAccess: AADLBA!ConnectedElement
		(
			connectionEnd<-EVENT_ID_ACCESS
		),
		EVENT_ID_ACCESS: AADLBA!DataAccess
		(
   			name <- c.name+thisModule.dataAccessSuffix()+'barrier',
			dataFeatureClassifier <- thisModule.getRuntimeEventType,
			kind <- #requires
		),
		EVENT_ID_ACCESSCONNECTION: AADLBA!AccessConnection
		(
			name <- c.uniqueName()+'_to_barrier_globalVariable',
			source<-connectedAccess,
			accessCategory<-#data,
			destination<-connectedSubcomponent
		),
		
		connectedSubcomponent: AADLBA!ConnectedElement
		(
			connectionEnd<-EVENT_ID
		),
		connectedAccess: AADLBA!ConnectedElement
		(
			connectionEnd<-EVENT_ID_ACCESS
		),
		
		resetEventCall: AADLBA!SubprogramCallAction
		(
			subprogram <- resetCallHolder,
			parameterLabels <- Sequence{RESET_EVENT_ID_ACCESS_HOLDER,RESET_RETURN_CODE_HOLDER_EVT}
		),
		resetCallHolder: AADLBA!CalledSubprogramHolder
		(
			element <- 'Reset_Event'.asSubprogramType('ARINC653_RUNTIME')
		),
		RESET_EVENT_ID_ACCESS_HOLDER: AADLBA!DataAccessHolder
		(
			element <- EVENT_ID_LOCAL_ACCESS
		),
		RESET_RETURN_CODE_HOLDER_EVT: AADLBA!DataSubcomponentHolder
		(
			element <- RETURN_CODE
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(EVENT_ID, c);
		connectedAccess.setContext(sub);
		connectedSubprogramAccess.setContext(thisModule.resolveMatchedSingleIfExists(c, 'callEntryPoint'));
	}
}

-- @extends m_SporadicOrTimedThread
rule m_TimedThread
{
	from
		c: AADLI!ComponentInstance
    	(
    		c.isTimedThread()
		)
	using
	{
		RETURN_CODE: AADLBA!DataSubcomponent = thisModule.resolveMatchedSingleIfExists(c, 'returnData');
		spg_event : AADLBA!SubprogramType = thisModule.getWaitEventSubprogram;
		spg_timed_wait: AADLBA!SubprogramType = thisModule.getTimedWaitSubprogram;
		TIME_OUT: AADLBA!DataSubcomponent = thisModule.CreateTimeOutSubcomponentFromCptPeriod(c);
	}
	to		
		sub: AADLBA!ThreadSubcomponent,
		waitDispatchCall: AADLBA!SubprogramCallAction,
		TIME_OUT_HOLDER: AADLBA!DataSubcomponentHolder(
			element <- TIME_OUT
		)
}


-- @extends m_ThreadEntrypoint,m_SporadicOrTimedThread
rule m_SporadicThread
{
	from
		c: AADLI!ComponentInstance
    	(
			c.isSporadicThread() 
		)
	using
	{
		TIME_OUT: AADLBA!DataSubcomponent = thisModule.CreateInfiniteTimeOutSubcomponentFromCpt(c);
		RETURN_CODE: AADLBA!DataSubcomponent = thisModule.resolveMatchedSingleIfExists(c, 'returnData');
		spg_event : AADLBA!SubprogramType = thisModule.getWaitEventSubprogram;
		spg_timed_wait: AADLBA!SubprogramType = thisModule.getTimedWaitSubprogram;
	}
	to
		sub: AADLBA!ThreadSubcomponent,
		TIME_OUT_HOLDER: AADLBA!DataSubcomponentHolder(
			element <- TIME_OUT
		),
		timedWaitCall: AADLBA!SubprogramCallAction
		(
			subprogram <- timedWaitCallHolder,
			parameterLabels <- Sequence{DELAY_HOLDER,RETURN_CODE_HOLDER}
		),
		timedWaitCallHolder: AADLBA!CalledSubprogramHolder
		(
			element <- spg_timed_wait
		),
		DELAY_HOLDER: AADLBA!DataSubcomponentHolder
		(
			element<-DELAY
		),
		DELAY: AADLBA!DataSubcomponent
		(
			name <- c.uniqueName()+'_timed_wait',
			dataSubcomponentType <- thisModule.getRuntimeTimeType
		),
		RETURN_CODE_HOLDER: AADLBA!DataSubcomponentHolder
		(
			element <- RETURN_CODE
		)
}

