--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm

module ExpandThreadsPorts;
create OUT : AADLBA 	from 		IN : AADLI,
									AADL_RUNTIME: AADLBA,
									DATA_MODEL: AADLBA,
									PROGRAMMING_PROPERTIES: AADLBA,
									HOOKS: ATLHOOKS,
									RAVENSCAR_RUNTIME: AADLBA;


--- TODO: implement next helper
helper def: collectCommunicationsLocalVariables(c: AADLI!ComponentInstance, callSequences: Sequence(AADLI!SubprogramCallSequence)): Sequence(AADLBA!DataSubcomponent)=
	Sequence{}
;


--	- m_Process_Output_DataPort_Instance extends m_Process_Output_Port_Instance: for each port instance
--		such that
--			port is a data port
--		produce
--			(i) refine globalVariable type to Sampling_Id_Type
--	- m_Process_Output_EventDataPort_Instance extends m_Process_Output_Port_Instance: for each port instance
--		such that
--			port is a data port
--		produce
--			(i) refine globalVariable type to Queueing_Id_Type
--	- m_Process_Output_EventPort_Instance extends m_Process_Output_Port_Instance: for each port instance
--		such that
--			port is a event port
--		produce
--			(i) refine globalVariable type to Queueing_Id_Type

-- @extends m_Process_Output_Port_Instance
rule m_Process_Output_EventDataPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isEventDataPort())
	to
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'))
}

-- @extends m_Process_Output_Port_Instance
rule m_Process_Output_DataPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isDataPort())
	to
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'))
}

-- @extends m_Thread_InterProcess_Input_Port_Instance
rule m_Process_Input_EventPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isEventPort())
	to
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'))
}

-- @extends m_Process_Input_Port_Instance
rule m_Process_Input_EventDataPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isEventDataPort())
	to
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'))
}

-- @extends m_Process_Input_Port_Instance
rule m_Process_Input_DataPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isDataPort())
	to
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'))
}

-- @extends m_Thread_InterProcess_Input_Port_Instance
rule m_Process_Output_EventPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isEventPort())
	to
		connectedSubcomponent: AADLBA!ConnectedElement,
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'))
}


-- @extends m_Thread_IntraProcess_Input_Port_Instance,m_Thread_DataOrEventDataPort_Input_Instance,m_Not_PeriodicDelayed_Port
rule m_Thread_IntraProcess_Input_DataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isDataPort())
  	to
  		f: AADLBA!DataAccess
		(dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		localVariable:AADLBA!DataSubcomponent,
		globalVariable:AADLBA!DataSubcomponent
		(
			dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')
		)
}

-- @extends m_Not_PeriodicDelayed_Port,m_Thread_DataOrEventDataPort_Input_Instance,m_Thread_IntraProcess_Input_Port_Instance
rule m_Thread_IntraProcess_Input_EventDataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isEventDataPort()
		and
		fi.isIntraProcessFeatureInstance())
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		localVariable:AADLBA!DataSubcomponent,
		globalVariable:AADLBA!DataSubcomponent
		(
			dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')
		)
}

-- @extends m_Thread_IntraProcess_Input_EventDataPort_Instance
rule m_Thread_IntraProcess_Input_EventDataPort_Instance_Sporadic
{
	from
		fi:AADLI!FeatureInstance
    	(
			fi.getComponentInstance().isSporadicThread()
		)
	to
		queueFieldAccess: AADLBA!DataAccess
		(
			name <- fi.name+'_Type',
			kind <- #provides,
			dataFeatureClassifier <- fi.feature.dataFeatureClassifier
		),
		queueSubcomponent: AADLBA!DataSubcomponent
		(
			name <- fi.name+'_Queue',
			dataSubcomponentType <- fi.feature.dataFeatureClassifier
		),
		
		f_connection: AADLBA!AccessConnection
		(
			source <- sourceCE,
			destination <- destinationCE,
			name <- fi.name+'_accessCnx',
			accessCategory <- #data
		),
		sourceCE: AADLBA!ConnectedElement
		(
			connectionEnd <- queueSubcomponent
		),
		destinationCE: AADLBA!ConnectedElement
		(
			connectionEnd <- queueFieldAccess
		)

}

-- @extends m_Not_PeriodicDelayed_Port,m_Thread_IntraProcess_Input_Port_Instance
rule m_Thread_IntraProcess_Input_EventPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isEventPort()
		and
		fi.isIntraProcessFeatureInstance())
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		localVariable:AADLBA!DataSubcomponent,
		globalVariable:AADLBA!DataSubcomponent
		(
			dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')
		)
}

-- @extends m_Thread_InterProcess_Input_Port_Instance,m_Thread_DataOrEventDataPort_Input_Instance
rule m_Thread_InterProcess_Input_EventDataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isEventDataPort()
		and
		not fi.isIntraProcessFeatureInstance())
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'))
}

-- @extends m_Thread_Input_Port_Instance
rule m_Thread_InterProcess_Input_EventOrEventDataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isEventPort()
		and
		not fi.isIntraProcessFeatureInstance())
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		localVariable:AADLBA!DataSubcomponent
}

-- @extends m_Thread_DataOrEventDataPort_Input_Instance,m_Thread_InterProcess_Input_Port_Instance
rule m_Thread_InterProcess_Input_DataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isDataPort()
		and
		not fi.isIntraProcessFeatureInstance())
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		localVariable:AADLBA!DataSubcomponent
}


--	- m_Thread_Output_IntraProcess_DataPort_Instance extends m_Thread_Output_Port_Instance for each pair of (port instance,connection reference)
--		such that
--			destination of the connection reference is the port of a thread
--			port is a data port
--		produce
--			(i) refine data access f type to Blackoard_Id_Type
--	- m_Thread_Output_InterProcess_EventDataPort_Instance extends m_Thread_Output_Port_Instance
--  		such that
--			destination of the connection reference is the port of a thread
--			port is an event data port
--		produce
--			(i) refine data access f type to Buffer_Id_Type
--  	- m_Thread_Output_IntraProcess_EventPort_Instance extends m_Thread_Output_Port_Instance
--  		such that
--			destination of the connection reference is the port of a thread
--			port is an event port
--		produce
--			(i) refine data access f type to Events_Id_Type
--	- m_Thread_Output_InterProcess_DataPort_Instance extends m_Thread_Output_Port_Instance for each pair of (port instance,connection reference)
--		such that
--			destination of the connection reference is the port of a process
--			port is a data port
--		produce
--			(i) refine data access f type to Sampling_Id_Type
--  	- m_Thread_Output_InterProcess_EventPort_Instance extends m_Thread_Output_Port_Instance
--  		such that
--			destination of the connection reference is the port of a process
--			port is an event port
--		produce
--			(i) refine data access f type to Queueing_Id_Type
--  	- m_Thread_Output_InterProcess_EventDataPort_Instance extends m_Thread_Output_Port_Instance
--  		such that
--			destination of the connection reference is the port of a process
--			port is an event data port
--		produce
--			(i) refine data access f type to Queuing_Id_Type


helper context AADLBA!Connection def: otherFeature(feature: AADLBA!Feature): AADLBA!Feature =
	if(self.source.connectionEnd = feature) then
		self.destination.connectionEnd
	else
		self.source.connectionEnd
	endif
;

-- @extends m_Thread_Output_Port_Instance,m_Not_PeriodicDelayed_Port
rule m_Thread_Output_IntraProcess_EventOrEventDataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
		(
			fi.isEventOrEventDataPort()
			and
			cnxRef.otherFeature(fi.feature).isThreadPort()
		)
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'))
}

-- @extends m_Thread_Output_Port_Instance,m_Not_PeriodicDelayed_Port
rule m_Thread_Output_IntraProcess_DataPort_Instance
{
	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
		(
			fi.isDataPort()
			and
			cnxRef.otherFeature(fi.feature).isThreadPort()
		)
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'))
}

-- @extends m_Thread_Output_Port_Instance,m_Not_PeriodicDelayed_Port
rule m_Thread_InterProcess_EventDataPort_Output_Instance
{
	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
		(
			fi.isEventOrEventDataPort()
			and
			cnxRef.destination.connectionEnd.isProcessPort()
		)
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'))
}

-- @extends m_Thread_Output_Port_Instance,m_Not_PeriodicDelayed_Port
rule m_Thread_InterProcess_DataPort_Output_Instance
{
	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
		(
			fi.isDataPort()
			and
			cnxRef.otherFeature(fi.feature).isProcessPort()
		)
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'))
}



helper def : getTimeOutInitValue(port : AADLBA!Feature) : AADLBA!PropertyExpression =
	if(port.getModalPropertyValue('Timeout').oclIsUndefined())
	then
		thisModule.toStringLiteral('0')
	else
		if(port.getModalPropertyValue('Timeout').ownedValue.value.oclIsUndefined())
		then
			OclUndefined
		else
			thisModule.toStringLiteral(port.getModalPropertyValue('Timeout').ownedValue.value.toString())
		endif
	endif
;

helper context AADLI!FeatureInstance def : retreiveMessageAddress() : AADLBA!DataSubcomponent =
	thisModule.resolveMatchedSingleIfExists(self, 'localVariable')
;

unique lazy rule createResolvedSpg
{
	from
		classifier: AADLI!DataClassifier,
		spg: AADLBA!SubprogramType
	using
	{
		param: AADLBA!Parameter = spg.ownedParameter->any(e|e.name = 'Port_Type');
	}
	to
		spg_ResolvedType: AADLBA!SubprogramType
		(
			name <- spg.name+'_'+thisModule.getProgrammationLanguageIdentifier(classifier.name),
			ownedExtension <- extendedMessageType,
			ownedParameter <- Sequence{actualParam}
		),
		extendedMessageType: AADLBA!TypeExtension
		(
			extended<-spg
		),
		actualParam : AADLBA!Parameter
		(
			refined <- param,
			direction <- param.direction,
			dataFeatureClassifier <- classifier
		)
	do
	{
		spg_ResolvedType;
	}
}



unique lazy rule CreateLengthDataSubcomponent
{
	from
		port : AADLI!FeatureInstance
	using
	{
		typeId: String = port.getLengthInitialValue();
		initValuePE: AADLBA!PropertyExpression = thisModule.CreateStringLiteralPropertyExpression(thisModule.getSizeOfType(typeId));
	}
	to
		lv: AADLBA!ListValue
		(
			ownedListElement <- Sequence{initValuePE}
		),
		dataSubcomponent: AADLBA!DataSubcomponent
		(
			name<-port.feature.name+'_Length',
			dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'),
			ownedPropertyAssociation	<- Sequence {thisModule.CreatePropertyAssociation('Initial_Value','DATA_MODEL',lv)}
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(dataSubcomponent, port);
		dataSubcomponent;
	}
}

unique lazy rule CreatePortTypeDataSubcomponent
{
	from
		port : AADLI!FeatureInstance
	to
		dataSubcomponent: AADLBA!DataSubcomponent
		(
			name<-port.feature.name,
			dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')
--			ownedPropertyAssociation	<- Sequence {thisModule.CreatePropertyAssociation('Initial_Value','DATA_MODEL',lv)}
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(dataSubcomponent, port);
		dataSubcomponent;
	}
}


unique lazy rule CreateValidityDataSubcomponent
{
	from
		port : AADLI!FeatureInstance
	to
		dataSubcomponent: AADLBA!DataSubcomponent
		(
			name<-port.feature.name+'_Validity',
			dataFeatureClassifier <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME')
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(dataSubcomponent, port);
		dataSubcomponent;
	}
}

unique lazy rule CreateTimeOutSubcomponentFromPort
{
	from
		port : AADLI!FeatureInstance
	using
	{
		initValuePE: AADLBA!PropertyExpression = thisModule.getTimeOutInitValue(port.feature);
	}
	to
		dataSubcomponent: AADLBA!DataSubcomponent
		(
			name<-port.feature.name+'_TimeOut',
			dataSubcomponentType <- 'Port_Type'.asDataType('RAVENSCAR_RUNTIME'),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation('Initial_Value','DATA_MODEL',thisModule.CreateListValueFromPropertyExpression(initValuePE))} 
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(dataSubcomponent, port);
		dataSubcomponent;
	}
}

-- not finish
--helper def: getRuntimeReturnType() : AADLBA!DataSubcomponentType = 'Port_Type'.asDataType('RAVENSCAR_RUNTIME
--	');
helper def: getRuntimeReturnType() : AADLBA!DataSubcomponentType = 'Port_Type'.asDataType('RAVENSCAR_RUNTIME');


-------------------------------------------------------------------------------------------
---- End of refactoring
-------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------
----	OVERRIDEN HELPERS
-------------------------------------------------------------------------------------------


helper context AADLI!FeatureInstance def: getLengthInitialValue() : String =
	let ba: AADLBA!BehaviorAnnex = self.getBehaviorAnnex() in
	let p: AADLI!FeatureInstance = self.getDirectlyUsedInFresh() in
	if(not p.oclIsUndefined()) then
		let package_name: String = p.getComponentInstance().subcomponent.classifier.getNamespace().getOwner().name in
		if(p.getComponentInstance().eContainer() = self.getComponentInstance().eContainer()) then
			package_name+thisModule.getPackageSuffix().concat('::'+p.getFreshnessType()+thisModule.impl_suffix).getProgrammationLanguageIdentifier()
		else
			package_name+thisModule.getPackageSuffix().concat('::'+self.getFreshnessType()+thisModule.impl_suffix).getProgrammationLanguageIdentifier()
			
		endif
	else
		self.feature.dataFeatureClassifier.getProgrammationLanguageIdentifier()
	endif
;


------------------------------------
---      ADDED CALLED RULES     ----
------------------------------------

rule addNextValueSubprogramCallAction(actions:AADLBA!BehaviorActions,
								fi: AADLI!FeatureInstance,
								implImg: AADLBA!ComponentImplementation)
{
	do
	{
		for(cnxInst in fi.dstConnectionInstance)
		{
			if(thisModule.toBeTransformedInterProcessConnection(cnxInst))
			{
				if(cnxInst.source.category=#eventPort or cnxInst.source.category=#eventDataPort)
				{
					thisModule.addReceiveQueuingAction(actions, fi, implImg);
				}
				else if(cnxInst.source.category=#dataPort)
				{
					thisModule.addReadSamplingAction(actions, fi, implImg);
				}
			}
			else if(thisModule.toBeTransformedIntraProcessConnection(cnxInst))
			{
				if(cnxInst.source.category=#eventPort)
				{
					thisModule.addWaitEventAction(actions, fi, implImg);
				}
				else if(cnxInst.source.category=#eventDataPort)
				{
					thisModule.addReceiveBufferAction(actions, fi, implImg);
				}
				else if(cnxInst.source.category=#dataPort)
				{
					thisModule.addReadBlackBoardAction(actions, fi, implImg);
				}
			}
		}
	}
}

rule addPutValueSubprogramCallAction(actions:AADLBA!BehaviorActions,
								fi: AADLI!FeatureInstance,
								implImg: AADLBA!ComponentImplementation)
{
	do
	{
		for(cnxInst in fi.srcConnectionInstance)
		{
			if(thisModule.toBeTransformedInterProcessConnection(cnxInst))
			{
				if(cnxInst.source.category=#eventPort or cnxInst.source.category=#eventDataPort)
				{
					thisModule.addSendQueuingAction(actions, fi, implImg);
				}
				else if(cnxInst.source.category=#dataPort)
				{
					thisModule.addWriteSamplingAction(actions, fi, implImg);
				}
			}
			else if(thisModule.toBeTransformedIntraProcessConnection(cnxInst))
			{
				if(cnxInst.source.category=#eventPort)
				{
					thisModule.addSetEventAction(actions, fi, implImg);
				}
				else if(cnxInst.source.category=#eventDataPort)
				{
					thisModule.addSendBufferAction(actions, fi, implImg);
				}
				else if(cnxInst.source.category=#dataPort)
				{
					thisModule.addDisplayBlackBoardAction(actions, fi, implImg);
				}
			}
		}
	}
}
