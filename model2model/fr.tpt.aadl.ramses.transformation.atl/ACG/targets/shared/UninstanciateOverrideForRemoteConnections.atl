--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLI=http:///AADL2/instance
-- @atlcompiler emftvm

module UninstanciateOverrideForRemoteConnections;

create 
	OUT 			: AADLBA
from 
	IN 				: AADLI;


rule m_Subprogram_Type {
	from
		type : AADLI!SubprogramType
}

rule m_Subprogram_Implementation {
	from
		impl : AADLI!SubprogramImplementation
}

rule m_Data_Type {
 from
   type : AADLI!DataType 
}

rule m_Data_Implementation {
  from
 	impl : AADLI!DataImplementation
}

helper context AADLI!ComponentType def: needsCopy() : Boolean =
	not self.oclIsTypeOf(AADLI!ThreadType)
;

helper context AADLI!ComponentImplementation def: needsCopy() : Boolean =
	not self.oclIsTypeOf(AADLI!ThreadImplementation)
;

-- @extends m_Component_Instance
rule m_Thread_Instance {
	from
		c : AADLI!ComponentInstance (c.category = #thread)
	using
 	{
 		impl : AADLI!ThreadImplementation = c.subcomponent.subcomponentType;
 	}
	to 
		sub : AADLBA!ThreadSubcomponent
		(
			threadSubcomponentType <- implImg
		),
		implImg : AADLBA!ThreadImplementation (
 			name <- c.uniqueName().concat('.impl'), -- name thread implmentation
			ownedRealization <- thisModule.Realization(typeImg),
			ownedSubprogramSubcomponent 	<- c.componentInstance->select(e|e.category.getName() = 'subprogram'),
			ownedDataSubcomponent 			<- c.componentInstance->select(e|e.category.getName() = 'data'),
			ownedSubprogramCallSequence     <- impl.ownedSubprogramCallSequence,
			ownedParameterConnection		<- impl.getAllConnections()->select(e| e.oclIsKindOf(AADLI!ParameterConnection) )->collect(e|thisModule.ParameterConnection(e)),
			ownedAccessConnection			<- impl.ownedAccessConnection->collect(e|thisModule.AccessConnection(e))
		),
		typeImg : AADLBA!ThreadType (
 	 		name <- c.uniqueName(),
			ownedEventDataPort <- c.featureInstance->select(e|e.category.getName() = 'eventDataPort'),
			ownedDataPort <- c.featureInstance->select(e|e.category.getName() = 'dataPort'),
			ownedEventPort <- c.featureInstance->select(e|e.category.getName() = 'eventPort'),
			ownedDataAccess <- c.featureInstance->select(e|e.category.getName() = 'dataAccess'),
	 		ownedSubprogramAccess <- c.featureInstance->select(e|e.category.getName() = 'subprogramAccess')
		)
}

helper context AADLI!ConnectionReference def: needsCopy() : Boolean =
	if self.source.isThreadPort()
		or
		self.destination.isThreadPort() 
	then
		true
	else 
		if self.eContainer().isRemoteConnection() then
			false
		else
			true
		endif
	endif
;


-- @extends m_Connection_Reference
rule m_AccessConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (
			cnxRef.eContainer().kind = #accessConnection
			and
			not (cnxRef.connection.accessCategory=#subprogram)
			)
	to
		cnxImg: AADLBA!AccessConnection
		(accessCategory <- cnxRef.connection.accessCategory)
}
