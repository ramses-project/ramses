--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- nsURI AADLBA=http:///AADLBA
-- @atlcompiler emftvm

module DispatchComputedCommonRefinementSteps;
create OUT : AADLBA 	from 		IN : AADLI,
									AADL_RUNTIME: AADLBA,
									DATA_MODEL: AADLBA,
									PROGRAMMING_PROPERTIES: AADLBA,
									HOOKS: ATLHOOKS,

									ARINC653_RUNTIME: AADLBA;


--------------------------------------------------------------------------------
--- TO BE SUPERIMPOSED RULES
--------------------------------------------------------------------------------
unique lazy rule targetSpecificDispatchConfiguration
{
	from
		implImg: AADLBA!ThreadImplementation
}

helper def: initNextPeriodDateValue(implImg: AADLBA!ThreadImplementation): String =
	''
;

--------------------------------------------------------------------------------
--- MODULE RULES
--------------------------------------------------------------------------------
unique lazy rule addNextPeriodDateValue
{
	from
		implImg: AADLBA!ThreadImplementation
	to
		date: AADLBA!DataSubcomponent
		(
			name <- 'next_date_'+thisModule.platformName,
			dataSubcomponentType <- thisModule.getDateDataType,
			ownedPropertyAssociation <- Sequence { 
										thisModule.CreatePropertyAssociation(
			
												 	'Initial_Value',
													'DATA_MODEL',
													TimerInit
												)
			}
												
		),
		TimerInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
						thisModule.initNextPeriodDateValue(implImg)
															)}
		)
	do
	{
		date;
	}
}


unique lazy rule addDispatchProtocolCall
{
	from
		c: AADLI!ComponentInstance
	using
	{
		implImg: AADLBA!ThreadImplementation = thisModule.resolveTemp(c, 'implImg');
		waitPeriodSpg : AADLBA!SubprogramType = thisModule.getWaitPeriodSubprogram;
		date: AADLBA!DataSubcomponent = thisModule.addNextPeriodDateValue(implImg);
	}
	to
		------------------------------------------------------------------------------------
		--- WAIT_NEXT_ACTIVATION_DATE
		------------------------------------------------------------------------------------
		
		call_WAIT_NEXT_ACTIVATION_DATE: AADLBA!SubprogramCall
		(
			name<-'call_WAIT_NEXT_ACTIVATION_DATE',
			calledSubprogram<-waitPeriodSpg
		),
		connectedParam_WAIT_NEXT_ACTIVATION_DATE: AADLBA!ConnectedElement
		(
			connectionEnd<-waitPeriodSpg.ownedParameter->first()
		),
		connectedSubcomponent_WAIT_NEXT_ACTIVATION_DATE: AADLBA!ConnectedElement
		(
			connectionEnd<-date
		),
		paramConnection_WAIT_NEXT_ACTIVATION_DATE: AADLBA!ParameterConnection
		(
			name<-'call_PeriodicWait_to_ReturnCode',
			source<-connectedParam_WAIT_NEXT_ACTIVATION_DATE,
			destination<-connectedSubcomponent_WAIT_NEXT_ACTIVATION_DATE
		)
	do
	{
		connectedParam_WAIT_NEXT_ACTIVATION_DATE.setContext(call_WAIT_NEXT_ACTIVATION_DATE);
		implImg.getOwnedParameterConnections().add(paramConnection_WAIT_NEXT_ACTIVATION_DATE);
		
		thisModule.targetSpecificDispatchConfiguration(implImg);
		
		call_WAIT_NEXT_ACTIVATION_DATE;
	}
}

--unique lazy rule addPeriodicWaitCallAction
--{
--	from
--		actions: AADLBA!BehaviorActions,
--		spgImg: AADLBA!SubprogramImplementation
--	using
--	{
--		RETURN_CODE: AADLBA!DataSubcomponent = thisModule.retreiveReturnCodeValue(spgImg);
--		nextPeriod : AADLBA!SubprogramType = thisModule.getNextPeriodSubprogram;
--		waitPeriod : AADLBA!SubprogramType = thisModule.getWaitPeriodSubprogram;
--	}
--	to
--		call: AADLBA!SubprogramCallAction
--		(
--			subprogram <- callHolder,
--			parameterLabels <- Sequence{RETURN_CODE_HOLDER} 
--		),
--		callHolder: AADLBA!CalledSubprogramHolder
--		(
--			element <- nextPeriod
--		),
--
--		RETURN_CODE_HOLDER: AADLBA!DataSubcomponentHolder
--		(
--			element <- RETURN_CODE
--		)
--	do
--	{
--		actions.add(call);
--	}
--}