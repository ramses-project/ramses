--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLI=http:///AADL2/instance
-- @atlcompiler emftvm

module UninstanciateOverride;

create 
	OUT 			: AADLBA
from 
	IN 				: AADLI;


helper context AADLI!ComponentImplementation def: needsCopy(): Boolean =
	self.type.needsCopy()
;

helper context AADLI!ComponentType def: needsCopy(): Boolean =
	if(self.oclIsKindOf(AADLI!SubprogramType)) then
		self.subprogramNeedsCopy()
	else
		false
	endif
;

helper context AADLI!ComponentType def: subprogramNeedsCopy(): Boolean =
	if(self.oclIsKindOf(AADLI!SubprogramType) and self.ownedPrototype->isEmpty())
	then
	  	not self.ownedEventPort->isEmpty()
	  	or
	 	not self.ownedEventDataPort->isEmpty()
	else
		false
	endif
;

helper context AADLI!FeatureInstance def: getOutputPortId(processInstance: AADLI!ComponentInstance): Integer = 
	processInstance.componentInstance->select(e|e.category=#thread)
	->collect(e|e.featureInstance)->flatten()
	->select(e|e.feature.oclIsKindOf(AADLI!Port) and e.direction=#out)
	->indexOf(self)-1
;


--- Next is used to remove systems hierarchy in ContainmentPathElement
helper def : createContainmentPathElement(neList: Sequence(AADLI!NamedElement)) : AADLBA!ContainmentPathElement =
	thisModule.createContainmentPathElementLazyRule
	(
		neList->select(e|e.oclIsKindOf(AADLI!ComponentInstance) and not (e.category=#system))
	)
;

rule m_RootSystem_Instance {
	from
		c : AADLI!SystemInstance (c.category = #system and c.eContainer().oclIsUndefined())
	using
	{
		src_package : AADLI!AadlPackage = c.componentImplementation.getNamespace().getOwner();
	}
	to
		section : AADLBA!PublicPackageSection (
			ownedClassifier <- AADLBA!Classifier.allInstancesFrom('OUT')
		),
		pkg : AADLBA!AadlPackage (
			name <- src_package.name+thisModule.getPackageSuffix(),
			ownedPublicSection <- section
		),
		implImg : AADLBA!SystemImplementation
		(
			name                              <- if(thisModule.theHOOK.getOutputPackageName().oclIsUndefined()) then
												 c.componentImplementation.name
												 else
												 thisModule.theHOOK.getOutputPackageName()+'.impl'
												 endif,
			ownedRealization 			<- thisModule.Realization(typeImg),
			ownedMemorySubcomponent           <- c.componentInstance->select(e|e.category.getName()='memory')
													--- Next is used to remove systems hierarchy in subcomponents
													->union(
														c.componentInstance->select(e|e.category.getName()='system')
														->collect(e| e.getSystemSubcomponent())
														->flatten()
														->collect(e|e.componentInstance)
														->flatten()
														->select(e|e.category=#memory)
													)
													->asSet()
													->excluding(OclUndefined),
			ownedProcessorSubcomponent        <- c.componentInstance->select(e|e.category.getName()='processor')
													->union(
														c.componentInstance->select(e|e.category.getName()='system')
														->collect(e| e.getSystemSubcomponent())
														->flatten()
														->collect(e|e.componentInstance)
														->flatten()
														->select(e|e.category=#processor)
													)
													->asSet()
													->excluding(OclUndefined),
			ownedDeviceSubcomponent           <- c.componentInstance->select(e|e.category.getName()='device')
													->union(
														c.componentInstance->select(e|e.category.getName()='system')
														->collect(e| e.getSystemSubcomponent())
														->flatten()
														->collect(e|e.componentInstance)
														->flatten()
														->select(e|e.category=#device)
													)
													->asSet()
													->excluding(OclUndefined),
			ownedVirtualProcessorSubcomponent <- c.componentInstance->select(e|e.category.getName()='virtual processor')->excluding(OclUndefined),
			ownedProcessSubcomponent          <- c.componentInstance->select(e|e.category.getName()='process')
													->excluding(OclUndefined),
			ownedSubprogramSubcomponent       <- c.componentInstance->select(e|e.category.getName()='subprogram')->excluding(OclUndefined),
			ownedDataSubcomponent             <- c.componentInstance->select(e|e.category.getName()='data')->excluding(OclUndefined),
			ownedBusSubcomponent              <- c.componentInstance->select(e|e.category.getName()='bus')->excluding(OclUndefined),
			ownedPropertyAssociation          <- c.getPropertyAssociationImg()
												->union(c.getInstanceReferenceValue()->collect (p |  thisModule.resolveMatchedSingleIfExists(p, 'p2')))
												->union(c.collectSelfPropertyAssociationImg())
												->excluding(OclUndefined)
		),
		typeImg: AADLBA!SystemType
		(
			name <- if(thisModule.theHOOK.getOutputPackageName().oclIsUndefined()) then
						 c.componentImplementation.type.name
					else
						 thisModule.theHOOK.getOutputPackageName()
					endif
		)
  do
  {
  	implImg.ownedPropertyAssociation          <- c.getPropertyAssociationImg()
												->union(c.getInstanceReferenceValue()->collect (p |  thisModule.resolveMatchedSingleIfExists(p, 'p2')))
												->union(c.collectSelfPropertyAssociationImg())
												->excluding(OclUndefined);
	ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(implImg, c);
	thisModule.allImportedUnits <- thisModule.allImportedUnits->including(src_package.ownedPublicSection.importedUnit);
  }
}


-------- End of code to remove systems hirarchy

-- @extends m_Component_Instance
rule m_Processor_Instance {
	from
		c : AADLI!ComponentInstance (c.category = #processor)
	to 
		sub : AADLBA!ProcessorSubcomponent
		(
			processorSubcomponentType <- implImg
		),
		typeImg : AADLBA!ProcessorType(
			name <- c.uniqueName(),
			ownedEventDataPort <- c.featureInstance->select(e| e.category.getName()='eventDataPort')->excluding(OclUndefined),
	 		ownedDataPort <- c.featureInstance->select(e| e.category.getName()='dataPort')->excluding(OclUndefined),
			ownedEventPort <- c.featureInstance->select(e| e.category.getName()='eventPort')->excluding(OclUndefined),
			ownedBusAccess <- c.featureInstance->select(e| e.category.getName()='busAccess')->excluding(OclUndefined)
		),
		implImg : AADLBA!ProcessorImplementation (
			name <- c.uniqueName().concat('.impl'),
			ownedRealization 			<- thisModule.Realization(typeImg),
			ownedVirtualProcessorSubcomponent 	<- c.componentInstance->select(e|e.category.getName()='virtual processor')->excluding(OclUndefined),
			ownedBusSubcomponent 				<- c.componentInstance->select(e|e.category.getName()='bus')->excluding(OclUndefined),
			ownedVirtualBusSubcomponent 		<- c.componentInstance->select(e|e.category.getName()='virtual bus')->excluding(OclUndefined)
		)
}

-- @extends m_Component_Instance
rule m_Memory_Instance {
	from
		c : AADLI!ComponentInstance (c.category = #memory)
	to
		sub : AADLBA!MemorySubcomponent
		(
			memorySubcomponentType <- implImg
		),
		implImg : AADLBA!MemoryImplementation (
			name <- c.uniqueName().concat('.impl'),
			ownedRealization 			<- thisModule.Realization(typeImg),
			ownedMemorySubcomponent <- c.componentInstance->select(e|e.category.getName()='memory')->excluding(OclUndefined)
		),
		typeImg : AADLBA!MemoryType
		(
			name <- c.uniqueName()
		)
}

-- @extends m_Component_Instance
rule m_Process_Instance {
	from
		c : AADLI!ComponentInstance (c.category = #process)
	using
	{
 		impl : AADLI!ThreadImplementation = c.subcomponent.subcomponentType;
	}
	to 
		sub : AADLBA!ProcessSubcomponent
		(
			processSubcomponentType <- implImg
		),
		implType : AADLBA!ProcessType(
			name <- c.uniqueName()
		),
		implImg : AADLBA!ProcessImplementation (
 			name 							<- c.uniqueName().concat('.impl'),
			ownedRealization 				<- thisModule.Realization(
											if c.subcomponent.processSubcomponentType.oclIsKindOf(AADLBA!ComponentType)  then c.processSubcomponentType.resolve()
											else c.subcomponent.processSubcomponentType.type.resolve()
											endif),
			ownedThreadGroupSubcomponent 	<- c.componentInstance->select(e|e.category=#threadgroup),
        	ownedThreadSubcomponent         <- c.componentInstance->select(e|e.category=#thread),
			ownedSubprogramSubcomponent 	<- c.componentInstance->select(e|e.category=#subprogram),
			ownedDataSubcomponent 			<- c.componentInstance->select(e|e.category=#data)
												->union	(
													c.componentInstance->select(e|e.category=#thread)
													->collect( e|
														thisModule.resolveMatchedTupleIfExists(Sequence{e,e.subcomponent.subcomponentType.getBA()},'currentState')
													)
												)
												-- intraprocess input thread port
												-- process output port
												-- process input port
												->union(c.componentInstance->select(e|e.category.getName()='thread')
													->collect(c|
														c.collectGlobalVariableImg()
													)
												)
												->union(c.componentInstance->select(e|e.category.getName()='thread')
													->collect(c| c.featureInstance
														->select(e| e.isThreadPort() and e.isInputFeature() and e.isIntraProcessFeatureInstance())
														->collect(fi |
																fi.collectPortGlobalVariableImg()
															)
														)
													)->union
													(
														c.componentInstance->select(e|e.category.getName()='thread')
															->collect(c| c.eContainer().featureInstance
																->select(e| e.isProcessPort())
																->collect(fi |
																	fi.collectPortGlobalVariableImg()
																)
															)
													)->union
													(
														c.componentInstance->select(e|e.category.getName()='thread')
                                                        ->collect(c|
                                                                thisModule.collectPeriodicDelayed_GlobalVariables(c)
                                                       )
													)
													->union
													(
														c.componentInstance->select(e|e.category.getName()='thread')
                                                        ->collect(c|
															if(c.isSporadicThread()) then
																thisModule.collectSporadicGlobalVariables(c)
															else
																Sequence{}
															endif
														)
													)
													->union
													(
														c.componentInstance->select(e|e.category.getName()='thread')
                                                        ->collect(c|
															if(c.isTimedThread()) then
																thisModule.collectTimedGlobalVariables(c)
															else
																Sequence{}
															endif
														)
													)
													->flatten()->excluding(OclUndefined),
		ownedAccessConnection			<- c.connectionInstance->select(e| e.kind.getName()='accessConnection')
												->collect(e | e.connectionReference.getConnectionsReferencesImg())->flatten()
												->union(c.componentInstance->select(e|e.category.getName()='thread')
													->collect(c| c.featureInstance
														->select (fi | fi.isOutputFeature())
														->collect(fi |
															fi.srcConnectionInstance
															->collect(cnxInst |
																thisModule.resolveMatchedTupleIfExists(Sequence{fi,cnxInst.connectionReference->first().connection}, 'accessConnection')
															)->asSet()	
														)
													)
												)->flatten()
												->union(c.componentInstance->select(e|e.category.getName()='thread')
													->collect(c| c.featureInstance
														->select (fi | fi.isOutputFeature())
														->collect(fi |
															fi.srcConnectionInstance
															->collect(cnxInst |
																thisModule.resolveMatchedTupleIfExists(Sequence{fi,cnxInst.connectionReference->first().connection}, 'barrierThreadAccessConnection')
															)->asSet()	
														)
													)
												)->flatten()
												->union(c.componentInstance->select(e|e.category.getName()='thread')
													->collect(c| c.featureInstance
														->select (fi | fi.isInputFeature())
														->collect(fi |
															if(fi.getProcess().modeInstance->exists(mi| fi.connectedInMode(mi.mode))) then
																fi.getProcess().modeInstance->collect(mi | thisModule.resolveMatchedTupleIfExists(Sequence{fi, mi.mode}, 'accessConnection'))
															else
																thisModule.resolveMatchedSingleIfExists(fi, 'accessConnection')
															endif
														)->flatten()
													)
												)
                                                ->union(
                                                       c.componentInstance->select(e|e.category.getName()='thread')
                                                           ->collect(c|
                                                                thisModule.collectPeriodicDelayed_GlobalVariablesConnections(c)
                                                       )
                                               )
											   ->union
												(
													c.componentInstance->select(e|e.category.getName()='thread')
                                                           ->collect(c|
														if(c.isSporadicThread()) then
															thisModule.collectSporadicGlobalVariablesAccessConnections(c)
														else
															Sequence{}
														endif
													)
												)
												->union
												(
													c.componentInstance->select(e|e.category.getName()='thread')
                                                           ->collect(c|
														if(c.isTimedThread()) then
															thisModule.collectTimedGlobalVariablesAccessConnections(c)
														else
															Sequence{}
														endif
													)
												)
												->union	(
													c.componentInstance->select(e|e.category.getName()='thread')
													->collect( e|
														thisModule.resolveMatchedTupleIfExists(Sequence{e,e.subcomponent.subcomponentType.getBA()},'accessConnection_CURRENT_STATE_THREAD')
													)
												)
                                               ->flatten()->excluding(OclUndefined),
		ownedMode <- c.modeInstance
	)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(implImg, impl);
	}
}


-- @extends m_Connection_Reference
rule m_AccessConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (
			cnxRef.eContainer().kind = #accessConnection
			and
			not (cnxRef.connection.accessCategory=#subprogram)
			)
	to
		cnxImg: AADLBA!AccessConnection
		(accessCategory <- cnxRef.connection.accessCategory)
}

--rule m_PropertyAssociationAppliesToSelf { 
--    from 
--    	p : AADLI!PropertyAssociation in IN
--		(p.collectInstanceReferenceValue()->isEmpty()
--		 and
--		 not p.property.name.equalsIgnoreCase('Compute_Entrypoint_Call_Sequence')
--		)
--    to
--    	p2 : AADLBA!PropertyAssociation (
--    		property <- thisModule.getProperty(p.property.getAbsoluteName()),  
--    		appliesTo <- p.appliesTo,
--    		inBinding <- p.inBinding,
--    		append <- p.append,
--    		constant <- p.constant,
--			ownedValue <- p.ownedValue
--    	)
--}
--
--rule m_SubprogramCallSequence
--{
--	from
--		seq : AADLI!SubprogramCallSequence
--}
--
--rule m_SubprogramCall
--{
--	from
--		sc: AADLI!SubprogramCall
--}

rule m_SubprogramAccessConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (cnxRef.eContainer().kind = #accessConnection and cnxRef.connection.accessCategory=#subprogram)
}

rule m_ParameterConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (cnxRef.eContainer().kind = #parameterConnection)
}

rule m_FeatureGroupConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (cnxRef.eContainer().kind = #featureGroupConnection)
}

unique lazy rule collectComputeEntryPoint_rule
{
	from
		c: AADLI!ComponentInstance
	to
		pa: AADLBA!PropertyAssociation
		(
			property <- thisModule.getProperty('Compute_Entrypoint_Call_Sequence'),  
    		ownedValue <- Sequence{mpv}
		),
		mpv: AADLBA!ModalPropertyValue
		(
			ownedValue<-v
		),
		v: AADLBA!ReferenceValue
		(
			path <- cpe
		),
		cpe: AADLBA!ContainmentPathElement
		(
			namedElement <- thisModule.resolveMatchedSingleIfExists(c, 'callSequenceImg')
		)
	do
	{
		pa;
	}
}

helper def : collectInitializationEntryPoint(c: AADLI!ComponentInstance) : AADLBA!PropertyAssociation =
	OclUndefined
;

helper def : collectThreadVariables(c: AADLI!ComponentInstance): AADLBA!DataSubcomponent =
	if(c.isSporadicThread()) then
		thisModule.collectSporadicThreadVariables(c)
	else
		Sequence{}
	endif
	->union(
		thisModule.collectPeriodicDelayed_ThreadVariables(c)
	)
;

unique lazy rule createAccessConnectionFromBA
{
	from
		fi: AADLI!FeatureInstance,
		ba: AADLBA!BehaviorAnnex
	using
	{
		annexSubclause: AADLBA!AnnexSubclause = fi.getComponentInstance().subcomponent.classifier.ownedAnnexSubclause->any(e|e.name = 'behavior_specification');
	}
	to
		accessCnx: AADLBA!AccessConnection
		(
			name <- fi.name+'_BA_cnx_'+fi.eContainer().subcomponent.subcomponentType.ownedAnnexSubclause->indexOf(annexSubclause).toString(),
			source <- accessCnx_Source,
			destination <- accessCnx_Destination,
			accessCategory <- #data
		),
		accessCnx_Source: AADLBA!ConnectedElement
		(
			connectionEnd <- fi.retreiveEntrypointFeature()
		),
		accessCnx_Destination: AADLBA!ConnectedElement
		(
			connectionEnd <- fi.getFeatureImg()
		)
	do
	{
		accessCnx_Source.setContext(thisModule.resolveMatchedSingleIfExists(fi.eContainer(), 'callEntryPoint'));
		accessCnx;
	}
}

unique lazy rule createFreshnessIndicator
{
	from
		fi: AADLI!FeatureInstance
	to
		freshnessIndicator: AADLBA!DataSubcomponent
		(
			name <- fi.name+'_persistentFreshnessIndicator',
			dataSubcomponentType<-'Integer_16'.asClassifier('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence{
				thisModule.CreatePropertyAssociation('Initial_Value','DATA_MODEL', freshnessIndicator_Init)
			}
		),
		freshnessIndicator_Init: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression('0')}
		),
		freshnessIndicator_Connection: AADLBA!AccessConnection
		(
			name <- fi.name+'_to_persistentFreshnessIndicator',
			accessCategory <- #data,
			source <- freshnessIndicator_CnxSource,
			destination <- freshnessIndicator_CnxDestination
		),
		freshnessIndicator_CnxSource: AADLBA!ConnectedElement
		(
			connectionEnd <- freshnessIndicator
		),
		freshnessIndicator_CnxDestination: AADLBA!ConnectedElement
		(
			connectionEnd <- thisModule.createFreshnessIndicatorAccess(fi)
		)
	do
	{
		thisModule.addImportedUnit(thisModule.public(), 'BASE_TYPES', 'Base_Types');
		freshnessIndicator;
	}
}

unique lazy rule createFreshnessIndicatorAccess
{
	from
		fi:AADLI!FeatureInstance
	to
		freshnessIndicator_Access: AADLBA!DataAccess
		(
			name<-fi.name+'_freshnessIndicator_access',
			dataFeatureClassifier<-'Integer_16'.asClassifier('BASE_TYPES'),
			kind <- #requires
		)
	do
	{
		freshnessIndicator_Access;
	}
}

unique lazy rule createPortCountSubcomponent
{
	from
		fi:AADLI!FeatureInstance
	to
		countVariable:AADLBA!DataSubcomponent
		(
			name<-fi.name+'_countValue',
			dataSubcomponentType<-'Integer_16'.asClassifier('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation('Initial_Value','DATA_MODEL', count_Init)}
		),
		count_Init: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression('0')}
		)
	do
	{
		countVariable;
	}
}

helper context AADLI!FeatureInstance def: collectPortGlobalVariableImg() : Sequence(AADLBA!DataSubcomponent) =
	Sequence{thisModule.resolveMatchedSingleIfExists(self, 'globalVariable')}
;

helper context AADLI!ComponentInstance def: collectGlobalVariableImg()  : Sequence(AADLBA!DataSubcomponent) =
	Sequence{}
;

helper context AADLI!ComponentInstance def: retrieveErrorHandler(): Sequence(AADLBA!SubprogramSubcomponent) =
	Sequence{}
;
