--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLI=http:///AADL2/instance
-- @atlcompiler emftvm

module UninstanciateOverride;

create 
	OUT 			: AADLBA
from 
	IN 				: AADLI;


helper context AADLI!InstanceObject def : collectSelfPropertyAssociationImg() : Sequence(AADLBA!PropertyAssociation) =
	self.ownedPropertyAssociation->select(e | not e.property.name.equalsIgnoreCase('Compute_Entrypoint_Call_Sequence')
									)->collectSelfPropertyAssociationImg()
	->union(
		if self.oclIsTypeOf(AADLI!ComponentInstance) and self.category=#thread then
			Sequence{ thisModule.collectComputeEntryPoint_rule(self),
					  thisModule.collectInitializationEntryPoint(self)}->excluding(OclUndefined)
		else
			Sequence{}
		endif
	)
;

abstract rule m_Component_Implementation {
 from
    impl : AADLI!ComponentImplementation
 to
 	implImg : AADLBA!ComponentImplementation (
 		name             			<- impl.name,
		ownedComment     			<- impl.ownedComment,
		ownedAccessConnection  		<- impl.getConnectionsInstancesImg('accessConnection'),
		ownedParameterConnection 	<- impl.getConnectionsInstancesImg('parameterConnection'),
		ownedRealization 			<- thisModule.Realization(impl.type.resolve())
 	)
}


rule m_Subprogram_Type {
	from
		type : AADLI!SubprogramType
}

rule m_Data_Type {
 from
   type : AADLI!DataType 
}

rule m_Thread_Type {
 from
   type : AADLI!ThreadType 
}

-- @extends m_Component_Type
rule m_Process_Type {
 from
 	type : AADLI!ProcessType
 to 
 	typeImg : AADLBA!ProcessType
}

rule m_Data_Implementation {
  from
 	impl : AADLI!DataImplementation
}

-- @extends m_Feature_Instance
rule m_DataPort_Instance
{
	from
		fi: AADLI!FeatureInstance 
		(
			fi.category=#dataPort
			and
			not (fi.eContainer().category=#thread)
			and
			not (fi.eContainer().category=#process)
		)
	to
		f: AADLBA!DataPort
		(
			direction <- fi.feature.direction,
			dataFeatureClassifier <- fi.feature.dataFeatureClassifier
		)
}

-- @extends m_Feature_Instance
rule m_EventPort_Instance
{
	from
		fi: AADLI!FeatureInstance 
		(
			fi.category=#eventPort
			and
			not (fi.eContainer().category=#thread)
			and
			not (fi.eContainer().category=#process)
		)
	to
		f: AADLBA!EventPort
		(
			direction <- fi.feature.direction
		)
}

-- @extends m_Feature_Instance
rule m_EventDataPort_Instance
{
	from
		fi: AADLI!FeatureInstance 
		(
			fi.category=#eventDataPort
			and
			not (fi.eContainer().category=#thread)
			and
			not (fi.eContainer().category=#process)
		)
	to
		f: AADLBA!EventDataPort
		(
			direction <- fi.feature.direction,
			dataFeatureClassifier <- fi.feature.dataFeatureClassifier
		)
}


rule m_Subprogram_Implementation {
  from
 	impl : AADLI!SubprogramImplementation
}

rule m_Thread_Implementation {
  from
 	impl : AADLI!ThreadImplementation
}

rule m_PortConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (cnxRef.eContainer().kind = #portConnection)
}

-- @extends m_Connection_Reference
rule m_AccessConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (
			cnxRef.eContainer().kind = #accessConnection
			and
			not (cnxRef.connection.accessCategory=#subprogram)
			)
	to
		cnxImg: AADLBA!AccessConnection
		(accessCategory <- cnxRef.connection.accessCategory)
}

rule m_SubprogramAccessConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (cnxRef.eContainer().kind = #accessConnection and cnxRef.connection.accessCategory=#subprogram)
}

rule m_ParameterConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (cnxRef.eContainer().kind = #parameterConnection)
}

rule m_FeatureGroupConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (cnxRef.eContainer().kind = #featureGroupConnection)
}

unique lazy rule collectComputeEntryPoint_rule
{
	from
		c: AADLI!ComponentInstance
	to
		pa: AADLBA!PropertyAssociation
		(
			property <- thisModule.getProperty('Compute_Entrypoint_Call_Sequence'),  
    		ownedValue <- Sequence{mpv}
		),
		mpv: AADLBA!ModalPropertyValue
		(
			ownedValue<-v
		),
		v: AADLBA!ReferenceValue
		(
			containmentPathElement <- Sequence{cpe}
		),
		cpe: AADLBA!ContainmentPathElement
		(
			namedElement <- thisModule.resolveMatchedSingleIfExists(c, 'callSequenceImg')
		)
	do
	{
		pa;
	}
}

helper def : collectInitializationEntryPoint(c: AADLI!ComponentInstance) : AADLBA!PropertyAssociation =
	OclUndefined
;

helper def : collectThreadVariables(c: AADLI!ComponentInstance): AADLBA!DataSubcomponent =
	if(c.isSporadicThread()) then
		thisModule.collectSporadicThreadVariables(c)
	else
		Sequence{}
	endif
	->union(
		thisModule.collectPeriodicDelayed_ThreadVariables(c)
	)
;

-- @extends m_Component_Instance
rule m_create_Thread_BA
{
	from
		c : AADLI!ComponentInstance (c.category = #thread)
	using
 	{
 		impl : AADLI!ThreadImplementation = c.subcomponent.subcomponentType;
 	}
	to
		sub : AADLBA!ThreadSubcomponent(
			threadSubcomponentType <- implImg
		),
		implImg : AADLBA!ThreadImplementation (
 			name <- c.uniqueName().concat('.impl'), -- name thread implmentation
			ownedRealization <- thisModule.Realization(typeImg),
			ownedSubprogramSubcomponent 	<- c.componentInstance->select(e|e.category=#subprogram),
			ownedDataSubcomponent 			<- c.componentInstance->select(e|e.category=#data)
												->append
												(
													thisModule.resolveMatchedTupleIfExists(Sequence{c,impl.getBA()},'currentState')
												)
												->union
												(
													c.featureInstance->select(fi| fi.feature.oclIsKindOf(AADLI!Port) and fi.isUsedInFresh())
													->collect(e|thisModule.createFreshnessIndicator(e))
												)
												->union
												(
													thisModule.collectThreadVariables(c)
												)
												->flatten()->excluding(OclUndefined),
			ownedSubprogramCallSequence     <- Sequence{
 															thisModule.resolveMatchedSingleIfExists(c, 'callSequenceImg'),
 															thisModule.collectInitCallSequence(c)
														}
 												->excluding(OclUndefined),
			ownedParameterConnection		<- impl.ownedParameterConnection->select (e|
												e.source.oclIsKindOf(AADLI!Parameter) and e.destination.oclIsKindOf(AADLI!Parameter))
												->collect(e| thisModule.ParameterConnection(e))
												->union
												(
													impl.ownedParameterConnection->select (e|
														e.source.connectionEnd.oclIsKindOf(AADLI!DataSubcomponent) 
													)
													->collect(e|
														impl.ownedSubprogramCallSequence
														->collect(callSequence|
															thisModule.resolveMatchedTupleIfExists(Sequence{c.subcomponent->any(e|e.subcomponent = e.source.connectionEnd), callSequence, e}, 'parameterConnection')
														)
													)
												)
												->union
												(
													impl.ownedParameterConnection->select (e|
														e.destination.connectionEnd.oclIsKindOf(AADLI!DataSubcomponent) 
													)
													->collect(e|
														impl.ownedSubprogramCallSequence
														->collect(callSequence|
															thisModule.resolveMatchedTupleIfExists(Sequence{c.componentInstance->any(f|f.subcomponent = e.destination.connectionEnd), callSequence, e}, 'parameterConnection')
														)
													)
												)
												->flatten()->excluding(OclUndefined),
			ownedAccessConnection			<- c.featureInstance->select(fi|fi.feature.oclIsKindOf(AADLI!Port))
												->collect(fi| impl.ownedSubprogramCallSequence
													->collect(callSequence|
														if(fi.isInputFeature()) then
															thisModule.resolveMatchedTupleIfExists(Sequence{fi,callSequence}, 'f_connection')
														else
															fi.srcConnectionInstance->collect( cnxInst |
																thisModule.resolveMatchedTupleIfExists(Sequence{fi,callSequence,cnxInst.connectionReference->first().connection}, 'f_connection')
															)
														endif
													)
												)
												->flatten()
												->union(
													c.featureInstance->select(fi|fi.feature.oclIsKindOf(AADLI!Port))
													->collect(fi|
															if(fi.isInputFeature()) then
																thisModule.resolveMatchedTupleIfExists(Sequence{fi,impl.getBA()}, 'f_connection')
															else
																fi.srcConnectionInstance->collect( cnxInst |
																	thisModule.resolveMatchedTupleIfExists(Sequence{fi,impl.getBA(),cnxInst.connectionReference->first().connection}, 'f_connection')
																)
															endif
														)
												)
												->flatten()
												->union(impl.ownedSubprogramCallSequence
													->collect(callSequence | c.subcomponent.classifier.ownedAccessConnection
														-> select(accessCnx| 
															accessCnx.isAccessToParamConnection()
															and
															accessCnx.isPartOfCallSequence(callSequence)
															and
															callSequence.isComputeEntryPointOf(c)
														)
														->collect(
															accessCnx | thisModule.resolveMatchedTupleIfExists(Sequence{c, callSequence, accessCnx}, 'accessConnection')
														)
													)
												)->flatten()
												->union
												(
													c.featureInstance->select(e | e.feature.oclIsKindOf(AADLBA!DataAccess))
													->collect
													(
														fi | thisModule.createAccessConnectionFromBA(fi, impl.getBA())
													)
												)
												->append
												(
													thisModule.resolveMatchedTupleIfExists(Sequence{c,impl.getBA()},'accessConnection_CURRENT_STATE')
												)
												->union
												(
													c.featureInstance->select(fi| fi.feature.oclIsKindOf(AADLI!Port) and fi.isUsedInFresh())
													->collect(e|thisModule.resolveLazySingleIfExists(e, 'createFreshnessIndicator','freshnessIndicator_Connection'))	
												)
												->union(
													impl.ownedSubprogramCallSequence->collect(callSequence |
														thisModule.collectPeriodicDelayed_LocalVariablesConnections(c,callSequence)
													)
												)
												->union(
													if(c.isSporadicThread()) then
														thisModule.collectSporadicThreadVariablesAccessConnections(c)
													else
														Sequence{}
													endif
												)
												->flatten()->excluding(OclUndefined)
		),
		typeImg : AADLBA!ThreadType (
 	 		name <- c.uniqueName(),
			ownedDataAccess <- c.featureInstance->select(e| e.feature.oclIsTypeOf(AADLI!DataAccess))->
								collect
								(
										f|f.getFeatureImg()
								)
								->union
								(
													c.featureInstance->select(e| (e.isThreadPort() and e.isInputFeature()))->
													collect
													(
														f|f.getFeatureImg()
													)
								)
													->union(
														c.featureInstance->select(e|e.isThreadPort() and e.isOutputFeature())
														->collect(
	 														f| f.srcConnectionInstance->collect(cnxInst |
																thisModule.resolveMatchedTupleIfExists(Sequence{f,cnxInst.connectionReference->first().connection}, 'f')
															)
														)
													)->union(
														thisModule.collectPeriodicDelayed_GlobalVariablesAccesses(c)
													)
													->union(
														if(c.isSporadicThread()) then
															thisModule.collectSporadicGlobalVariablesAccesses(c)
														else
															Sequence{}
														endif
													)
													->union
													(
														c.featureInstance->select(e|e.feature.oclIsKindOf(AADLBA!DataAccess))
													)
													->flatten()->asSet()->excluding(OclUndefined)
 		)
}

unique lazy rule createAccessConnectionFromBA
{
	from
		fi: AADLI!FeatureInstance,
		ba: AADLBA!BehaviorAnnex
	using
	{
		annexSubclause: AADLBA!AnnexSubclause = fi.getComponentInstance().subcomponent.classifier.ownedAnnexSubclause->any(e|e.name = 'behavior_specification');
	}
	to
		accessCnx: AADLBA!AccessConnection
		(
			name <- fi.name+'_BA_cnx_'+fi.eContainer().subcomponent.subcomponentType.ownedAnnexSubclause->indexOf(annexSubclause).toString(),
			source <- accessCnx_Source,
			destination <- accessCnx_Destination,
			accessCategory <- #data
		),
		accessCnx_Source: AADLBA!ConnectedElement
		(
			connectionEnd <- thisModule.resolveMatchedSingleIfExists(fi, 'f_entrypoint')
		),
		accessCnx_Destination: AADLBA!ConnectedElement
		(
			connectionEnd <- fi.getFeatureImg()
		)
	do
	{
		accessCnx_Source.setContext(thisModule.resolveMatchedSingleIfExists(fi.eContainer(), 'callEntryPoint'));
		accessCnx;
	}
}

unique lazy rule createFreshnessIndicator
{
	from
		fi: AADLI!FeatureInstance
	to
		freshnessIndicator: AADLBA!DataSubcomponent
		(
			name <- fi.name+'_persistentFreshnessIndicator',
			dataSubcomponentType<-'Integer_16'.asClassifier('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence{
				thisModule.CreatePropertyAssociation('Initial_Value','DATA_MODEL', freshnessIndicator_Init)
			}
		),
		freshnessIndicator_Init: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression('0')}
		),
		freshnessIndicator_Connection: AADLBA!AccessConnection
		(
			name <- fi.name+'_to_persistentFreshnessIndicator',
			accessCategory <- #data,
			source <- freshnessIndicator_CnxSource,
			destination <- freshnessIndicator_CnxDestination
		),
		freshnessIndicator_CnxSource: AADLBA!ConnectedElement
		(
			connectionEnd <- freshnessIndicator
		),
		freshnessIndicator_CnxDestination: AADLBA!ConnectedElement
		(
			connectionEnd <- thisModule.createFreshnessIndicatorAccess(fi)
		)
	do
	{
		thisModule.addImportedUnit(thisModule.public(), 'BASE_TYPES', 'Base_Types');
		freshnessIndicator;
	}
}

unique lazy rule createFreshnessIndicatorAccess
{
	from
		fi:AADLI!FeatureInstance
	to
		freshnessIndicator_Access: AADLBA!DataAccess
		(
			name<-fi.name+'_freshnessIndicator_access',
			dataFeatureClassifier<-'Integer_16'.asClassifier('BASE_TYPES'),
			kind <- #requires
		)
	do
	{
		freshnessIndicator_Access;
	}
}


-- @extends m_create_Thread_BA
rule m_Thread_Instance {
	from
		c : AADLI!ComponentInstance (
			c.category = #thread 
			and c.subcomponent.subcomponentType.oclIsKindOf(AADLI!ComponentImplementation)
		)
	using
 	{
 		impl : AADLI!ThreadImplementation = c.subcomponent.subcomponentType;
 	}
	to
		sub : AADLBA!ThreadSubcomponent,
		implImg : AADLBA!ThreadImplementation,
		typeImg : AADLBA!ThreadType
		
}

helper context AADLI!FeatureInstance def: collectPortGlobalVariableImg() : Sequence(AADLBA!DataSubcomponent) =
	Sequence{thisModule.resolveMatchedSingleIfExists(self, 'globalVariable')}
;

helper context AADLI!ComponentInstance def: collectGlobalVariableImg()  : Sequence(AADLBA!DataSubcomponent) =
	Sequence{}
;

helper context AADLI!ComponentInstance def: retrieveErrorHandler(): Sequence(AADLBA!SubprogramSubcomponent) =
	Sequence{}
;

-- @extends m_Component_Instance
rule m_Process_Instance {
	from
		c : AADLI!ComponentInstance (c.category = #process)
	using
	{
 		impl : AADLI!ThreadImplementation = c.subcomponent.subcomponentType;
	}
	to 
		sub : AADLBA!ProcessSubcomponent
		(
			processSubcomponentType <- implImg
		),
		implImg : AADLBA!ProcessImplementation (
 			name 							<- if c.subcomponent.processSubcomponentType.oclIsKindOf(AADLBA!ComponentType)  then c.processSubcomponentType.name+'.impl'
											else c.subcomponent.processSubcomponentType.name
											endif,
			ownedRealization 				<- thisModule.Realization(
											if c.subcomponent.processSubcomponentType.oclIsKindOf(AADLBA!ComponentType)  then c.processSubcomponentType.resolve()
											else c.subcomponent.processSubcomponentType.type.resolve()
											endif),
			ownedThreadGroupSubcomponent 	<- c.componentInstance->select(e|e.category=#threadgroup),
        	ownedThreadSubcomponent         <- c.componentInstance->select(e|e.category=#thread),
			ownedSubprogramSubcomponent 	<- c.componentInstance->select(e|e.category=#subprogram),
			ownedDataSubcomponent 			<- c.componentInstance->select(e|e.category=#data)
												-- intraprocess input thread port
												-- process output port
												-- process input port
												->union(impl.getSubcomponentsInstances('thread')
													->collect(c|
														c.collectGlobalVariableImg()
													)
												)
												->union(impl.getSubcomponentsInstances('thread')
													->collect(c| c.featureInstance
														->select(e| e.isThreadPort() and e.isInputFeature() and e.isIntraProcessFeatureInstance())
														->collect(fi |
																fi.collectPortGlobalVariableImg()
															)
														)
													)->union
													(
														impl.getSubcomponentsInstances('thread')
															->collect(c| c.eContainer().featureInstance
																->select(e| e.isProcessPort())
																->collect(fi |
																	fi.collectPortGlobalVariableImg()
																)
															)
													)->union
													(
														impl.getSubcomponentsInstances('thread')
                                                        ->collect(c|
                                                                thisModule.collectPeriodicDelayed_GlobalVariables(c)
                                                       )
													)
													->union
													(
														impl.getSubcomponentsInstances('thread')
                                                        ->collect(c|
															if(c.isSporadicThread()) then
																thisModule.collectSporadicGlobalVariables(c)
															else
																Sequence{}
															endif
														)
													)
													->flatten()->excluding(OclUndefined),
		ownedAccessConnection			<- impl.getConnectionsInstancesImg('accessConnection')
												->union(impl.getSubcomponentsInstances('thread')
													->collect(c| c.featureInstance
														->select (fi | fi.isOutputFeature())
														->collect(fi |
															fi.srcConnectionInstance
															->collect(cnxInst |
																thisModule.resolveMatchedTupleIfExists(Sequence{fi,cnxInst.connectionReference->first().connection}, 'accessConnection')
															)->asSet()	
														)
													)
												)->flatten()
												->union(impl.getSubcomponentsInstances('thread')
													->collect(c| c.featureInstance
														->select (fi | fi.isInputFeature())
														->collect(fi |
															thisModule.resolveMatchedSingleIfExists(fi, 'accessConnection')	
														)
													)
												)
                                                ->union(
                                                       impl.getSubcomponentsInstances('thread')
                                                           ->collect(c|
                                                                thisModule.collectPeriodicDelayed_GlobalVariablesConnections(c)
                                                       )
                                               )
											   ->union
												(
													impl.getSubcomponentsInstances('thread')
                                                           ->collect(c|
														if(c.isSporadicThread()) then
															thisModule.collectSporadicGlobalVariablesAccessConnections(c)
														else
															Sequence{}
														endif
													)
												)
                                               ->flatten()->excluding(OclUndefined)
											
	)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(implImg, impl);
	}
}

rule m_Process_Implementation {
 from
 	impl : AADLI!ProcessImplementation
 to 
 	
}

helper def : getProcessorSchedulingProtocol() : String = 'Posix_1003_Highest_Priority_First_Protocol';

helper def : getVirtualProcessorSchedulingProtocol() : String = 'Posix_1003_Highest_Priority_First_Protocol';

rule m_Processor_Instance {
	from
		c : AADLI!ComponentInstance (c.category = #processor)
	to
		sub : AADLBA!ProcessorSubcomponent
		(
			name <- c.name.debug('subcomponent created'),
			processorSubcomponentType <- c.subcomponent.subcomponentType,
			ownedPropertyAssociation  <- c.ownedPropertyAssociation->select(e | not (e.property.name.toLower() = 'scheduling_protocol'))
												->collectSelfPropertyAssociationImg()
												-> append(thisModule.CreatePropertyAssociation ('Scheduling_Protocol', 'DEPLOYMENT_PROPERTIES', listValue))
												
		),
		listValue : AADLBA!ListValue
		(
			ownedListElement <- Sequence{sched}
		),
		sched : AADLBA!NamedValue
		(
			namedValue <- el
		),
		el : AADLBA!EnumerationLiteral
		(
			name <- thisModule.getProcessorSchedulingProtocol()
		)
		
		
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(sub, c);
	}
}

rule m_VirtualProcessor_Instance {
	from
		c : AADLI!ComponentInstance (c.category.getName() = 'virtual processor')
	to
		sub : AADLBA!VirtualProcessorSubcomponent
		(
			name <- c.name.debug('subcomponent created'),
			virtualProcessorSubcomponentType <- c.subcomponent.subcomponentType,
			ownedPropertyAssociation  <- c.ownedPropertyAssociation->select(e | not (e.property.name.toLower() = 'scheduling_protocol'))
												->collectSelfPropertyAssociationImg()
												-> append(thisModule.CreatePropertyAssociation ('Scheduling_Protocol', 'DEPLOYMENT_PROPERTIES', listValue))
												
		),
		listValue : AADLBA!ListValue
		(
			ownedListElement <- Sequence{sched}
		),
		sched : AADLBA!NamedValue
		(
			namedValue <- el
		),
		el : AADLBA!EnumerationLiteral
		(
			name <- thisModule.getVirtualProcessorSchedulingProtocol()
		)
		
		
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(sub, c);
	}
}