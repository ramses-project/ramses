--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- nsURI AADLBA=http:///AADLBA
-- @atlcompiler emftvm

module ExpandThreadsPorts;
create OUT : AADLBA								-- Detailed model : org.osate.aadl2/model/addl2.ecore
from 		IN : AADLI,							-- Simplified model : org.osate.aadl2/model/instance.ecore
			AADL_RUNTIME: AADLBA,
			DATA_MODEL: AADLBA,
			PROGRAMMING_PROPERTIES: AADLBA,
			HOOKS: ATLHOOKS,						
			OSEK_RUNTIME: AADLBA;

abstract rule m_Not_PeriodicDelayed_Port
{
	from
		fi: AADLI!FeatureInstance
		(not fi.isPeriodicDelayedPort())
}



helper def : getRuntimeSizeType: AADLBA!DataType = 
	'Integer_16'.asDataType('BASE_TYPES')
;


helper def: collectCommunicationsLocalVariables(c: AADLI!ComponentInstance, callSequences: Sequence(AADLI!SubprogramCallSequence)): Sequence(AADLBA!DataSubcomponent)=
	callSequences->collect(e | thisModule.resolveMatchedSingleIfExists(c, 'returnData'))
	->union
	(c.featureInstance->select(e|e.feature.oclIsKindOf(AADLI!Port) and not e.isPeriodicDelayedPort())
		->collect(fi|
			Sequence
			{
				fi.retreiveMessageAddress(),
				thisModule.resolveLazySingleIfExists(fi, 'CreateLengthDataSubcomponent', 'dataSubcomponent')
			}
		)
	)
	->union
	(
		c.featureInstance->select(e|not e.oclIsKindOf(AADLBA!DataAccess) and e.isInputFeature() and not e.isPeriodicDelayedPort())
		->collect(fi| thisModule.CreateReturnSubcomponentFromPort(fi))
		
	)
	->union
	(c.featureInstance->select(e|e.isDataPort() and not e.isIntraProcessFeatureInstance() and e.isInputFeature() and not e.isPeriodicDelayedPort())
		->collect(fi|
			Sequence
			{
				fi.retreiveMessageAddress(),
				thisModule.resolveLazySingleIfExists(fi, 'CreateValidityDataSubcomponent', 'dataSubcomponent')
			}
		)
	)
	->union
	(
		callSequences->collect(callSequence | c.subcomponent.classifier.getAllConnections()->select(e| e.oclIsKindOf(AADLI!ParameterConnection) ) -> select(paramCnx| 
				paramCnx.isParamToParamConnection()
				and
				paramCnx.isPartOfCallSequence(callSequence)
				and
				callSequence.isComputeEntryPointOf(c)
			)->collect(
				paramCnx | thisModule.resolveMatchedTupleIfExists(Sequence{c, callSequence, paramCnx}, 'paramCnxVariable')
			)
		)
	)
	->flatten()
;

--	- m_Process_Output_DataPort_Instance extends m_Process_Output_Port_Instance: for each port instance
--		such that
--			port is a data port
--		produce
--			(i) refine globalVariable type to Sampling_Id_Type
--	- m_Process_Output_EventDataPort_Instance extends m_Process_Output_Port_Instance: for each port instance
--		such that
--			port is a data port
--		produce
--			(i) refine globalVariable type to Queueing_Id_Type
--	- m_Process_Output_EventPort_Instance extends m_Process_Output_Port_Instance: for each port instance
--		such that
--			port is a event port
--		produce
--			(i) refine globalVariable type to Queueing_Id_Type

-- @extends m_Process_Output_Port_Instance
rule m_Process_Output_EventDataPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isEventDataPort())
	to
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'UNDEFINED'.asDataType('OSEK_RUNTIME'))
}

-- @extends m_Process_Output_Port_Instance
rule m_Process_Output_DataPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isDataPort())
	to
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'UNDEFINED'.asDataType('OSEK_RUNTIME'))
}

-- @extends m_Thread_InterProcess_Input_Port_Instance
rule m_Process_Input_EventPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isEventPort())
	to
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'UNDEFINED'.asDataType('OSEK_RUNTIME'))
}

-- @extends m_Process_Input_Port_Instance
rule m_Process_Input_EventDataPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isEventDataPort())
	to
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'UNDEFINED'.asDataType('OSEK_RUNTIME'))
}

-- @extends m_Process_Input_Port_Instance
rule m_Process_Input_DataPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isDataPort())
	to
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'UNDEFINED'.asDataType('OSEK_RUNTIME'))
}

-- @extends m_Thread_InterProcess_Input_Port_Instance
rule m_Process_Output_EventPort_Instance
{
	from
		fi: AADLI!FeatureInstance
		(fi.isEventPort())
	to
		connectedSubcomponent: AADLBA!ConnectedElement,
		globalVariable: AADLBA!DataSubcomponent
		(dataSubcomponentType <- 'UNDEFINED'.asDataType('OSEK_RUNTIME'))
}

helper context AADLI!FeatureInstance def: collectPortGlobalVariableImg() : Sequence(AADLBA!DataSubcomponent) =
	if(self.getProcess().modeInstance->exists(mi| self.connectedInMode(mi.mode))) then
		self.getProcess().modeInstance->collect(mi |
			Sequence{
			thisModule.resolveMatchedTupleIfExists(Sequence{self, mi.mode}, 'globalVariableValue'), 
			thisModule.resolveMatchedTupleIfExists(Sequence{self, mi.mode}, 'globalVariable')
		})->flatten()
	else
		if(self.connectedToDataComponent()) then
			self.getConnectedDataComponent()->collect(e|
				Sequence{thisModule.resolveMatchedSingleIfExists(Sequence{self,e}, 'globalVariableValue'), thisModule.resolveMatchedSingleIfExists(Sequence{self,e}, 'globalVariable')}
			)->flatten()
		else
			Sequence{thisModule.resolveMatchedSingleIfExists(self, 'globalVariableValue'), thisModule.resolveMatchedSingleIfExists(self, 'globalVariable')}
		endif
	endif
;

-- @extends m_Thread_IntraProcess_Input_DataPort_Instance
rule m_Thread_IntraProcess_Input_DataPort_Instance_to_DataSubcomponent
{
  	from
		fi: AADLI!FeatureInstance
		(
			fi.connectedToDataComponent()
		)
  	to
		f: AADLBA!DataAccess,
		f_entrypoint: AADLBA!DataAccess,
		localVariable:AADLBA!DataSubcomponent,
		globalVariable:AADLBA!DataSubcomponent
		(
			dataSubcomponentType <- 'DataPortType'.asDataType('OSEK_RUNTIME'),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													GvInit
												)
									    }
		),
		GvInit: AADLBA!ListValue
	do
	{
		GvInit.ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
								thisModule.structInitInitiator+'&'+
								globalVariable.name+'_rez, &'+
								fi.connectedDataComponent().name+', '+ thisModule.getSizeOfType(fi.getLengthInitialValue())+
								thisModule.structInitTerminator		
							)
						};
	}
}

-- @extends m_Thread_IntraProcess_Input_DataPort_Instance
rule m_Thread_IntraProcess_Input_DataPort_Instance_not_to_DataSubcomponent
{
  	from
		fi: AADLI!FeatureInstance
		(
			not fi.connectedToDataComponent()
		)
  	to
		f: AADLBA!DataAccess,
		f_entrypoint: AADLBA!DataAccess,
		localVariable:AADLBA!DataSubcomponent,
		globalVariable:AADLBA!DataSubcomponent
		(
			dataSubcomponentType <- 'DataPortType'.asDataType('OSEK_RUNTIME'),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													GvInit
												)
									    }
		),
		globalVariableValue: AADLBA!DataSubcomponent
		(
			name <- fi.getComponentInstance().name+'_'+fi.name+'_value',
			dataSubcomponentType <- fi.feature.dataFeatureClassifier
		),
		GvInit: AADLBA!ListValue
	do
	{
		GvInit.ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
								thisModule.structInitInitiator+'&'+
								globalVariable.name+'_rez, &'+
								globalVariableValue.name+', '+ thisModule.getSizeOfType(fi.getLengthInitialValue())+
								thisModule.structInitTerminator		
							)
						};
	}
}

-- @extends m_Thread_DataOrEventDataPort_Input_Instance,m_Thread_IntraProcess_Input_Port_Instance,m_Not_PeriodicDelayed_Port
rule m_Thread_IntraProcess_Input_DataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
	to
		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'DataPortType'.asDataType('OSEK_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'DataPortType'.asDataType('OSEK_RUNTIME')),
		localVariable:AADLBA!DataSubcomponent,
	    globalVariable:AADLBA!DataSubcomponent

}

-- @extends m_Thread_IntraProcess_Input_Port_Instance_Mode,m_Thread_IntraProcess_Input_DataPort_Instance
rule m_Thread_IntraProcess_Input_DataPort_Instance_Mode_To_DataComponent
{
	from
		fi: AADLI!FeatureInstance,
		mode: AADLI!Mode
		(
			fi.connectedToDataComponentInMode(mode)
		)
	to
		globalVariable:AADLBA!DataSubcomponent
		(
			dataSubcomponentType <- 'DataPortType'.asDataType('OSEK_RUNTIME'),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													GvInit
												)
									    }
		),
		GvInit: AADLBA!ListValue
	do
	{
		GvInit.ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
								thisModule.structInitInitiator+'&'+
								globalVariable.name+'_rez, &'+
								fi.getConnectionEndInMode(mode)->first().name+', '+ thisModule.getSizeOfType(fi.getLengthInitialValue())+
								thisModule.structInitTerminator		
							)
						};
	}
}

-- @extends m_Thread_IntraProcess_Input_Port_Instance_Mode,m_Thread_IntraProcess_Input_DataPort_Instance
rule m_Thread_IntraProcess_Input_DataPort_Instance_Mode
{
	from
		fi: AADLI!FeatureInstance,
		mode: AADLI!Mode
		(
			not fi.connectedToDataComponentInMode(mode)
		)
	to
		f: AADLBA!DataAccess,
		f_entrypoint: AADLBA!DataAccess,
		globalVariable:AADLBA!DataSubcomponent
		(
			dataSubcomponentType <- 'DataPortType'.asDataType('OSEK_RUNTIME'),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													GvInit
												)
									    }
		),
		globalVariableValue: AADLBA!DataSubcomponent
		(
			name <- fi.getComponentInstance().name+'_'+fi.name+'_'+mode.name+'_value'
		),
		GvInit: AADLBA!ListValue
	do
	{
		GvInit.ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
								thisModule.structInitInitiator+'&'+
								globalVariable.name+'_rez, &'+
								globalVariableValue.name+', '+ thisModule.getSizeOfType(fi.getLengthInitialValue())+
								thisModule.structInitTerminator		
							)
						};
	}
}

-- @extends m_Not_PeriodicDelayed_Port,m_Thread_DataOrEventDataPort_Input_Instance,m_Thread_IntraProcess_Input_Port_Instance
rule m_Thread_IntraProcess_Input_EventDataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isEventDataPort()
		and
		fi.isIntraProcessFeatureInstance())
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'ThreadQueueType'.asDataType('OSEK_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'ThreadQueueType'.asDataType('OSEK_RUNTIME')),
		localVariable:AADLBA!DataSubcomponent,
		globalVariable: AADLBA!DataSubcomponent
		(
			dataSubcomponentType <- 'PortQueueType'.asDataType('OSEK_RUNTIME'),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													GvInit
												)
									    }
		),
		globalVariableValue: AADLBA!DataSubcomponent
		(
			name <- fi.getComponentInstance().name+'_'+fi.name+'_value',
			dataSubcomponentType <- buffer
		),
		buffer: AADLBA!DataType
		(
			name <- fi.getComponentInstance().name+'_'+fi.name+'_bufferType',
			ownedPropertyAssociation <- Sequence
			{
				thisModule.CreatePropertyAssociation('Data_Representation', 'DATA_MODEL',
					'Array'.asEnumeration('DATA_MODEL').asNamedValue()),
				thisModule.CreatePropertyAssociation('Base_Type', 'DATA_MODEL',
					thisModule.CreateListValueFromClassifier(
										fi.feature.dataFeatureClassifier
									)
				),
				thisModule.CreatePropertyAssociation('Dimension',
													  'DATA_MODEL',
													  thisModule.CreateListValueFromInteger(
														fi.getQueueSize())
												)
			}
		),
		GvInit: AADLBA!ListValue
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(globalVariable, fi);
		GvInit.ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
								thisModule.structInitInitiator+
								fi.getQueueSize().toString()+', 0, 0, 0, '+ thisModule.getSizeOfType(fi.getLengthInitialValue())
								+', '+globalVariableValue.name+', 0'+
								thisModule.structInitTerminator		
							)
						};
	}
}

-- @extends m_Not_PeriodicDelayed_Port,m_Thread_EventPort_Input_Instance,m_Thread_IntraProcess_Input_Port_Instance
rule m_Thread_IntraProcess_Input_EventPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isEventPort()
		and
		fi.isIntraProcessFeatureInstance())
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'ThreadQueueType'.asDataType('OSEK_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'ThreadQueueType'.asDataType('OSEK_RUNTIME')),
		localVariable:AADLBA!DataSubcomponent,
		globalVariable:AADLBA!DataSubcomponent
		(
			dataSubcomponentType <- 'PortQueueType'.asDataType('OSEK_RUNTIME'),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													GvInit
												)
									    }
		),
		globalVariableValue: AADLBA!DataSubcomponent
		(
			name <- fi.getComponentInstance().name+'_'+fi.name+'_value',
			dataSubcomponentType <- buffer
		),
		buffer: AADLBA!DataType
		(
			name <- fi.getComponentInstance().name+'_'+fi.name+'_bufferType',
			ownedPropertyAssociation <- Sequence
			{
				thisModule.CreatePropertyAssociation('Data_Representation', 'DATA_MODEL',
					'Array'.asEnumeration('DATA_MODEL').asNamedValue()),
				thisModule.CreatePropertyAssociation('Base_Type', 'DATA_MODEL',
					thisModule.CreateListValueFromClassifier(
										'Integer'.asDataType('BASE_TYPES')
									)
				),
				thisModule.CreatePropertyAssociation('Dimension',
													  'DATA_MODEL',
													  thisModule.CreateListValueFromInteger(
														fi.getQueueSize())
												)
			}
		),
		GvInit: AADLBA!ListValue
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(globalVariable, fi);
		GvInit.ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
								thisModule.structInitInitiator+
								fi.getQueueSize().toString()+', 0, 0, 0, '+ thisModule.getSizeOfType(fi.getLengthInitialValue())
								+', '+globalVariableValue.name+', 0'+
								thisModule.structInitTerminator		
							)
						};
	}
}

-- @extends m_Thread_InterProcess_Input_Port_Instance,m_Thread_DataOrEventDataPort_Input_Instance
rule m_Thread_InterProcess_Input_EventDataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isEventDataPort()
		and
		not fi.isIntraProcessFeatureInstance())
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'UNDEFINED'.asDataType('OSEK_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'UNDEFINED'.asDataType('OSEK_RUNTIME'))
}

-- @extends m_Thread_Input_Port_Instance
rule m_Thread_InterProcess_Input_EventOrEventDataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isEventPort()
		and
		not fi.isIntraProcessFeatureInstance())
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'UNDEFINED'.asDataType('OSEK_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'UNDEFINED'.asDataType('OSEK_RUNTIME')),
		localVariable:AADLBA!DataSubcomponent
}

-- @extends m_Thread_DataOrEventDataPort_Input_Instance,m_Thread_InterProcess_Input_Port_Instance
rule m_Thread_InterProcess_Input_DataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isDataPort()
		and
		not fi.isIntraProcessFeatureInstance())
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'UNDEFINED'.asDataType('OSEK_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'UNDEFINED'.asDataType('OSEK_RUNTIME')),
		localVariable:AADLBA!DataSubcomponent
}


--	- m_Thread_Output_IntraProcess_DataPort_Instance extends m_Thread_Output_Port_Instance for each pair of (port instance,connection reference)
--		such that
--			destination of the connection reference is the port of a thread
--			port is a data port
--		produce
--			(i) refine data access f type to Blackoard_Id_Type
--	- m_Thread_Output_InterProcess_EventDataPort_Instance extends m_Thread_Output_Port_Instance
--  		such that
--			destination of the connection reference is the port of a thread
--			port is an event data port
--		produce
--			(i) refine data access f type to Buffer_Id_Type
--  	- m_Thread_Output_IntraProcess_EventPort_Instance extends m_Thread_Output_Port_Instance
--  		such that
--			destination of the connection reference is the port of a thread
--			port is an event port
--		produce
--			(i) refine data access f type to Events_Id_Type
--	- m_Thread_Output_InterProcess_DataPort_Instance extends m_Thread_Output_Port_Instance for each pair of (port instance,connection reference)
--		such that
--			destination of the connection reference is the port of a process
--			port is a data port
--		produce
--			(i) refine data access f type to Sampling_Id_Type
--  	- m_Thread_Output_InterProcess_EventPort_Instance extends m_Thread_Output_Port_Instance
--  		such that
--			destination of the connection reference is the port of a process
--			port is an event port
--		produce
--			(i) refine data access f type to Queueing_Id_Type
--  	- m_Thread_Output_InterProcess_EventDataPort_Instance extends m_Thread_Output_Port_Instance
--  		such that
--			destination of the connection reference is the port of a process
--			port is an event data port
--		produce
--			(i) refine data access f type to Queuing_Id_Type


helper context AADLBA!Connection def: otherFeature(feature: AADLBA!Feature): AADLBA!Feature =
	if(self.source.connectionEnd = feature) then
		self.destination.connectionEnd
	else
		self.source.connectionEnd
	endif
;

-- @extends m_Thread_Output_Port_Instance,m_Not_PeriodicDelayed_Port
rule m_Thread_Output_IntraProcess_EventOrEventDataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
		(
			fi.isEventOrEventDataPort()
			and
			cnxRef.otherFeature(fi.feature).isThreadPort()
		)
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'ThreadQueueType'.asDataType('OSEK_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'ThreadQueueType'.asDataType('OSEK_RUNTIME'))
}

-- @extends m_Thread_Output_Port_Instance,m_Not_PeriodicDelayed_Port
rule m_Thread_Output_IntraProcess_DataPort_Instance
{
	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
		(
			fi.isDataPort()
			and
			cnxRef.otherFeature(fi.feature).isThreadPort()
		)
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'DataPortType'.asDataType('OSEK_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'DataPortType'.asDataType('OSEK_RUNTIME'))
}

-- @extends m_Thread_Output_Port_Instance,m_Not_PeriodicDelayed_Port
rule m_Thread_InterProcess_EventDataPort_Output_Instance
{
	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
		(
			fi.isEventOrEventDataPort()
			and
			cnxRef.destination.connectionEnd.isProcessPort()
		)
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'UNDEFINED'.asDataType('OSEK_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'UNDEFINED'.asDataType('OSEK_RUNTIME'))
}

-- @extends m_Thread_Output_Port_Instance,m_Not_PeriodicDelayed_Port
rule m_Thread_InterProcess_DataPort_Output_Instance
{
	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
		(
			fi.isDataPort()
			and
			cnxRef.otherFeature(fi.feature).isProcessPort()
		)
  	to
  		f: AADLBA!DataAccess
		(dataFeatureClassifier <- 'UNDEFINED'.asDataType('OSEK_RUNTIME')),
		f_entrypoint: AADLBA!DataAccess
		(dataFeatureClassifier <- 'UNDEFINED'.asDataType('OSEK_RUNTIME'))
}



helper def : getTimeOutInitValue(port : AADLBA!Feature) : AADLBA!PropertyExpression =
	if(port.getModalPropertyValue('Timeout').oclIsUndefined())
	then
		thisModule.toStringLiteral('0')
	else
		if(port.getModalPropertyValue('Timeout').ownedValue.value.oclIsUndefined())
		then
			OclUndefined
		else
			thisModule.toStringLiteral(port.getModalPropertyValue('Timeout').ownedValue.value.toString())
		endif
	endif
;

unique lazy rule CreateTimeOutSubcomponentFromCptPeriod
{
	from
		inst : AADLI!ComponentInstance
	using
	{
		initValuePE: AADLBA!PropertyExpression = thisModule.toStringLiteral(inst.getPeriodValue().toString());
	}
	to
		dataSubcomponent: AADLBA!DataSubcomponent
		(
			name<-inst.name+'_TimeOut',
			dataSubcomponentType<-'UNDEFINED'.asDataType('OSEK_RUNTIME'),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation('Initial_Value','DATA_MODEL',thisModule.CreateListValueFromPropertyExpression(initValuePE))} 
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(dataSubcomponent, inst);
		dataSubcomponent;
	}
}
			
			
unique lazy rule CreateInfiniteTimeOutSubcomponentFromCpt
{
	from
		inst : AADLI!ComponentInstance
	using
	{
		initValuePE: AADLBA!PropertyExpression = thisModule.toStringLiteral('INFINITE_TIME_VALUE');
	}
	to
		dataSubcomponent: AADLBA!DataSubcomponent
		(
			name<-inst.name+'_TimeOut',
			dataSubcomponentType<-'UNDEFINED'.asDataType('OSEK_RUNTIME'),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation('Initial_Value','DATA_MODEL',thisModule.CreateListValueFromPropertyExpression(initValuePE))} 
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().addTransformationBackTrace(dataSubcomponent, inst);
		dataSubcomponent;
	}
}

lazy rule createPortCountValueUpdate
{
	from
		fi: AADLI!FeatureInstance
	using
	{
		spg: AADLI!SubprogramType = 'GetCount'.asSubprogramType('OSEK_RUNTIME');
		GLOBAL_Q: AADLBA!DataAccess = fi.getFeatureImg();
		RETURN_CODE: AADLBA!DataSubcomponent = thisModule.CreateReturnSubcomponentFromPort(fi);
	}
	to
		callGetCount: AADLBA!SubprogramCallAction
		(
			subprogram <- getCountHolder,
			parameterLabels <- Sequence{GLOBAL_Q_HOLDER,thisModule.createPortIdValueExpression(fi),COUNT_HOLDER,RETURN_CODE_HOLDER}
		),
		getCountHolder: AADLBA!SubprogramHolder
		(
			element <- spg
		),
		GLOBAL_Q_HOLDER: AADLBA!DataAccessHolder
		(
			element<-GLOBAL_Q
		),
		RETURN_CODE_HOLDER: AADLBA!DataSubcomponentHolder
		(
			element <- RETURN_CODE
		),
		COUNT_HOLDER: AADLBA!DataSubcomponentHolder
		(
			element <- thisModule.createPortCountSubcomponent(fi)
		)
}

-------------------------------------------------------------------------------------------
----	OVERRIDEN HELPERS
-------------------------------------------------------------------------------------------

helper context AADLI!FeatureInstance def: getLengthInitialValue() : String =
	let ba: AADLBA!BehaviorAnnex = self.getBehaviorAnnex() in
	let p: AADLI!FeatureInstance = self.getDirectlyUsedInFresh() in
	if(not p.oclIsUndefined()) then
		let package_name: String = p.getComponentInstance().subcomponent.classifier.getNamespace().getOwner().name in
		if(p.getComponentInstance().eContainer() = self.getComponentInstance().eContainer()) then
			package_name+thisModule.getPackageSuffix().concat('::'+p.feature.dataFeatureClassifier.getFreshnessType()+thisModule.impl_suffix).getProgrammationLanguageIdentifier()
		else
			package_name+thisModule.getPackageSuffix().concat('::'+self.feature.dataFeatureClassifier.getFreshnessType()+thisModule.impl_suffix).getProgrammationLanguageIdentifier()
		endif
	else
		if(self.isEventPort()) then
			'Integer_16'.asClassifier('BASE_TYPES').getProgrammationLanguageIdentifier()
		else 
			self.feature.dataFeatureClassifier.getProgrammationLanguageIdentifier()
		endif
	endif
;


