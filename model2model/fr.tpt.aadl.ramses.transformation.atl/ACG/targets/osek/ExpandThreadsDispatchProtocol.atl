--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- nsURI AADLBA=http:///AADLBA
-- @atlcompiler emftvm

module ExpandThreadsDispatchProtocol;
create OUT : AADLBA 	from 		IN : AADLI,
									AADL_RUNTIME: AADLBA,
									DATA_MODEL: AADLBA,
									PROGRAMMING_PROPERTIES: AADLBA,
									HOOKS: ATLHOOKS,

									ARINC653_RUNTIME: AADLBA;


-- @extends m_ThreadEntrypoint
rule m_PeriodicThread
{
	from
		c: AADLI!ComponentInstance
		( (c.isPeriodicThread() or c.isSporadicThread()) )
	using
	{
		spg : AADLBA!SubprogramType = thisModule.getWaitPeriodSubprogram;
	}
	to
		initState: AADLBA!BehaviorState,
		callSeqState: AADLBA!BehaviorState,
		callSequenceImg: AADLBA!SubprogramCallSequence,
		returnData: AADLBA!DataSubcomponent,
		waitDispatchCall: AADLBA!SubprogramCallAction
		(
			subprogram<-dispatchHolder,
			parameterLabels <- Sequence{}
		),
		dispatchHolder: AADLBA!CalledSubprogramHolder
		(
			element <- spg
		)
	do
	{
		thisModule.addImportedUnit(thisModule.public(), thisModule.getLoadedAADLRuntime, thisModule.getRuntimeName);
	}
}


helper def: getRuntimeReturnType() : AADLBA!DataSubcomponentType = 'StatusType'.asDataType('OSEK_RUNTIME');

helper def: getNextPeriodSubprogram: AADLBA!Subprogram =
	OclUndefined
;

helper def: getWaitPeriodSubprogram: AADLBA!Subprogram =
	'TerminateTask'.asSubprogramType('OSEK_RUNTIME')
;

helper def: platformName: String =
	'osek'
;

helper def: getLoadedAADLRuntime: String =
	'OSEK_RUNTIME'
;

helper def: getRuntimeName: String =
	'OSEK_runtime'
;
