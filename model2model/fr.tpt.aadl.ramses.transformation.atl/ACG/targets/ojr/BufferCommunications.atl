--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm

module BufferCommunications;
create OUT : AADLBA 	from 		IN : AADLI,
									AADL_RUNTIME: AADLBA,
									DATA_MODEL: AADLBA,
									PROGRAMMING_PROPERTIES: AADLBA,
									HOOKS: ATLHOOKS,

									OJR_RUNTIME: AADLBA;



--------------------------------------------
---               BUFFER                 ---
--------------------------------------------		

-- @extends m_Not_PeriodicDelayed_Port
abstract rule m_BufferSubprogramCall
{
	from
		fi: AADLI!FeatureInstance,
		behavior: AADLI!SubprogramCallSequence,
		paramCnx: AADLI!ParameterConnection
		(
			fi.isEventOrEventDataPort()
			and
			behavior.isComputeEntryPointOf(fi.eContainer())
			and
			fi.isIntraProcessFeatureInstance()
		)
}


-- @extends m_BufferSubprogramCall,m_Input_EventDataPort_ComputeEntrypointCallSequence,m_Parameter_to_PortInstance_Connection
rule m_Input_Buffer_ComputeEntrypointCallSequence
{
	from
		fi: AADLI!FeatureInstance,
		behavior: AADLI!SubprogramCallSequence,
		paramCnx: AADLI!ParameterConnection
	using
	{
		spg: AADLBA!SubprogramType = 'Receive_Data'.asSubprogramType('OJR_RUNTIME');
		MESSAGE_ADDR: AADLBA!DataSubcomponent = fi.retreiveMessageAddress();
		BUFFER_ID: AADLBA!DataAccess = fi.getFeatureImg();
		RETURN_CODE: AADLBA!DataSubcomponent = thisModule.CreateReturnSubcomponentFromPort(fi);
	}
	to
		call: AADLBA!SubprogramCallAction
		(
			subprogram <- callHolder,
			parameterLabels <- Sequence{BUFFER_ID_HOLDER,MESSAGE_ADDR_HOLDER,RETURN_CODE_HOLDER} 
		),
		callHolder: AADLBA!CalledSubprogramHolder
		(
			element <- spg
		),
		BUFFER_ID_HOLDER: AADLBA!DataAccessHolder
		(
			element<-BUFFER_ID
		),
		MESSAGE_ADDR_HOLDER: AADLBA!DataSubcomponentHolder
		(
			element <- MESSAGE_ADDR
		),
		
		RETURN_CODE_HOLDER: AADLBA!DataSubcomponentHolder
		(
			element <- RETURN_CODE
		)
}

-- @extends m_BufferSubprogramCall,m_Output_EventOrEventDataPort_ComputeEntrypointCallSequence
rule m_Output_Buffer_ComputeEntrypointCallSequence
{
	from
		fi: AADLI!FeatureInstance,
		behavior: AADLI!SubprogramCallSequence,
		paramCnx: AADLI!ParameterConnection,
		cnxRef: AADLI!PortConnection		
		(
			fi.srcConnectionInstance->exists(e|e.connectionReference->first().connection = cnxRef)
		)
	using
	{
		spg: AADLBA!SubprogramType = 'Send_Data'.asSubprogramType('OJR_RUNTIME');
		resolvedSpg: AADLBA!SubprogramType = thisModule.createResolvedSpg(fi.feature.dataFeatureClassifier, spg);
		MESSAGE_ADDR: AADLBA!DataSubcomponent = fi.retreiveMessageAddress();
		BUFFER_ID: AADLBA!DataAccess = thisModule.resolveMatchedTupleIfExists(Sequence{fi,cnxRef}, 'f_entrypoint');
		RETURN_CODE: AADLBA!DataSubcomponent = thisModule.resolveMatchedSingleIfExists(fi.eContainer(), 'returnData');
	}
	to
		call: AADLBA!SubprogramCallAction
		(
			subprogram <- callHolder,
			parameterLabels <- Sequence{BUFFER_ID_HOLDER,MESSAGE_ADDR_HOLDER,RETURN_CODE_HOLDER} 
		),
		callHolder: AADLBA!CalledSubprogramHolder
		(
			element <- resolvedSpg
		),
		BUFFER_ID_HOLDER: AADLBA!DataAccessHolder
		(
			element<-BUFFER_ID
		),
		MESSAGE_ADDR_HOLDER: AADLBA!DataSubcomponentHolder
		(
			element <- MESSAGE_ADDR
		),
		RETURN_CODE_HOLDER: AADLBA!DataSubcomponentHolder
		(
			element <- RETURN_CODE
		)
}

