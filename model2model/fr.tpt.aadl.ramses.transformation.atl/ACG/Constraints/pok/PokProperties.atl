--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm

module PokProperties;
create OUT : CV 	from 		IN : AADLI,
								POK: AADLI;

helper context AADLI!PropertyAssociation def : isValidPartitionScheduler() : Boolean =
	let schedValue: String = self.ownedValue->first().ownedValue.ownedListElement->first().namedValue.name in
	schedValue.toLower() = 'round_robin_protocol'
	or
	schedValue.toLower() = 'rms'
;


--@extends check_VirtualProcessorInstance
rule check_VirtualProcessorHasScheduler
{
	from
	 	obj:AADLI!ComponentInstance
		(
			obj.hasProperty('Scheduling_Protocol')
			and
			not obj.ownedPropertyAssociation->any(
				e | e.property.name.toLower() = 'scheduling_protocol'
			).isValidPartitionScheduler()
		)
	to
		err: CV!Error
		(message <- obj.subcomponent.name + 
			' has invalid scheduling_protocol for POK; supported '+
			'values are: Round_Robin_Protocol and RMS' )
}

--@extends check_ProcessorInstance
rule check_ProcessorHasBSP
{
	from
	 	obj:AADLI!ComponentInstance,
		p: AADLI!Property in POK
		(
		 	p.name = 'BSP'
			and
			not obj.hasProperty('BSP')
		)
	to
		err: CV!Error
		(message <- 'Using POK target, add property POK::BSP to component ' + obj.subcomponent.name )
}

--@extends check_ProcessorInstance
rule check_ProcessorHasArchitecture
{
	from
	 	obj:AADLI!ComponentInstance,
		p: AADLI!Property in POK
		(
		 	p.name = 'Architecture'
			and
			not obj.hasProperty('Architecture')
		)
	to
		err: CV!Error
		(message <- 'Using POK target, add property POK::Architecture to component ' + obj.subcomponent.name )
}
