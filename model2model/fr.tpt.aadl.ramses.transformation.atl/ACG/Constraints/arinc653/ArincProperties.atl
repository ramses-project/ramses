--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm

module ArincProperties;
create OUT : CV 	from 		IN : AADLI,
								TIMING_PROPERTIES : AADLI,
								ARINC653 : AADLI;

-- @extends check_ComponentInstance
abstract rule check_ProcessorInstance
{
	from
	  obj: AADLI!ComponentInstance
	  (obj.category = #processor)
}

-- @extends check_ProcessInstance
rule check_ArincProcessorBinding
{
	from
		obj: AADLI!ComponentInstance
		(obj.hasProperty('Actual_Processor_Binding')
			and
		 not (obj.getActualProcessorBinding()->first().category.getName() = 'virtual processor')
		)
	to
		err: CV!Error
		(message <- 'In ARINC653, process subcomponent '+obj.subcomponent.name + ' must be deployed on a virtual processor' )
}

-- @extends check_ProcessInstance
rule check_ArincUniqueProcessorBinding
{
	from
		obj: AADLI!ComponentInstance
		(
			obj.hasProperty('Actual_Processor_Binding')
			and
		 	obj.getActualProcessorBinding()->first().category.getName() = 'virtual processor'
		 	and
		 	obj.isNotAlone()
		)
	to
		err: CV!Error
		(message <- 'In ARINC653, each process subcomponent must'+ 
			'be deployed on a different virtual processor' )
}


--@extends check_ProcessorInstance
rule check_HasMajorFrame
{
	from
	 	obj:AADLI!ComponentInstance
		(not obj.hasProperty('Module_Major_Frame'))
	to
		err: CV!Error
		(message <- 'In ARINC653, each processor must '+ 
			'have a property value for ARINC653::Module_Major_Frame' )
}

--@extends check_ProcessorInstance
rule check_HasModuleSchedule
{
	from
	 	obj:AADLI!ComponentInstance,
		sa: AADLI!Property in ARINC653
		(
			sa.name='Module_Schedule'
			and
			not obj.hasProperty('Module_Schedule')
		)
	to
		err: CV!Error
		(message <- obj.subcomponent.name + '; In ARINC653, each processor must'+ 
			' have a property value for ARINC653::Module_Schedule' )
}

--@extends check_ProcessorInstance
rule check_EachPartitionHasScheduleSlot
{
	from
	 	obj:AADLI!ComponentInstance,
		part:AADLI!ComponentInstance
		(
		  part.category.getName()='virtual processor'
		  and
		  obj.hasProperty('Module_Schedule')
		  and
		  obj.componentInstance->contains(part)
		  and
		  not obj.ownedPropertyAssociation->any(pa|pa.property.name='Module_Schedule').ownedValue->first().ownedValue.ownedListElement->exists(e|
		  	e.ownedFieldValue->any(e| e.property.name.toLower()='partition').ownedValue.referencedInstanceObject = part)
		)
	to
		err: CV!Error
		(message <- 'ARINC653::Slots_Allocation property must reference all the partitions; '+part.name+
			' is not referenced in the ARINC653::Slots_Allocation property')
}

--@extends check_VirtualProcessorInstance
rule check_HasPeriod
{
	from
	 	obj:AADLI!ComponentInstance,
		p: AADLI!Property in TIMING_PROPERTIES
		(p.name='Period' and not obj.hasProperty('Period'))
	to
		err: CV!Error
		(message <- 'In ARINC653, each virtual processor must '+ 
			'have a property value for Period' )
}

--@extends check_ProcessorInstance
rule check_PortsFlushTime
{
	from
	 	obj:AADLI!ComponentInstance,
		pft: AADLI!PropertyAssociation
		(
			pft.eContainer() = obj
			and
			obj.hasProperty('PortsFlushTime')
			and
			obj.ownedPropertyAssociation->any(e|e.property.name = 'Ports_Flush_Time').ownedValue->first()
			.ownedValue.namedValue.name = 'Minor_Frame_Switch'
			and not obj.hasProperty('Module_Minor_Frame'))
	to
		err: CV!Error
		(message <- 'ARINC653: when ports are flushed at minor frames switch, ARINC653::Module_Minor_Frame must be set' )
}


helper context AADLI!ComponentInstance def: isNotAlone() : Boolean =
	thisModule.getAllInstances('process')->excluding(self)->collect(e| e.getActualProcessorBinding())
	->contains(e|e=self.getActualProcessorBinding())
;

helper context AADLI!PropertyAssociation def : isValidARINC653Scheduler() : Boolean =
	let schedValue: String = self.ownedValue->first().ownedValue.ownedListElement->first().namedValue.name in
	schedValue.toLower() = 'arinc653'
;

--@extends check_ProcessorInstance
rule check_ProcessorHasARINC653Scheduler
{
	from
	 	obj:AADLI!ComponentInstance
		(
			obj.hasProperty('Scheduling_Protocol')
			and
			not obj.ownedPropertyAssociation->any(
				e | e.property.name.toLower() = 'scheduling_protocol'
			).isValidARINC653Scheduler()
		)
	to
		err: CV!Error
		(message <- 'Invalid scheduling_protocol for '+obj.subcomponent.name+ 
		' should be: arinc653' )
}
