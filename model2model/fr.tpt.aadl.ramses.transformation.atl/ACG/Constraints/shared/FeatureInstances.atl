-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm



module FeatureInstances;
create OUT : CV         from                 IN : AADLI;


helper context AADLI!SubprogramCall def: getContainingComponent():AADLBA!ComponentClassifier =
        if(self.eContainer().oclIsKindOf(AADLI!ComponentImplementation)) then
                self.eContainer()
        else
				self.eContainer().getContainingComponent()
        endif
;

helper context AADLI!SubprogramCallSequence def: getContainingComponent():AADLBA!ComponentClassifier =
        if(self.eContainer().oclIsKindOf(AADLI!ComponentImplementation)) then
                self.eContainer()
        else
				self.eContainer().getContainingComponent()
        endif
;


abstract rule check_FeatureInstance
{
        from
          obj: AADLI!FeatureInstance
        to
          err: CV!Error
          (
                  object <:= obj.feature
          )
}

-- @extends check_FeatureInstance
rule check_FeatureInstanceHasConcreteDataType
{
        from
          obj: AADLI!FeatureInstance
          (
                  obj.isDataOrEventDataPort()
                and
                not obj.feature.dataFeatureClassifier.hasConcreteDataType()
          )
        to
          err: CV!Error
          (
                  message <- 'In ' + obj.feature.dataFeatureClassifier.name + ', concrete data type is not defined. '
                +'Use data modeling annex (Data_Model::Data_Representation property) '
                +'of refer existing source code files '
                +'(Source_Text property)'
          )
}

rule check_dataAccess_are_connected
{
	from 
	obj : AADLI!DataAccess,
	sub : AADLI!Subcomponent(		
		not sub.subcomponentType.oclIsKindOf(AADLI!ComponentType) and
		not sub.subcomponentType.oclIsKindOf(AADLI!ComponentPrototype) and 
		sub.subcomponentType.getType().ownedFeature->includes(obj) and
		not AADLBA!ConnectedElement.allInstances()->exists(ce| ce.context = sub and ce.connectionEnd = obj) 
	)
	to
	  err: CV!Error
	  (
	  	object <:= obj,
		message <- 'Data access '+obj.name+' of subcomponent '+sub.name+' in '+ sub.getOwner().name+' component implementation is not connected'
	  )
}		


rule check_Parameter_are_connected
{
        from
        obj : AADLI!Parameter,
        sub : AADLI!SubprogramCall(                
                sub.getSubprogramType().ownedParameter->includes(obj) and
                not sub.getContainingComponent().ownedConnection->exists(
                        c | (c.source.context = sub and c.source.connectionEnd = obj) or
                            (c.destination.context = sub and c.destination.connectionEnd = obj)
                )
        )
        to
          err: CV!Error
          (
                  object <:= obj,
                message <- 'Parameter '+obj.name+' of subprogram call '+sub.name+' is not connected'
          )        
}

helper context AADLI!SubprogramCall def : getSubprogramType () : AADLI!SubprogramType =
        if (self.calledSubprogram.oclIsTypeOf(AADLI!SubprogramType)) then
                self.calledSubprogram
        else if (self.calledSubprogram.oclIsKindOf(AADLI!SubprogramAccess)) then
                self.calledSubprogram.subprogramFeatureClassifier.getSubprogramType()
        else
                self.calledSubprogram
        endif
        endif
        ;