--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLI=http://aadl.info/AADL/2.0/instance
-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore

-- @atlcompiler emftvm

module Subprograms;
create OUT : CV 	from 		IN : AADLI;

abstract rule check_SubprogramCall
{
	from
	  obj: AADLI!SubprogramCall
	to
	  err: CV!Error
	  (
	  	object <:= obj
	  )
}

-- @extends check_SubprogramCall
rule check_HasSourceCode
{
	from
	  obj: AADLI!SubprogramCall
	  (not obj.hasSourceCode())
	to
	  err: CV!Error
	  (
	  	message <- 'Called subprograms must have a behavior annex '+
		'or reference existing source code (Source_Name and Source_Text properties)'
	  )
}

-- @extends check_HasSourceCode
rule check_HasHeaderInSourceCode
{
	from
		obj: AADLI!SubprogramCall
		(
			let spg: AADLBA!SubprogramClassifier = obj.getSubprogramClassifier()
			in
			spg.referenceSourceCode()
			and
			not spg.hasHeaderInSourceCode()	
		)
	to
		err: CV!Error
	  (
	  	message <- 'In ' + obj.name + ', called subprograms must have a behavior annex '+
		'or reference existing source code (Source_Name and Source_Text properties)'
	  )
}

---------------------------------------------------------------------------------------------------

-- @extends check_SubprogramCall
abstract rule check_connections_between_calls_and_features
{
	from
		obj: AADLI!SubprogramCall,
		feature : AADLI!Feature,
		component : AADLI!BehavioredImplementation
}		

-- @extends check_connections_between_calls_and_features
rule check_connections_between_SubprogramAccess_and_features
{
	from
		obj: AADLI!SubprogramCall,
		feature : AADLI!Feature,
		component : AADLI!BehavioredImplementation
		(
			obj.calledSubprogram.oclIsTypeOf(AADLI!SubprogramAccess) and
			obj.calledSubprogram.subprogramFeatureClassifier.getOrderedFeature()->includes(feature) and
			component.subprogramCall->includes(obj) and
			(not obj.calledSubprogram.connection_exists_between_call_and_feature(feature, component))
		 )
	to
	  err: CV!Error
	  (
	  	message <- 'Missing connection(s) between subprogramCall of type SubprogramAccess '.concat(
			obj.name+' and '+ obj.calledSubprogram.name+' subprogram parameter(s) in component '+ component.name +'\n'
			)
		)
}



-- @extends check_connections_between_calls_and_features
abstract rule check_connections_between_Subprogram_and_features
{
	from
		obj: AADLI!SubprogramCall,
		feature : AADLI!Feature,
		component : AADLI!BehavioredImplementation
		(obj.calledSubprogram.oclIsTypeOf(AADLI!Subprogram))
		
}

-- @extends check_connections_between_Subprogram_and_features
rule check_connections_between_SubprogramSubcomponent_and_features
{
	from
		obj: AADLI!SubprogramCall,		
		feature : AADLI!Feature,
		component : AADLI!BehavioredImplementation
		(
			obj.calledSubprogram.oclIsTypeOf(AADLI!SubprogramSubcomponent) and
			obj.classifier.classifierFeature->includes(feature) and
			component.subprogramCall->includes(obj) and
			not obj.calledSubprogram.classifier.connection_exists_between_call_and_feature(feature, component)	
		)
	to
	  err: CV!Error
	  (
	  	message <- 'Missing connection(s) between subprogramCall of type SubprogramSubcomponent '.concat(
			obj.name+' and '+ obj.calledSubprogram.name+' subprogram parameter(s) in component '+ component.name +'\n'
			)
		)
}

-- @extends check_connections_between_Subprogram_and_features
rule check_connections_between_SubprogramClassifier_and_features
{
	from
		obj: AADLI!SubprogramCall,
		feature : AADLI!Feature,
		component : AADLI!BehavioredImplementation(
			obj.calledSubprogram.oclIsTypeOf(AADLI!SubprogramClassifier) and
			obj.classifierFeature->includes(feature) and
			component.subprogramCall->includes(obj) and
			not obj.calledSubprogram.connection_exists_between_call_and_feature(feature, component)	
		)
	to
	  err: CV!Error
	  (
	  	message <- 'Missing connection(s) between subprogramCall of type SubprogramClassifier '.concat(
			obj.name+' and '+ obj.calledSubprogram.name+' subprogram parameter(s) in component '+ component.name +'\n'
			)
		)
}



-- @extends check_connections_between_calls_and_features
rule check_connections_between_subprogramProxy_and_features
{
	from
		obj: AADLI!SubprogramProxy,
		feature : AADLI!Feature,
		component : AADLI!BehavioredImplementation
		(
			obj.calledSubprogram.oclIsTypeOf(AADLI!SubprogramProxy) and
			obj.subprogramClassifier.getOrderedFeature()->includes(feature) and
			component.subprogramCall->includes(obj) and
			not obj.calledSubprogram.connection_exists_between_call_and_feature(feature, component)
		 )
	to
	  err: CV!Error
	  (
	  	message <- 'Missing connection(s) between subprogramCall of type SubprogramProxy '.concat(
			obj.name+' and '+ obj.calledSubprogram.name+' subprogram parameter(s) in component '+ component.name +'\n'
			)
		)
}

-- @extends check_connections_between_calls_and_features
rule check_connections_between_Prototype_and_features
{
	from
		obj: AADLI!SubprogramCall
		(obj.calledSubprogram.oclIsTypeOf(AADLI!SubprogramPrototype))
	to
	  err: CV!Error
	  (
	  	message <- 'Call object is type of Prototype, not a concrete call.
		Call object must be conrete : Subprogram or SubprogramAcess'
		)
}

helper context AADLI!SubprogramAccess def : connection_exists_between_call_and_feature (feature : AADLI!Feature, comp : AADLI!ComponentImplementation) :Boolean = 	
	let cnxs : Sequence(AADLI!Connection) = comp.ownedConnection in
	let subprogramFeatures : Sequence(AADLI!Feature) = self.subprogramFeatureClassifier.getOrderedFeature() in
	subprogramFeatures->forAll (sf | cnxs->exists(c | (c.source.connectionEnd = sf) or ( c.destination.connectionEnd = sf) ))	
	;
helper context AADLI!SubprogramProxy def : connection_exists_between_call_and_feature (feature : AADLI!Feature, comp : AADLI!ComponentImplementation) :Boolean = 	
	let cnxs : Sequence(AADLI!Connection) = comp.ownedConnection in
	let subprogramFeatures : Sequence(AADLI!Feature) = self.subprogramClassifier.getOrderedFeature() in
	subprogramFeatures->forAll (sf | cnxs->exists(c | (c.source.connectionEnd = sf ) or ( c.destination.connectionEnd = sf ) ))	
	;
helper context AADLI!SubprogramClassifier def : connection_exists_between_call_and_feature (feature : AADLI!Feature, comp : AADLI!ComponentImplementation) :Boolean = 	
	let cnxs : Sequence(AADLI!Connection) = comp.ownedConnection in
	let subprogramFeatures : Sequence(AADLI!Feature) = self.classifierFeature in
	subprogramFeatures->forAll (sf | cnxs->exists(c | (c.source.connectionEnd = sf ) or ( c.destination.connectionEnd = sf ) ))	
	;
---------------------------------------------------------------------------------------------------


helper context AADLI!SubprogramCall def: hasSourceCode(): Boolean =
	let spg: AADLBA!SubprogramClassifier = self.getSubprogramClassifier()
	in
	spg.hasBehaviorAnnex()
	or
	spg.referenceSourceCode()
	or
		if(spg.ownedExtension.oclIsUndefined()) then
			false
		else
			spg.ownedExtension.extended.hasSourceCode()
		endif
;

helper context AADLI!SubprogramClassifier def: referenceSourceCode() : Boolean =
	self.hasProperty('Source_Text') and self.hasProperty('Source_Name')
;

helper context AADLI!SubprogramSubcomponent def: referenceSourceCode() : Boolean =
	self.subcomponentType.referenceSourceCode()
;

helper context AADLI!SubprogramClassifier def: hasBehaviorAnnex() : Boolean =
	self.ownedAnnexSubclause->exists(e | e.name = 'behavior_specification')
;

helper context AADLI!SubprogramSubcomponent def: hasBehaviorAnnex() : Boolean =
	self.subcomponentType.hasBehaviorAnnex()
;

