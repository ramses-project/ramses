--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm

module SharedRules;
create OUT : AADLBA from IN : AADLI;

helper def : Receive_Input_Name : String = 'Receive_Input';
helper def : Next_Value_Name    : String = 'Next_Value';

helper def : collectPeriodicDelayed_GlobalVariables_LowMFP(c: AADLI!ComponentInstance): Sequence(AADLBA!DataSubcomponent) =
	Sequence{}
;

helper def : collectPeriodicDelayed_GlobalVariablesAccesses_LowMFP(c: AADLI!ComponentInstance): Sequence(AADLBA!DataAccess) =
	Sequence{}
;

helper def : collectPeriodicDelayed_GlobalVariablesAccesses_Mutex(c: AADLI!ComponentInstance): Sequence(AADLBA!DataAccess) =
	Sequence{}
;

helper def : collectPeriodicDelayed_GlobalVariablesConnections_LowMFP(c: AADLI!ComponentInstance): Sequence(AADLBA!AccessConnection) =
	Sequence{}
;

helper def : collectPeriodicDelayed_GlobalVariablesConnections_Mutex(c: AADLI!ComponentInstance): Sequence(AADLBA!AccessConnection) =
	Sequence{}
;

helper def : collectPeriodicDelayed_LocalVariablesAccesses_LowMFP(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!DataAccess) =
	Sequence{}
;

helper def : collectPeriodicDelayed_LocalVariablesAccesses_Mutex(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!DataAccess) =
	Sequence{}
;


helper def : collectPeriodicDelayed_LocalVariablesConnections_LowMFP(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!AccessConnection) =
	Sequence{}
;

helper def : collectPeriodicDelayed_LocalVariablesConnections_Mutex(c: AADLI!ComponentInstance): Sequence(AADLBA!AccessConnection) =
	Sequence{}
;

helper def : collectPeriodicDelayed_LocalVariables_LowMFP(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!DataAccess) =
	Sequence{}
;

helper def : collectPeriodicDelayed_LocalVariables_LowET(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!DataAccess) =
	Sequence{}
;

helper def : collectPeriodicDelayed_LocalVariables_Mutex(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!DataAccess) =
	Sequence{}
;

helper def : collectPeriodicDelayed_GlobalVariables_Mutex(c: AADLI!ComponentInstance): Sequence(AADLBA!DataSubcomponent) =
	Sequence{}
;

helper def: collectPeriodicDelayed_ThreadVariables(c: AADLI!ComponentInstance): Sequence(AADLBA!DataSubcomponent)=
	thisModule.collectPeriodicDelayed_ThreadVariables_LowMFP(c)
	->union
	(
		thisModule.collectPeriodicDelayed_ThreadVariables_Mutex(c)
	)
;

helper def: collectPeriodicDelayed_ThreadVariables_Mutex(c: AADLI!ComponentInstance): Sequence(AADLBA!DataSubcomponent)=
	Sequence{}
;

helper def: collectPeriodicDelayed_ThreadVariables_LowMFP(c: AADLI!ComponentInstance): Sequence(AADLBA!DataSubcomponent)=
	Sequence{}
;

helper def : collectPeriodicDelayed_GlobalVariables(c: AADLI!ComponentInstance): Sequence(AADLBA!DataSubcomponent) =
	thisModule.collectPeriodicDelayed_GlobalVariables_LowMFP(c)
	->union
	(
		thisModule.collectPeriodicDelayed_GlobalVariables_Mutex(c)
	)
;

helper def : collectPeriodicDelayed_GlobalVariablesAccesses(c: AADLI!ComponentInstance): Sequence(AADLBA!DataAccess) =
	thisModule.collectPeriodicDelayed_GlobalVariablesAccesses_LowMFP(c)
	->union
	(
		thisModule.collectPeriodicDelayed_GlobalVariablesAccesses_Mutex(c)
	)
;

helper def : collectPeriodicDelayed_GlobalVariablesConnections(c: AADLI!ComponentInstance): Sequence(AADLBA!DataAccess) =
	thisModule.collectPeriodicDelayed_GlobalVariablesConnections_LowMFP(c)
	->union
	(thisModule.collectPeriodicDelayed_GlobalVariablesConnections_Mutex(c))
;

helper def : collectPeriodicDelayed_LocalVariablesAccesses(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!DataAccess) =
	thisModule.collectPeriodicDelayed_LocalVariablesAccesses_LowMFP(c, behavior)
	->union
	(
		thisModule.collectPeriodicDelayed_LocalVariablesAccesses_Mutex(c, behavior)
	)
;

helper def : collectPeriodicDelayed_LocalVariablesConnections(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!DataAccess) =
	thisModule.collectPeriodicDelayed_LocalVariablesConnections_LowMFP(c, behavior)
	->union
	(
		thisModule.collectPeriodicDelayed_LocalVariablesConnections_Mutex(c)
	)->asSet()
;

helper def: collectPeriodicDelayed_LocalVariables(c: AADLI!ComponentInstance, behavior: Sequence(AADLI!SubprogramCallSequence)): Sequence(AADLBA!DataSubcomponent)=
	if(not c.featureInstance->exists(e|e.isPeriodicDelayedPort())) then
	Sequence{}
	else
	Sequence{
		thisModule.createIterationCounter(c)
	}->union
	(
	c.featureInstance->select(e|e.isEventOrEventDataPort() and e.isPeriodicDelayedPort())
		->collect(fi|
			thisModule.resolveMatchedSingleIfExists(fi, 'localVariable')
		)
	)
	->union
	(
	c.featureInstance->select(e|e.isEventOrEventDataPort() and e.isPeriodicDelayedPort())
		->collect(fi|
			fi.srcConnectionInstance->collect(cnxInst|
				Sequence
				{
					thisModule.resolveMatchedTupleIfExists(Sequence{fi, cnxInst.connectionReference->first().connection}, 'CDWSize')
				}
			)
		)
	)->union
	(
	c.featureInstance->select(e|e.isEventOrEventDataPort() and e.isPeriodicDelayedPort() and e.isInputFeature())
		->collect(fi|
			Sequence
			{
				thisModule.resolveMatchedSingleIfExists(fi, 'CPRSize'),
				thisModule.resolveMatchedSingleIfExists(fi, 'lastIndex'),
				thisModule.resolveMatchedSingleIfExists(fi, 'readIndex'),
				thisModule.resolveMatchedSingleIfExists(fi, 'localVariable'),
				thisModule.resolveMatchedSingleIfExists(fi, 'bufferSizeSubcomponent')
			}
		)
	)
	->union
	(
		behavior->collect
		( b |
			thisModule.collectPeriodicDelayed_LocalVariables_LowMFP(c, b)
		)
	)
	->union
	(
		behavior->collect
		( b |
			thisModule.collectPeriodicDelayed_LocalVariables_LowET(c, b)
		)
	)
	->union
	(
		behavior->collect
		( b |
			thisModule.collectPeriodicDelayed_LocalVariables_Mutex(c, b)
		)
	)
	->flatten()
	endif
;


helper def: getCurrentPerionReadTable(port: AADLI!FeatureInstance) : Sequence(Integer) = 
	thisModule.theHOOK.getCurrentPerionReadTable(port)
;

helper def: getCurrentDeadlineWriteTable(sourcePort: AADLI!FeatureInstance, destinationPort: AADLI!FeatureInstance) : Sequence(Integer) = 
	thisModule.theHOOK.getCurrentDeadlineWriteTable(sourcePort, destinationPort)
;

helper def: getBufferSize(destinationPort: AADLI!FeatureInstance) : Integer = 
	thisModule.theHOOK.getBufferSize(destinationPort)
;

unique lazy rule createIterationCounter
{
	from
		c: AADLI!ComponentInstance
	using{
			initial: String = '0';
	}
	to
		IterationCounter:AADLBA!DataSubcomponent (
		    name<-c.uniqueName()+'_IterationCounter',
			dataSubcomponentType <- 'Integer_16'.asClassifier('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													CounterInit
												)
									   }
		),
		CounterInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(initial)}
		)
	do
	{
		IterationCounter;
	}
}

helper def : PDC_RUNTIME_NAME : String = 'PeriodicDelayed_runtime';

abstract rule m_PeriodicDelayed_Port
{
	from
		fi: AADLI!FeatureInstance
		(fi.isPeriodicDelayedPort())
	do
	{
		--thisModule.addImportedUnit(thisModule.public(), 'PERIODICDELAYED_RUNTIME', 'PeriodicDelayed_runtime');
		thisModule.addImportedUnit(thisModule.public(), thisModule.PDC_RUNTIME_NAME.toUpper(), thisModule.PDC_RUNTIME_NAME);
	}
}

-- @extends m_PeriodicDelayed_Port,m_Thread_Output_Port_Instance
rule m_Thread_Output_PeriodicDelayed_Port
{
	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
		(
			fi.isPeriodicDelayedPort()
			and
			fi.isOutputFeature()
			and
			(cnxRef.destination.connectionEnd.isThreadPort()
				or cnxRef.source.connectionEnd.isThreadPort() ) 
		)
	using
	{
		CurrentDeadlineWriteTable: Sequence(Integer) = thisModule.getCurrentDeadlineWriteTable(fi, fi.srcConnectionInstance->any(e| e.connectionReference.first().connection = cnxRef).destination);
	}
	to
		-----------------------
		--- Data Subcomponents
		-----------------------
		CDWSizeInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
															CurrentDeadlineWriteTable->size().toString())}
		),
		CDWSize: AADLBA!DataSubcomponent (
		    name<-fi.getComponentInstance().name+'_'+fi.name+'_CDWSize_'+cnxRef.destination.connectionEnd.getContainingClassifier().name+'_'+cnxRef.destination.connectionEnd.name,
			dataSubcomponentType <- 'Integer_16'.asDataType('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													CDWSizeInit)
									   }
		)
}

-- @extends m_Thread_Output_PeriodicDelayed_Port
rule m_Thread_Output_PeriodicDelayed_IntraProcess_EventOrEventDataPort_Instance
{
  	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
		(
			fi.isEventOrEventDataPort()
			and
			(cnxRef.destination.connectionEnd.isThreadPort()
				or cnxRef.source.connectionEnd.isThreadPort())
		)
	using
	{
		cnxInst: AADLI!ComponentInstance = fi.srcConnectionInstance->any(e| e.connectionReference.first().connection = cnxRef);
		producerPort: AADLI!FeatureInstance = cnxInst.source;
	}
	to
		
		-----------------------
		--- Thread configuration
		-----------------------
		
		--- Buffer
		f: AADLBA!DataAccess
		(
			dataFeatureClassifier <- thisModule.resolveMatchedSingleIfExists(cnxInst.destination, 'bufferArrayImpl'),
			kind<-#requires
		),
		f_entrypoint: AADLBA!DataAccess
		(
			dataFeatureClassifier <- thisModule.resolveMatchedSingleIfExists(cnxInst.destination, 'bufferArrayImpl'),
			kind<-#requires
		),
		buffer_DataSubcomponent_Holder: AADLBA!DataSubcomponentHolder
		(
			element<-thisModule.resolveMatchedSingleIfExists(cnxInst.destination, 'globalVariable')
		)
}

rule CreateDataComponentPrototypeActual(d: AADLBA!DataClassifier)
{
	to
		putValueOutputActual: AADLBA!ComponentPrototypeActual
		(
			category<-#data
		)
	do
	{
		putValueOutputActual.setSubcomponentType(d);
		putValueOutputActual;
	}
}

-- @extends m_PeriodicDelayed_Port,m_Output_Port_ComputeEntrypointCallSequence
rule m_Output_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_SendOutput
{
	from
		fi: AADLI!FeatureInstance,
		behavior: AADLI!SubprogramCallSequence,
		cnxRef: AADLI!PortConnection
		(
			behavior.isComputeEntryPointOf(fi.getComponentInstance())
		)
	using
	{
		Send_Output_Spg: AADLBA!SubprogramType = thisModule.Send_Output_Name.asSubprogramType('PERIODICDELAYED_RUNTIME');
	}
	to
		
		-----------------------
		--- Send_Output
		-----------------------
		callSendOutput: AADLBA!SubprogramCallAction
		(
			subprogram<-sendOutput_Spg_Holder,
			parameterLabels <- Sequence{iterationCounter_Data_Holder_SendOutput,CDWSize_Data_Holder_SendOutput}
		),
		sendOutput_Spg_Holder: AADLBA!CalledSubprogramHolder
		(
			element <- Send_Output_Spg
		),
		--- connect CDWSize
		CDWSize_Data_Holder_SendOutput: AADLBA!DataSubcomponentHolder
		(
			element<-thisModule.resolveMatchedTupleIfExists(Sequence{fi, cnxRef}, 'CDWSize')
		),
		
		--- connect IterationCounter
		iterationCounter_Data_Holder_SendOutput: AADLBA!DataSubcomponentHolder
		(
			element<-thisModule.createIterationCounter(fi.getComponentInstance())
		)
}

-- @extends m_PeriodicDelayed_Port,m_Thread_Input_Port_Instance
rule m_Input_PeriodicDelayed_Port
{
  	from
		fi: AADLI!FeatureInstance
	using
	{
		
		initial: String = '-1';
		
		CurrentPerionReadTable: Sequence(Integer) = thisModule.getCurrentPerionReadTable(fi);
		BufferSize: Integer = thisModule.getBufferSize(fi);
		ArrayDataType: AADLBA!SubprogramType = 'ArrayDataType'.asDataType('PERIODICDELAYED_RUNTIME');
		Next_Value_PrototypeSpg: AADLBA!SubprogramType = thisModule.Next_Value_Name.asSubprogramType('PERIODICDELAYED_RUNTIME');
		portAbsoluteName: String = thisModule.getProgrammationLanguageIdentifier(fi.getComponentInstancePath());
		Array_Prototype : AADLBA!DataClassifier = 'ArrayDataType'.asDataType('PERIODICDELAYED_RUNTIME');
	}
	to
		-----------------------
		--- Data Subcomponents
		-----------------------
		
		bufferArrayType: AADLBA!DataType
		(
			name <- 'bufferArrayImpl_'+fi.getComponentInstance().name+'_'+fi.name,
			ownedExtension <- indexArrayDataTypeExtension
		),
		bufferArrayImpl: AADLBA!DataImplementation
		(
			name <- 'bufferArrayImpl_'+fi.getComponentInstance().name+'_'+fi.name+'.impl',
			ownedPropertyAssociation <- Sequence {
												
--												thisModule.CreatePropertyAssociation
--												(
--												 	'Data_Representation',
--													'DATA_MODEL',
--													'Array'.asEnumeration('DATA_MODEL').asNamedValue()
--												),
--												
--												thisModule.CreatePropertyAssociation
--												(
--												 	'Base_Type',
--													'DATA_MODEL',
--													thisModule.CreateListValueFromClassifier(
--														'Integer_16'.asClassifier('BASE_TYPES')
--													)
--												),
												
												thisModule.CreatePropertyAssociation
												(
												 	'Dimension',
													'DATA_MODEL',
													thisModule.CreateListValueFromInteger(
														CurrentPerionReadTable->size())
												)
									   },
			ownedRealization <- thisModule.Realization(bufferArrayType) 
		),
		indexArrayDataTypeExtension: AADLBA!TypeExtension
		(
			extended <- Array_Prototype
		),
		globalVariable:AADLBA!DataSubcomponent
		(
			name<-fi.getComponentInstance().name+'_'+fi.name+'_Buffer',
			dataSubcomponentType <- bufferArrayImpl
		),
		
		BufferSizeInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
															BufferSize.toString())}
		),
		
		bufferSizeSubcomponent:AADLBA!DataSubcomponent
		(
			name<-fi.getComponentInstance().name+'_'+fi.name+'_BufferSize',
			dataSubcomponentType <- 'Integer_16'.asDataType('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
				thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													BufferSizeInit)
			}
		),
		
		CPRSizeInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
															CurrentPerionReadTable->size().toString())}
		),
		CPRSize: AADLBA!DataSubcomponent (
		    name<-fi.name+'_CPRSize',
			dataSubcomponentType <- 'Integer_16'.asDataType('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													CPRSizeInit)
									   }
		),
		lastIndexInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(initial)}
		),
		lastIndex:AADLBA!DataSubcomponent (
			name <- fi.name+'_lastIndex',
			dataSubcomponentType <- 'Integer_16'.asDataType('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													lastIndexInit)
									   }
		),
		readIndexInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(initial)}
		),
		readIndex:AADLBA!DataSubcomponent (
			name <- fi.name+'_readIndex',
			dataSubcomponentType <- 'Integer_16'.asDataType('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													readIndexInit)
									   }
		),
		IterationCounterInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(initial)}
		),
		-----------------------
		--- Thread configuration
		-----------------------
		
		--- Buffer
		f: AADLBA!DataAccess
		(
			dataFeatureClassifier <- bufferArrayImpl,
			kind<-#requires
		),
		f_entrypoint: AADLBA!DataAccess
		(
			dataFeatureClassifier <- bufferArrayImpl,
			kind<-#requires
		),
		
		
		-----------------------
		--- Receive_Input
		-----------------------
		extendedReceiveInputSpg: AADLBA!TypeExtension,
		receiveInputSpg: AADLBA!SubprogramType,
		
		-----------------------
		--- Next_Value
		-----------------------
		extendedNextValueSpg: AADLBA!TypeExtension
		(
			extended<-Next_Value_PrototypeSpg
		),
		nextValueSpg: AADLBA!SubprogramType
		(
			name <- Next_Value_PrototypeSpg.name+'_'+thisModule.getProgrammationLanguageIdentifier(fi.getComponentInstancePath()),
			ownedExtension <- extendedNextValueSpg,
			ownedPrototypeBinding <- Sequence{nextValueOutputPrototypeBinding}
		),
		nextValueOutputPrototypeBinding: AADLBA!ComponentPrototypeBinding
		(
			formal <- Next_Value_PrototypeSpg.ownedPrototype->any(e|e.name = 'output_type')
		)
	do
	{
		-- next is a workaround
		nextValueOutputPrototypeBinding.actual <- Sequence{thisModule.CreateDataComponentPrototypeActual(fi.feature.dataFeatureClassifier)};
	}
}


-- @extends m_Input_PeriodicDelayed_Port,m_Thread_IntraProcess_Input_Port_Instance
rule m_Thread_IntraProcess_Input_EventOrEventDataPort_PeriodicDelayed_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isEventOrEventDataPort()
		and
		fi.isIntraProcessFeatureInstance())
}

-- @extends m_Input_PeriodicDelayed_Port
rule m_Thread_IntraProcess_Input_DataPort_PeriodicDelayed_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isDataPort()
		and
		fi.isIntraProcessFeatureInstance())
}

-- @extends m_Thread_IntraProcess_Input_EventOrEventDataPort_PeriodicDelayed_Instance,m_Thread_DataOrEventDataPort_Input_Instance,m_Input_PeriodicDelayed_Port
rule m_Thread_IntraProcess_Input_EventDataPort_PeriodicDelayed_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isEventDataPort()
		and
		fi.isIntraProcessFeatureInstance())
}

-- @extends m_Thread_IntraProcess_Input_EventOrEventDataPort_PeriodicDelayed_Instance,m_Input_PeriodicDelayed_Port
rule m_Thread_IntraProcess_Input_EventPort_PeriodicDelayed_Instance
{
  	from
		fi: AADLI!FeatureInstance
		(fi.isEventPort()
		and
		fi.isIntraProcessFeatureInstance())
}
