--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm

module EventDataPorts_Mutex_ARINC653;
create OUT : AADLBA 	from 		IN : AADLI;

helper def : ARINC653_Package : String = 'PeriodicDelayedMutex_runtime';

-----------------------------------------------------------------------------------------------------
-- Platform-dependent resources (refine lock type on queues and lock/unlock suprograms)
-- Defined for ARINC653
-----------------------------------------------------------------------------------------------------

helper def: collectEventDataNextValueCalls(fi: AADLI!FeatureInstance, behavior:AADLI!SubprogramCallSequence, paramCnx:AADLBA!ParameterConnection): Sequence(AADLBA!SubprogramCall) =
	Sequence{
		thisModule.resolveTemp(Sequence{fi,behavior,paramCnx}, 'callLockNextValue'),
		thisModule.resolveTemp(Sequence{fi, behavior, paramCnx} ,'call'),
		thisModule.resolveTemp(Sequence{fi,behavior,paramCnx}, 'callUnlockNextValue')
	}
;

helper def: collectEventDataPutValueCalls(fi: AADLI!FeatureInstance, behavior:AADLI!SubprogramCallSequence, paramCnx:AADLBA!Connection, cnxInst:AADLI!ConnectionInstance): Sequence(AADLBA!SubprogramCall) =
	Sequence{
		thisModule.resolveTemp(Sequence{fi, behavior, paramCnx, cnxInst.connectionReference->first().connection}, 'callLockPutValue'),	
		thisModule.resolveTemp(Sequence{fi, behavior, paramCnx, cnxInst.connectionReference->first().connection} ,'call'),
		thisModule.resolveTemp(Sequence{fi, behavior, paramCnx, cnxInst.connectionReference->first().connection}, 'callUnlockPutValue')
	}
;

helper def : collectPeriodicDelayed_LocalVariables_Mutex_PFSpec(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!DataAccess) =
	c.featureInstance->select(e|e.isPeriodicDelayedPort())
	->collect(f|
		Sequence{
			thisModule.resolveTemp(f, 'infinityTimeOut'),
			thisModule.resolveTemp(f, 'semCallReturnCode')
		})
	->flatten()
;


helper def : collectPeriodicDelayed_LocalVariablesConnections_Mutex(c: AADLI!ComponentInstance): Sequence(AADLBA!AccessConnection) =
	c.featureInstance->select(e|e.isInputFeature() and e.isPeriodicDelayedPort())
	->collect(e|
		Sequence{
			thisModule.resolveTemp(e, 'cnxBuffer'), 
			thisModule.resolveTemp(e, 'cnxSize'),
			thisModule.resolveTemp(e, 'semaphoreEntryPointAccessCnx')
		}
	)->union(
		c.featureInstance->select(e|e.isPeriodicDelayedPort())
		->collect(fi | thisModule.resolveTemp(fi, 'semaphoreEntryPointAccessCnx'))
	)
;

helper def : collectPeriodicDelayed_GlobalVariablesAccesses_Mutex(c: AADLI!ComponentInstance): Sequence(AADLBA!DataAccess) =
	c.featureInstance->select(e| e.isPeriodicDelayedPort())
	->collect(e|
		thisModule.resolveTemp(e, 'semaphoreThreadDataAccess')
	)
;

helper def : collectPeriodicDelayed_LocalVariablesAccesses_Mutex(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!DataAccess) =
	c.featureInstance->select(e| e.isPeriodicDelayedPort())
	->collect(e|
		thisModule.resolveTemp(e, 'semaphoreEntryPointDataAccess')
	)
;

helper def : collectPeriodicDelayed_GlobalVariables_Mutex(c: AADLI!ComponentInstance): Sequence(AADLBA!DataSubcomponent) =
	c.featureInstance->select(e|e.isInputFeature() and e.isPeriodicDelayedPort())
	->collect(e|
		thisModule.resolveTemp(e, 'semaphoreGlobalVariable')
	)
;

helper def : collectPeriodicDelayed_GlobalVariablesConnections_Mutex(c: AADLI!ComponentInstance): Sequence(AADLBA!DataSubcomponent) =
	c.featureInstance->select(e|e.isInputFeature() and e.isPeriodicDelayedPort())
	->collect(e|
		thisModule.resolveTemp(e, 'semaphoreGVAccessCnx')
	)
	->union
	(
		c.featureInstance->select(e|e.isOutputFeature() and e.isPeriodicDelayedPort())
		->collect(fi |
						fi.srcConnectionInstance->collect
						(
							cnxInst | thisModule.resolveTemp(Sequence{fi, cnxInst.connectionReference->first().connection}, 'semaphoreGVAccessCnx')
						)
					)
	)
;

-- @extends m_Thread_IntraProcess_Input_EventDataPort_PeriodicDelayed_Instance_Mutex
rule m_Thread_IntraProcess_Input_EventDataPort_PeriodicDelayed_Instance_Mutex_ARINC653
{
  	from
		fi: AADLI!FeatureInstance
	using
	{
		semaphoreType: AADLI!DataType = 'Semaphore_Id_Type'.asDataType('ARINC653_RUNTIME');
		lockSemaphore: AADLI!SubprogramType = 'Wait_Semaphore'.asSubprogramType('ARINC653_RUNTIME');
		unlockSemaphore: AADLI!SubprogramType = 'Signal_Semaphore'.asSubprogramType('ARINC653_RUNTIME');
		semaphoreAccess: AADLBA!DataAccess = thisModule.resolveTemp(fi,'semaphoreEntryPointDataAccess');
		initValuePE: AADLBA!PropertyExpression = thisModule.toStringLiteral('0');
	}
	to
		semaphoreThreadDataAccess: AADLBA!DataAccess
		(
			name <- fi.name+'_semAccess',
			dataFeatureClassifier <- semaphoreType
		),
		semaphoreEntryPointAccessCnx: AADLBA!AccessConnection
		(
			source <- sourceSemEntryPointCE,
			destination <- destinationSemEntryPointCE,
			name <- fi.name+'_accessSem',
			accessCategory <- #data
		),
		sourceSemEntryPointCE: AADLBA!ConnectedElement
		(
			connectionEnd <- semaphoreThreadDataAccess
		),
		destinationSemEntryPointCE: AADLBA!ConnectedElement
		(
			connectionEnd <- semaphoreEntryPointDataAccess,
			context <- thisModule.resolveTemp(fi.getComponentInstance(), 'callEntryPoint')
		),
		semaphoreEntryPointDataAccess: AADLBA!DataAccess
		(
			name <- fi.name+'_semAccess',
			dataFeatureClassifier <- semaphoreType,
			kind<-#requires
		),
		---------------------------------------
		semaphoreGlobalVariable: AADLBA!DataSubcomponent
		(
			name <- fi.uniqueName()+'_sem',
			dataSubcomponentType <- semaphoreType
		),
		semaphoreGVAccessCnx: AADLBA!AccessConnection
		(
			source <- sourceSemGVCE,
			destination <- destinationSemGVCE,
			name <- fi.uniqueName()+'_accessSemGlobalVariable',
			accessCategory <- #data
		),
		sourceSemGVCE: AADLBA!ConnectedElement
		(
			connectionEnd <- semaphoreGlobalVariable
		),
		destinationSemGVCE: AADLBA!ConnectedElement
		(
			connectionEnd <- semaphoreThreadDataAccess,
			context <- thisModule.resolveTemp(fi.getComponentInstance(),'sub')
		),
		--------------
		callLockReceiveInputs: AADLBA!SubprogramCallAction
		(
			subprogram <- lockHolder,
			parameterLabels <- Sequence{semaphoreIdHolder_l, semaphoreTimeOutHolder_l, returnCodeHolder_l}			
		),
		lockHolder: AADLBA!CalledSubprogramHolder
		(
			element <- lockSemaphore
		),
		semaphoreIdHolder_l: AADLBA!DataAccessHolder
		(
			element <- semaphoreAccess
		),
		semaphoreTimeOutHolder_l: AADLBA!DataSubcomponentHolder
		(
			element <- infinityTimeOut
		),
		returnCodeHolder_l: AADLBA!DataSubcomponentHolder
		(
			element <- semCallReturnCode
		),
		semCallReturnCode: AADLBA!DataSubcomponent
		(
			name<-fi.feature.name+'_SemErrorCode',
			dataSubcomponentType<-thisModule.getRuntimeReturnType(),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation('Initial_Value','DATA_MODEL',thisModule.CreateListValueFromPropertyExpression(initValuePE))} 
		),
		callUnLockReceiveInputs: AADLBA!SubprogramCallAction
		(
			subprogram <- unlockHolder,
			parameterLabels <- Sequence{semaphoreIdHolder_ul,returnCodeHolder_ul}
		),
		unlockHolder: AADLBA!CalledSubprogramHolder
		(
			element <- unlockSemaphore
		),
		semaphoreIdHolder_ul: AADLBA!DataAccessHolder
		(
			element <- semaphoreAccess
		),
		returnCodeHolder_ul: AADLBA!DataSubcomponentHolder
		(
			element <- semCallReturnCode
		),
		infinityTimeOut: AADLBA!DataSubcomponent
		(
			name <- fi.name+'_semTimeOut',
			dataSubcomponentType <- 'System_Time_Type'.asDataType('ARINC653_RUNTIME'),
			ownedPropertyAssociation <- Sequence{
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													thisModule.CreateStringLiteralPropertyExpression('-1')
												)
									   }
		)
}

-- @extends m_Input_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_NextValue_Mutex
rule m_Input_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_NextValue_Mutex_ARINC653
{
	from
  		fi: AADLI!FeatureInstance,
		behavior: AADLI!SubprogramCallSequence,
		paramCnx: AADLI!ParameterConnection
	using
	{
		lockSemaphore: AADLI!SubprogramType = 'Wait_Semaphore'.asSubprogramType('ARINC653_RUNTIME');
		unlockSemaphore: AADLI!SubprogramType = 'Signal_Semaphore'.asSubprogramType('ARINC653_RUNTIME');
		semaphoreAccess: AADLBA!DataAccess = thisModule.resolveTemp(fi,'semaphoreEntryPointDataAccess');
		initValuePE: AADLBA!PropertyExpression = thisModule.toStringLiteral('0');
	}
  	to
		callLockNextValue: AADLBA!SubprogramCallAction
		(
			subprogram <- lockHolder,
			parameterLabels <- Sequence{semaphoreIdHolder_l, semaphoreTimeOutHolder_l, returnCodeHolder_l}			
		),
		lockHolder: AADLBA!CalledSubprogramHolder
		(
			element <- lockSemaphore
		),
		semaphoreIdHolder_l: AADLBA!DataAccessHolder
		(
			element <- semaphoreAccess
		),
		semaphoreTimeOutHolder_l: AADLBA!DataSubcomponentHolder
		(
			element <- thisModule.resolveTemp(fi, 'infinityTimeOut')
		),
		returnCodeHolder_l: AADLBA!DataSubcomponentHolder
		(
			element <- thisModule.resolveTemp(fi, 'semCallReturnCode')
		),
		callUnlockNextValue: AADLBA!SubprogramCallAction
		(
			subprogram <- unlockHolder,
			parameterLabels <- Sequence{semaphoreIdHolder_ul,returnCodeHolder_ul}
		),
		unlockHolder: AADLBA!CalledSubprogramHolder
		(
			element <- unlockSemaphore
		),
		semaphoreIdHolder_ul: AADLBA!DataAccessHolder
		(
			element <- semaphoreAccess
		),
		returnCodeHolder_ul: AADLBA!DataSubcomponentHolder
		(
			element <- thisModule.resolveTemp(fi, 'semCallReturnCode')
		)
}

-- @extends m_Thread_DataOrEventDataPort_Output_Instance
rule m_Output_EventOrEventDataPort_PeriodicDelayed_Mutex
{
	from
	  	fi: AADLI!FeatureInstance
		(fi.isPeriodicDelayedPort())
	using
	{
		semaphoreType: AADLI!DataType = 'Semaphore_Id_Type'.asDataType('ARINC653_RUNTIME');
		initValuePE: AADLBA!PropertyExpression = thisModule.toStringLiteral('0');
	}
	to
		semaphoreThreadDataAccess: AADLBA!DataAccess
		(
			name <- fi.name+'_semAccess',
			dataFeatureClassifier <- semaphoreType,
			kind<-#requires
		),
		semaphoreEntryPointAccessCnx: AADLBA!AccessConnection
		(
			source <- sourceSemEntryPointCE,
			destination <- destinationSemEntryPointCE,
			name <- fi.name+'_accessSem',
			accessCategory <- #data
		),
		sourceSemEntryPointCE: AADLBA!ConnectedElement
		(
			connectionEnd <- semaphoreThreadDataAccess
		),
		destinationSemEntryPointCE: AADLBA!ConnectedElement
		(
			connectionEnd <- semaphoreEntryPointDataAccess,
			context <- thisModule.resolveTemp(fi.getComponentInstance(), 'callEntryPoint')
		),
		semaphoreEntryPointDataAccess: AADLBA!DataAccess
		(
			name <- fi.name+'_semAccess',
			dataFeatureClassifier <- semaphoreType,
			kind <- #requires
		),
		infinityTimeOut: AADLBA!DataSubcomponent
		(
			name <- fi.name+'_semTimeOut',
			dataSubcomponentType <- 'System_Time_Type'.asDataType('ARINC653_RUNTIME'),
			ownedPropertyAssociation <- Sequence{
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													thisModule.CreateStringLiteralPropertyExpression('-1')
												)
									   }
		),
		semCallReturnCode: AADLBA!DataSubcomponent
		(
			name<-fi.feature.name+'_SemErrorCode',
			dataSubcomponentType<-thisModule.getRuntimeReturnType(),
			ownedPropertyAssociation <- Sequence{thisModule.CreatePropertyAssociation('Initial_Value','DATA_MODEL',thisModule.CreateListValueFromPropertyExpression(initValuePE))} 
		)
}
-- @extends m_Thread_Output_PeriodicDelayed_IntraProcess_EventOrEventDataPort_Instance_Mutex
rule m_Thread_Output_PeriodicDelayed_IntraProcess_EventOrEventDataPort_Instance_Mutex_ARINC
{
	from
	  	fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
	using
	{
		semaphoreType: AADLI!DataType = 'Semaphore_Id_Type'.asDataType('ARINC653_RUNTIME');
		cnxInst: AADLI!ComponentInstance = fi.srcConnectionInstance->any(e| e.connectionReference.first().connection = cnxRef);
		consumerPort: AADLI!FeatureInstance = cnxInst.destination;
	}
	to
		semaphoreGVAccessCnx: AADLBA!AccessConnection
		(
			source <- sourceSemGVCE,
			destination <- destinationSemGVCE,
			name <- fi.uniqueName()+'_accessSemGlobalVariable',
			accessCategory <- #data
		),
		sourceSemGVCE: AADLBA!ConnectedElement
		(
			connectionEnd <- thisModule.resolveTemp(consumerPort, 'semaphoreGlobalVariable')
		),
		destinationSemGVCE: AADLBA!ConnectedElement
		(
			connectionEnd <- thisModule.resolveTemp(fi, 'semaphoreThreadDataAccess'),
			context <- thisModule.resolveTemp(fi.getComponentInstance(),'sub')
		)
}

-- @extends m_Output_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_PutValue_Mutex
rule m_Output_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_PutValue_Mutex_ARINC653
{
	from
		fi: AADLI!FeatureInstance,
		behavior: AADLI!SubprogramCallSequence,
		paramCnx: AADLI!ParameterConnection,
		cnxRef: AADLI!PortConnection
		(
			fi.srcConnectionInstance->exists(e|e.connectionReference->first().connection = cnxRef)
		)
	using
	{
		cnxInst: AADLI!ComponentInstance = fi.srcConnectionInstance->any(e| e.connectionReference.first().connection = cnxRef);
		consumerPort: AADLI!FeatureInstance = cnxInst.destination;
		lockSemaphore: AADLI!SubprogramType = 'Wait_Semaphore'.asSubprogramType('ARINC653_RUNTIME');
		unlockSemaphore: AADLI!SubprogramType = 'Signal_Semaphore'.asSubprogramType('ARINC653_RUNTIME');
		semaphoreAccess: AADLBA!DataAccess = thisModule.resolveTemp(fi,'semaphoreEntryPointDataAccess');
	}
	to
		callLockPutValue: AADLBA!SubprogramCallAction
		(
			subprogram <- lockHolder,
			parameterLabels <- Sequence{semaphoreIdHolder_l, semaphoreTimeOutHolder_l, returnCodeHolder_l}			
		),
		lockHolder: AADLBA!CalledSubprogramHolder
		(
			element <- lockSemaphore
		),
		semaphoreIdHolder_l: AADLBA!DataAccessHolder
		(
			element <- semaphoreAccess
		),
		semaphoreTimeOutHolder_l: AADLBA!DataSubcomponentHolder
		(
			element <- thisModule.resolveTemp(fi, 'infinityTimeOut')
		),
		returnCodeHolder_l: AADLBA!DataSubcomponentHolder
		(
			element <- thisModule.resolveTemp(fi,'semCallReturnCode')
		),
		callUnlockPutValue: AADLBA!SubprogramCallAction
		(
			subprogram <- unlockHolder,
			parameterLabels <- Sequence{semaphoreIdHolder_ul,returnCodeHolder_ul}
		),
		unlockHolder: AADLBA!CalledSubprogramHolder
		(
			element <- unlockSemaphore
		),
		semaphoreIdHolder_ul: AADLBA!DataAccessHolder
		(
			element <- semaphoreAccess
		),
		returnCodeHolder_ul: AADLBA!DataSubcomponentHolder
		(
			element <- thisModule.resolveTemp(fi,'semCallReturnCode')
		)
}
-----------------------------------------------------------------------------------------------------