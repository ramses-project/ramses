--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm

module SharedRules_No_Mutex;
create OUT : AADLBA from IN : AADLI;

unique lazy rule createIterationCounter
{
	from
		c: AADLI!ComponentInstance
		(c.featureInstance->exists(e|e.isOutputFeature() and e.isPeriodicDelayedPort())
			or 
		 c.featureInstance->exists(e|e.isInputFeature() and e.isPeriodicDelayedPort()))
	using{
		initial: String = '0';
	}
	to
		IterationCounter:AADLBA!DataSubcomponent (
		    name<-c.uniqueName()+'_IterationCounter',
			dataSubcomponentType <- 'Integer_16'.asClassifier('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													CounterInit
												)
									   }
		),
		CounterInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(initial)}
		)
	do
	{
		IterationCounter;
	}
}

-- @extends m_PeriodicDelayed_Port,m_Output_Port_ComputeEntrypointCallSequence
rule m_Output_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_SendOutput
{
	from
		fi: AADLI!FeatureInstance,
		behavior: AADLI!SubprogramCallSequence,
		cnxRef: AADLI!PortConnection
		(
			behavior.isComputeEntryPointOf(fi.getComponentInstance())
		)
	using
	{
		Send_Output_Spg: AADLBA!SubprogramType = thisModule.Send_Output_Name.asSubprogramType('PERIODICDELAYED_RUNTIME');
	}
	to
		
		-----------------------
		--- Send_Output
		-----------------------
		callSendOutput: AADLBA!SubprogramCallAction
		(
			subprogram<-sendOutput_Spg_Holder,
			parameterLabels <- Sequence{iterationCounter_Data_Holder_SendOutput,CDWSize_Data_Holder_SendOutput}
		),
		sendOutput_Spg_Holder: AADLBA!CalledSubprogramHolder
		(
			element <- Send_Output_Spg
		),
		--- connect CDWSize
		CDWSize_Data_Holder_SendOutput: AADLBA!DataSubcomponentHolder
		(
			element<-thisModule.resolveMatchedTupleIfExists(Sequence{fi, cnxRef}, 'CDWSize')
		),
		
		--- connect IterationCounter
		iterationCounter_Data_Holder_SendOutput: AADLBA!DataSubcomponentHolder
		(
			element<-thisModule.createIterationCounter(fi.getComponentInstance())
		)
}

-- @extends m_PeriodicDelayed_Port,m_Thread_Input_Port_Instance
rule m_Input_PeriodicDelayed_Port_No_Mutex
{
  	from
		fi: AADLI!FeatureInstance
	using
	{
		
		initial: String = '-1';
		
		CurrentPerionReadTable: Sequence(Integer) = thisModule.getCurrentPerionReadTable(fi);
		BufferSize: Integer = thisModule.getBufferSize(fi);
		ArrayDataType: AADLBA!SubprogramType = 'ArrayDataType'.asDataType('PERIODICDELAYED_RUNTIME');
		Next_Value_PrototypeSpg: AADLBA!SubprogramType = thisModule.Next_Value_Name.asSubprogramType('PERIODICDELAYED_RUNTIME');
		portAbsoluteName: String = thisModule.getProgrammationLanguageIdentifier(fi.getComponentInstancePath());
		Array_Prototype : AADLBA!DataClassifier = 'ArrayDataType'.asDataType('PERIODICDELAYED_RUNTIME');
	}
	to
		-----------------------
		--- Data Subcomponents
		-----------------------
		
		bufferArrayType: AADLBA!DataType
		(
			name <- 'bufferArrayImpl_'+fi.getComponentInstance().name+'_'+fi.name,
			ownedExtension <- indexArrayDataTypeExtension
		),
		bufferArrayImpl: AADLBA!DataImplementation
		(
			name <- 'bufferArrayImpl_'+fi.getComponentInstance().name+'_'+fi.name+'.impl',
			ownedPropertyAssociation <- Sequence {
												
--												thisModule.CreatePropertyAssociation
--												(
--												 	'Data_Representation',
--													'DATA_MODEL',
--													'Array'.asEnumeration('DATA_MODEL').asNamedValue()
--												),
--												
--												thisModule.CreatePropertyAssociation
--												(
--												 	'Base_Type',
--													'DATA_MODEL',
--													thisModule.CreateListValueFromClassifier(
--														'Integer_16'.asClassifier('BASE_TYPES')
--													)
--												),
												
												thisModule.CreatePropertyAssociation
												(
												 	'Dimension',
													'DATA_MODEL',
													thisModule.CreateListValueFromInteger(
														CurrentPerionReadTable->size())
												)
									   },
			ownedRealization <- thisModule.Realization(bufferArrayType) 
		),
		indexArrayDataTypeExtension: AADLBA!TypeExtension
		(
			extended <- Array_Prototype
		),
		globalVariable:AADLBA!DataSubcomponent
		(
			name<-fi.getComponentInstance().name+'_'+fi.name+'_Buffer',
			dataSubcomponentType <- bufferArrayImpl
		),
		
		BufferSizeInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
															BufferSize.toString())}
		),
		
		bufferSizeSubcomponent:AADLBA!DataSubcomponent
		(
			name<-fi.getComponentInstance().name+'_'+fi.name+'_BufferSize',
			dataSubcomponentType <- 'Integer_16'.asDataType('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
				thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													BufferSizeInit)
			}
		),
		
		CPRSizeInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
															CurrentPerionReadTable->size().toString())}
		),
		CPRSize: AADLBA!DataSubcomponent (
		    name<-fi.name+'_CPRSize',
			dataSubcomponentType <- 'Integer_16'.asDataType('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													CPRSizeInit)
									   }
		),
		lastIndexInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(initial)}
		),
		lastIndex:AADLBA!DataSubcomponent (
			name <- fi.name+'_lastIndex',
			dataSubcomponentType <- 'Integer_16'.asDataType('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													lastIndexInit)
									   }
		),
		readIndexInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(initial)}
		),
		readIndex:AADLBA!DataSubcomponent (
			name <- fi.name+'_readIndex',
			dataSubcomponentType <- 'Integer_16'.asDataType('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													readIndexInit)
									   }
		),
		IterationCounterInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(initial)}
		),
		-----------------------
		--- Thread configuration
		-----------------------
		
		--- Buffer
		f: AADLBA!DataAccess
		(
			dataFeatureClassifier <- bufferArrayImpl,
			kind<-#requires
		),
		f_entrypoint: AADLBA!DataAccess
		(
			dataFeatureClassifier <- bufferArrayImpl,
			kind<-#requires
		),
		
		
		-----------------------
		--- Receive_Input
		-----------------------
		extendedReceiveInputSpg: AADLBA!TypeExtension,
		receiveInputSpg: AADLBA!SubprogramType,
		
		-----------------------
		--- Next_Value
		-----------------------
		extendedNextValueSpg: AADLBA!TypeExtension
		(
			extended<-Next_Value_PrototypeSpg
		),
		nextValueSpg: AADLBA!SubprogramType
		(
			name <- Next_Value_PrototypeSpg.name+'_'+thisModule.getProgrammationLanguageIdentifier(fi.getComponentInstancePath()),
			ownedExtension <- extendedNextValueSpg,
			ownedPrototypeBinding <- Sequence{nextValueOutputPrototypeBinding}
		),
		nextValueOutputPrototypeBinding: AADLBA!ComponentPrototypeBinding
		(
			formal <- Next_Value_PrototypeSpg.ownedPrototype->any(e|e.name = 'output_type')
		)
	do
	{
		-- next is a workaround
		nextValueOutputPrototypeBinding.actual <- Sequence{thisModule.CreateDataComponentPrototypeActual(fi.feature.dataFeatureClassifier)};
	}
}


-- @extends m_Thread_Output_PeriodicDelayed_Port
rule m_Thread_Output_PeriodicDelayed_Port_No_Mutex
{
	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
	using
	{
		CurrentDeadlineWriteTable: Sequence(Integer) = thisModule.getCurrentDeadlineWriteTable(fi, fi.srcConnectionInstance->any(e| e.connectionReference.first().connection = cnxRef).destination);
	}
	to
		-----------------------
		--- Data Subcomponents
		-----------------------
		CDWSizeInit: AADLBA!ListValue
		(
			ownedListElement <- Sequence{thisModule.CreateStringLiteralPropertyExpression(
															CurrentDeadlineWriteTable->size().toString())}
		),
		CDWSize: AADLBA!DataSubcomponent (
		    name<-fi.getComponentInstance().name+'_'+fi.name+'_CDWSize_'+cnxRef.destination.connectionEnd.getContainingClassifier().name+'_'+cnxRef.destination.connectionEnd.name,
			dataSubcomponentType <- 'Integer_16'.asDataType('BASE_TYPES'),
			ownedPropertyAssociation <- Sequence {
												thisModule.CreatePropertyAssociation(
												 	'Initial_Value',
													'DATA_MODEL',
													CDWSizeInit)
									   }
		)
}

-- @extends m_Thread_Output_PeriodicDelayed_IntraProcess_EventOrEventDataPort_Instance,m_Thread_Output_PeriodicDelayed_Port_No_Mutex
rule m_Thread_Output_PeriodicDelayed_IntraProcess_EventOrEventDataPort_Instance_No_Mutex
{
  	from
		fi: AADLI!FeatureInstance,
		cnxRef: AADLI!PortConnection
		(
			fi.isEventOrEventDataPort()
			and
			(cnxRef.destination.connectionEnd.isThreadPort()
				or cnxRef.source.connectionEnd.isThreadPort())
		)
	using
	{
		cnxInst: AADLI!ComponentInstance = fi.srcConnectionInstance->any(e| e.connectionReference.first().connection = cnxRef);
		producerPort: AADLI!FeatureInstance = cnxInst.source;
	}
	to
		
		-----------------------
		--- Thread configuration
		-----------------------
		
		--- Buffer
		f: AADLBA!DataAccess,
		buffer_DataSubcomponent_Holder: AADLBA!DataSubcomponentHolder
		(
			element<-thisModule.resolveMatchedSingleIfExists(cnxInst.destination, 'globalVariable')
		)
}

-- @extends m_PeriodicDelayed_Port,m_Input_EventDataPort_ComputeEntrypointCallSequence
rule m_Input_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_NextValue
{
  from
  	fi: AADLI!FeatureInstance,
	behavior: AADLI!SubprogramCallSequence,
	paramCnx: AADLI!ParameterConnection
  using
  {
	nextValueSpg: AADLBA!SubprogramType = thisModule.resolveMatchedSingleIfExists(fi, 'nextValueSpg');
  }
  to
	call: AADLBA!SubprogramCallAction
	(
		subprogram<-nextValueHolder,
		parameterLabels <- Sequence{readIndex_SubcomponentHolder,
									lastIndex_SubcomponentHolder,
									buffer_AccessHolder,
									output_AccessHolder,
									bufferSize_SubcomponentHolder,
									ErrorCode_Holder}
	),
	nextValueHolder: AADLBA!CalledSubprogramHolder
	(
		element <- nextValueSpg
	),
	
	
	--- connect output
	output_AccessHolder: AADLBA!DataAccessHolder
	(
		element<-thisModule.resolveMatchedSingleIfExists(fi, 'localVariable')
	),
	
	--- connect first
	readIndex_SubcomponentHolder: AADLBA!DataSubcomponentHolder
	(
		element<-thisModule.resolveMatchedSingleIfExists(fi, 'readIndex')
	),
	
	--- connect last
	lastIndex_SubcomponentHolder: AADLBA!DataSubcomponentHolder
	(
		element<-thisModule.resolveMatchedSingleIfExists(fi, 'lastIndex')
	),
	
	--- connect buffer
	buffer_AccessHolder: AADLBA!DataAccessHolder
	(
		element<-fi.retreiveEntrypointFeature()
	),

	--- connect bufferSize
	bufferSize_SubcomponentHolder: AADLBA!DataSubcomponentHolder
	(
		element<-thisModule.resolveMatchedSingleIfExists(fi, 'bufferSizeSubcomponent')
	),
	
	ErrorCode_Holder: AADLBA!DataSubcomponentHolder
	(
		element <- thisModule.CreateReturnSubcomponentFromPort(fi)
	)
}
