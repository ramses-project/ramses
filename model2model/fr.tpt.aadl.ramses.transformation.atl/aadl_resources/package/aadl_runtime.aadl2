package AADL_Runtime

public

with Base_Types, data_model;

data t_aadl_ressource
end t_aadl_ressource;

data t_aadl_exception_id
properties
  Data_Model::Data_Representation => Enum;
end t_aadl_exception_id;

data t_aadl_error_id
properties
  Data_Model::Data_Representation => Enum;
end t_aadl_error_id;


data t_aadl_port_id
properties
  Data_Model::Data_Representation => Enum;
end t_aadl_port_id;

data t_aadl_port_array
properties
  Data_Model::Data_Representation => Array;
  Data_Model::Base_Type => (classifier (t_aadl_port_id));
-- Dimension to be defined during thread generation 
-- Data_Model::Dimension => (queue size)
-- Data_Model::Initial_Value=>("ToBeCompleted","ToBeCompleted",...)
end t_aadl_port_array;

data t_aadl_thread_data_queue
end t_aadl_thread_data_queue;

data implementation t_aadl_thread_data_queue.impl
prototypes
  t_request: data;
subcomponents
  Size: data Base_Types::Integer;
  Offset: data Base_Types::Integer;
  Woffset: data Base_Types::Integer;
  UsedSize: data Base_Types::Integer;
  MostRecentValue: data t_request;
  Fresh: data Base_Types::Boolean;
end t_aadl_thread_data_queue.impl;

data t_aadl_thread_event_queue
end t_aadl_thread_event_queue;

data implementation t_aadl_thread_event_queue.impl
subcomponents
  HistoryOffset: data Base_Types::Integer;
  HistoryWOffset: data Base_Types::Integer;
  History: data t_aadl_port_array;
  IsEmpty: data Base_Types::Boolean;
  NEmpty: data Base_Types::Integer;
end t_aadl_thread_event_queue.impl;

data t_aadl_thread_event_queue_array
-- Array of thread queues to be ordered with respect to the aadl event port id of a thread
properties
  Data_Model::Data_Representation => Array;
  Data_Model::Base_Type => (classifier (t_aadl_thread_event_queue.impl));
-- Dimension to be defined during enclosing process generation 
-- Data_Model::Dimension => (number of threads)
-- Data_Model::Initial_Value=>("ToBeCompleted","ToBeCompleted",...)
end t_aadl_thread_event_queue_array;

data t_aadl_thread_data_queue_array
-- Array of thread queues to be ordered with respect to the aadl data port id of a thread
properties
  Data_Model::Data_Representation => Array;
  Data_Model::Base_Type => (classifier (t_aadl_thread_data_queue.impl));
-- Dimension to be defined during enclosing process generation 
-- Data_Model::Dimension => (number of threads)
-- Data_Model::Initial_Value=>("ToBeCompleted","ToBeCompleted",...)
end t_aadl_thread_data_queue_array;

subprogram aadl_dispatch_condition
end aadl_dispatch_condition;

-- Application Runtime Services


------------------------------------------------------------------
------------------------------------------------------------------
-- Runtime Support For Ports
------------------------------------------------------------------
------------------------------------------------------------------

subprogram Send_Output 
features
  OutputPorts: in parameter t_aadl_port_id; -- List of ports whose output is transferred
  SendException: out event data port t_aadl_exception_id; -- exception if send fails to complete
end Send_Output;

subprogram Put_Value
prototypes
  t_request: data;
features
  PortVariable: requires data access t_aadl_thread_data_queue.impl; -- reference to port variable 
  DataValue: in parameter t_request; -- value to be stored
end Put_Value;

subprogram Receive_Input
features
  InputPorts: in parameter t_aadl_port_id; -- List of ports whose input is frozen 
end Receive_Input;

subprogram Get_Value
prototypes
  t_request: data;
features
  PortVariable: requires data access t_aadl_thread_data_queue.impl; -- reference to port variable
  DataValue: out parameter t_request; -- value being retrieved 
end Get_Value;

subprogram Get_Count
features
  PortVariable: requires data access t_aadl_thread_data_queue.impl; -- reference to port variable
  CountValue: out parameter Base_Types::Integer; -- content count of port variable
end Get_Count;

subprogram Next_Value
prototypes
  t_request: data;
features
  PortVariable: requires data access t_aadl_thread_data_queue.impl; -- reference to port variable
  DataValue: out parameter t_request; -- value being retrieved 
  NoValue: out event port; -- exception if no value is available
end Next_Value;

subprogram Updated
features
  PortVariable: in parameter t_aadl_port_id; -- reference to port variable 
  FreshFlag: out parameter Base_Types::Boolean; -- true if new arrivals
end Updated;

-- Runtime Executive Services

subprogram Get_Resource
features
  resource: in parameter t_aadl_ressource;
end Get_Resource;

subprogram Release_Resource
features
  resource: in parameter t_aadl_ressource;
end Release_Resource;

-- Predeclared threads ports: Complete,Error

subprogram Await_Dispatch
features
  -- List of ports whose output is sent at completion/deadline 
  OutputPorts: in parameter t_aadl_port_id;
  -- List of ports that can trigger a dispatch
  DispatchPorts: in parameter t_aadl_port_id;
  -- list of ports that did trigger a dispatch
  DispatchedPort: out parameter t_aadl_port_id;
  -- optional function as dispatch guard, takes port list as parameter
  DispatchConditionFunction: requires subprogram access aadl_dispatch_condition;
  -- List of ports whose input is received at dispatch
  InputPorts: in parameter t_aadl_port_id;
end Await_Dispatch;

subprogram Raise_Error
features
  errorID: in parameter t_aadl_error_id;
end Raise_Error;

subprogram Get_Error_Code
features
  errorID: out parameter t_aadl_error_id; 
end Get_Error_Code;

subprogram Stop_Process
end Stop_Process;

subprogram Abort_Process
end Abort_Process;

subprogram Stop_Virtual_Processor
end Stop_Virtual_Processor;

subprogram Abort_Virtual_Processor
end Abort_Virtual_Processor;

subprogram Stop_Processor
end Stop_Processor;

subprogram Abort_Processor
end Abort_Processor;

subprogram Stop_System
end Stop_System;

subprogram Abort_System
end Abort_System;


-- Next rutime calls are commented because they are not yet specified

--subprogram Await_Result
--features
--  CallID: in parameter <implementation-defined call ID>;
--end Await_Result;

--subprogram Current_System_Mode
--features
--  ModeID: out parameter <implementor-specific>; -- ID of the mode
--end Current_System_Mode;

--subprogram Set_System_Mode
--features
--  ModeID: in parameter <implementor-specific>; -- ID of the SOM 
--end Set_System_Mode;

--subprogram Current_System_Mode
--features
--  ModeID: out parameter <implementor-specific>; -- ID of the mode 
--end Current_System_Mode;

--subprogram Set_System_Mode
--features
--  ModeID: in parameter <implementor-specific>; -- ID of the SOM 
--end Set_System_Mode;

end AADL_Runtime;
