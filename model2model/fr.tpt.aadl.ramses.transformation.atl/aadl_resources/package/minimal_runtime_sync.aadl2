package Minimal_Runtime_Sync

public

with Timing_Properties, Data_Model, Base_Types, Minimal_Runtime_Types ;


-- Return the current date in nano second. Platform dependent.

subprogram Get_Current_Date

   features
   
   Current_Date : out parameter Minimal_Runtime_Types::Date ;

end Get_Current_Date ;


-- Block the caller until the given date. Platform dependent.

subprogram Wait_Next_Period

   prototypes

   Real_Time_Clock : feature ;
   
   features
   
   Period : in parameter Minimal_Runtime_Types::Date ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;

end Wait_Next_Period ;


-- Platform dependent.

subprogram Wait_For_Signal

   prototypes
   
   Monitor_Type : data ;
   
   features
   
   Monitor : requires data access Monitor_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;

end Wait_For_Signal ;


-- Platform dependent.

subprogram Signal

   prototypes
   
   Monitor_Type : data ;
   
   features
   
   Monitor : requires data access Monitor_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;

end Signal ;


-- Lock the given mutex. If the mutex is already locked, the current thread is suspended
-- until the mutex is unlocked. It is a classic reentrant mutex specifications.

subprogram Lock

   prototypes
   
   Mutex_Type : data ;
   
   features
   
   Mutex : requires data access Mutex_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
end Lock ;


-- Unlock the given mutex. If the mutex is not locked: nothing happens.
-- It is a classic reentrant mutex specifications.

subprogram Unlock

   prototypes
   
   Mutex_Type : data ;
   
   features
   
   Mutex : requires data access Mutex_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
end Unlock ;


subprogram Set_ICCP
-- TODO
end Set_ICCP ;


subprogram Unset_ICCP
-- TODO
end Unset_ICCP ;


end Minimal_Runtime_Sync ;
