package Minimal_Runtime_Transport

public

with Timing_Properties, Data_Model, Base_Types, Minimal_Runtime_Types, Minimal_Runtime_Port, Minimal_Runtime_Sync ;


subprogram Write_In

   features
   
   Dest_Node_Id : in parameter Base_Types::Unsigned_8 ;
   Dest_Port_Id : in parameter Base_Types::Unsigned_8 ;
   Sender_Node_Id : in parameter Base_Types::Unsigned_8 ;
   PayloadLength : in parameter Base_Types::Natural ;
   Buffer : provides data access Minimal_Runtime_Types::Buffer.impl ;
   
end Write_In ;


subprogram Send

   features
   
   Dest_Node_Id : in parameter Base_Types::Unsigned_8 ;
   Dest_Port_Id : in parameter Base_Types::Unsigned_8 ;
   Timestamp : in parameter Minimal_Runtime_Types::Date ;
   
end Send ;


-- Unmarshall the buffer into the given Item.
-- Set Item.Payload and Item.Timestamp.
subprogram Unmarshall

   prototypes
   
   Item_Type : data Minimal_Runtime_Types::Item.impl ;
   
   features
   
   Buffer : requires data access Minimal_Runtime_Types::Buffer.impl ;
   Item   : requires data access Item_Type ;
   
end Unmarshall ;


subprogram Event_Port_Deliver

   prototypes
   
   Unmarshall : subprogram Unmarshall ;
   Queue_Type : data Minimal_Runtime_Types::Queue.impl ;
   Item_Type : data Minimal_Runtime_Types::Item.impl ;
   Write_In : subprogram Minimal_Runtime_Port::Write_In ; -- it is what it needs ?????
   Enqueue : subprogram Minimal_Runtime_Port::Enqueue ;
   Monitor_Type : data ;
   Mutex_Type : data ;

   features
   
   Buffer : requires data access Minimal_Runtime_Types::Buffer.impl ;
   Queue : requires data access Queue_Type ;
   Monitor : requires data access Monitor_Type ;
   Pending_Events : requires data access Minimal_Runtime_Types::Pending_Event_Chain ;
   Mutex : requires data access Mutex_Type ;

   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
end Event_Port_Deliver ;


subprogram implementation Event_Port_Deliver.impl

   subcomponents
   
   Local_Item : data Item_Type ;

   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      -- transitions
      
      -- init_state -[TRUE]-> final_state
      -- {
         -- TODO
      -- } ; 
   **} ;

end Event_Port_Deliver.impl ;


subprogram Data_Port_Deliver

   prototypes
   
   Unmarshall : subprogram Unmarshall ;
   Port_Variable_Type : data Minimal_Runtime_Types::Data_Port_Variable.impl ;
   Item_Type : data Minimal_Runtime_Types::Item.impl ;
   Data_Port_Put_Value : subprogram Minimal_Runtime_Port::Data_Port_Put_Value ;
   Monitor_Type : data ;
   Signal : subprogram Minimal_Runtime_Sync::Signal ;

   features
   
   Buffer         : requires data access Minimal_Runtime_Types::Buffer.impl ;
   Port_Variable  : requires data access Port_Variable_Type ;
   Monitor        : requires data access Monitor_Type ;
   Pending_Events : requires data access Minimal_Runtime_Types::Pending_Event_Chain ;

   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
end Data_Port_Deliver ;


subprogram implementation Data_Port_Deliver.impl

   subcomponents
   
   Local_Item : data Item_Type ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         -- Data_Port_Put_Value ! (Port_Variable, Local_Item) ; -- need mutex information.
         Unmarshall ! (Buffer, Local_Item) ;
         Port_Variable.Is_Fresh := TRUE ;
         Minimal_Runtime_Port::Add_Pending_Event ! (Pending_Events, Local_Item.Link) ;
         Signal ! (Monitor)
      } ; 
   **} ;

end Data_Port_Deliver.impl ;

end Minimal_Runtime_Transport ;