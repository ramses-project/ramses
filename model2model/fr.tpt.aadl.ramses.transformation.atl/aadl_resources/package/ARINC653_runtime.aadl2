package arinc653_runtime
public

with Data_Model,Base_Types;

--------------------------------------------
--------------------------------------------
--               DATA TYPES               --
--------------------------------------------
--------------------------------------------

data APEX_UNSIGNED extends Base_Types::Unsigned_32
end APEX_UNSIGNED;

data APEX_INTEGER extends Base_Types::Integer_32
end APEX_INTEGER;

data PROCESS_ID_TYPE extends APEX_INTEGER
end PROCESS_ID_TYPE;

data SYSTEM_ADDRESS_TYPE
properties
  Source_Name => "SYSTEM_ADDRESS_TYPE";
  source_text => ("arinc653/types.h");
end SYSTEM_ADDRESS_TYPE;

data Message_Size_Type
properties
  Programming_Properties::Source_Name => "MESSAGE_SIZE_TYPE";
  Programming_Properties::Source_Text => ("arinc653/types.h", "arinc653/apex.ads");
end Message_Size_Type;

data Message_Range_Type
properties
  Programming_Properties::Source_Name => "MESSAGE_RANGE_TYPE";
  Programming_Properties::Source_Text => ("arinc653/types.h", "arinc653/apex.ads");
end Message_Range_Type;

data Return_Code_Type
properties
  Programming_Properties::Source_Name => "RETURN_CODE_TYPE";
  Programming_Properties::Source_Text => ("arinc653/types.h", "arinc653/apex.ads");
end Return_Code_Type;

data Message_Addr_Type
properties
  Programming_Properties::Source_Name => "MESSAGE_ADDR_TYPE";
  Programming_Properties::Source_Text => ("arinc653/types.h", "arinc653/apex.ads");
end Message_Addr_Type;

data System_Time_Type
properties
  Programming_Properties::Source_Name => "SYSTEM_TIME_TYPE";
  Programming_Properties::Source_Text => ("arinc653/types.h", "arinc653/apex.ads");
end System_Time_Type;

data Port_Direction_Type
properties
  Programming_Properties::Source_Name => "PORT_DIRECTION_TYPE";
  Programming_Properties::Source_Text => ("arinc653/types.h", "arinc653/apex.ads");
end Port_Direction_Type;

data Queuing_Discipline_Type
properties
  Programming_Properties::Source_Name => "QUEUING_DISCIPLINE_TYPE";
  Programming_Properties::Source_Text => ("arinc653/types.h", "arinc653/apex.ads");
end Queuing_Discipline_Type;

data Waiting_Range_Type
properties
  Programming_Properties::Source_Name => "WAITING_RANGE_TYPE";
  Programming_Properties::Source_Text => ("arinc653/types.h", "arinc653/apex.ads");
end Waiting_Range_Type;


--------------------------------------------
--------------------------------------------
--          PROCESS MANAGEMENT            --
--------------------------------------------
--------------------------------------------

subprogram Stop_Self
properties
  Programming_Properties::Source_Name => "STOP_SELF";
  Programming_Properties::Source_Text => ("arinc653/process.h");  
end Stop_Self;

subprogram a_Stop
features
  PROCESS_ID : in parameter PROCESS_ID_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "STOP";
  Programming_Properties::Source_Text => ("arinc653/process.h");  
end a_Stop;

subprogram Start 
features
  PROCESS_ID : in parameter PROCESS_ID_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "START";
  Programming_Properties::Source_Text => ("arinc653/process.h");  
end Start;


--------------------------------------------
--------------------------------------------
--         PARTITION MANAGEMENT           --
--------------------------------------------
--------------------------------------------

data OPERATING_MODE_TYPE
properties
  Data_Model::Data_Representation => Enum;
  Data_Model::Enumerators => ("IDLE", "COLD_START", "WARM_START", "NORMAL");
  Programming_Properties::Source_Name => "OPERATING_MODE_TYPE";
  Programming_Properties::Source_Text => ("arinc653/partition.h"); 
end OPERATING_MODE_TYPE;

subprogram Set_Partition_Mode
features
  OPERATING_MODE : in parameter OPERATING_MODE_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "SET_PARTITION_MODE";
  Programming_Properties::Source_Text => ("arinc653/partition.h");  
end Set_Partition_Mode;


--------------------------------------------
--------------------------------------------
--            TIME MANAGEMENT             --
--------------------------------------------
--------------------------------------------

subprogram Timed_Wait
features
  DELAY_TIME : in parameter System_Time_Type;
  RETURN_CODE : out parameter Return_Code_Type;
properties
  Programming_Properties::Source_Name => "TIMED_WAIT";
  Programming_Properties::Source_Text => ("arinc653/time.h", "arinc653/apex-timing.ads");  
end Timed_Wait;
--------------------------------------------
--------------------------------------------
--                 BUFFER                 --
--------------------------------------------
--------------------------------------------

 
-- #define  MAX_NUMBER_OF_BUFFERS    SYSTEM_LIMIT_NUMBER_OF_BUFFERS

data Buffer_Name_Type
properties
  Programming_Properties::Source_Name => "BUFFER_NAME_TYPE";
  Programming_Properties::Source_Text => ("arinc653/buffer.h", "arinc653/apex-buffers.ads");
end Buffer_Name_Type;

data Buffer_Id_Type
properties
  Programming_Properties::Source_Name => "BUFFER_ID_TYPE";
  Programming_Properties::Source_Text => ("arinc653/buffer.h", "arinc653/apex-buffers.ads");
end Buffer_Id_Type;

data Buffer_Status_Type
properties
  Programming_Properties::Source_Name => "BUFFER_STATUS_TYPE";
  Programming_Properties::Source_Text => ("arinc653/buffer.h", "arinc653/apex-buffers.ads");
end Buffer_Status_Type;

data implementation Buffer_Status_Type.impl
subcomponents
  NB_MESSAGE: data Message_Range_Type;
  MAX_NB_MESSAGE: data Message_Range_Type;
  MAX_MESSAGE_SIZE : data Message_Size_Type;
  WAITING_PROCESSES : data Waiting_Range_Type;
end Buffer_Status_Type.impl;


subprogram Create_Buffer
features
  BUFFER_NAME: in parameter BUFFER_NAME_TYPE;
  MAX_MESSAGE_SIZE: in parameter MESSAGE_SIZE_TYPE;
  MAX_NB_MESSAGE: in parameter MESSAGE_RANGE_TYPE;
  QUEUING_DISCIPLINE: in parameter QUEUING_DISCIPLINE_TYPE;
  BUFFER_ID: out parameter BUFFER_ID_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "CREATE_BUFFER";
  Programming_Properties::Source_Text => ("arinc653/buffer.h", "arinc653/apex-buffers.ads");
end Create_Buffer;

subprogram Send_Buffer
prototypes
  MESSAGE_TYPE: data;
features
  BUFFER_ID: requires data access BUFFER_ID_TYPE {Access_Right=>read_only;};
  MESSAGE_ADDR: in out parameter MESSAGE_TYPE;
  LENGTH: in parameter MESSAGE_SIZE_TYPE;
  TIME_OUT: in parameter SYSTEM_TIME_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "SEND_BUFFER";
  Programming_Properties::Source_Text => ("arinc653/buffer.h", "arinc653/apex-buffers.ads");
end Send_Buffer;
 
subprogram Receive_Buffer
prototypes
  MESSAGE_TYPE: data;
features
  BUFFER_ID: requires data access BUFFER_ID_TYPE {Access_Right=>read_only;};
  TIME_OUT: in parameter SYSTEM_TIME_TYPE;
  MESSAGE_ADDR: out parameter MESSAGE_TYPE;
  LENGTH: out parameter MESSAGE_SIZE_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "RECEIVE_BUFFER";
  Programming_Properties::Source_Text => ("arinc653/buffer.h", "arinc653/apex-buffers.ads");
end Receive_Buffer;

subprogram Get_Buffer_Id
features
  BUFFER_NAME: requires data access BUFFER_ID_TYPE {Access_Right=>read_only;};
  BUFFER_ID: out parameter BUFFER_ID_TYPE; 
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "GET_BUFFER_ID";
  Programming_Properties::Source_Text => ("arinc653/buffer.h", "arinc653/apex-buffers.ads");
end Get_Buffer_Id;
 
subprogram Get_Buffer_Status
features
  BUFFER_ID: requires data access BUFFER_ID_TYPE {Access_Right=>read_only;};
  BUFFER_STATUS: out parameter BUFFER_STATUS_TYPE; 
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "GET_BUFFER_STATUS";
  Programming_Properties::Source_Text => ("arinc653/buffer.h", "arinc653/apex-buffers.ads");
end Get_Buffer_Status;


--------------------------------------------
--------------------------------------------
--                  EVENT                 --
--------------------------------------------
--------------------------------------------


data Event_Id_Type
properties
  Programming_Properties::Source_Name => "EVENT_ID_TYPE";
  Programming_Properties::Source_Text => ("arinc653/event.h", "arinc653/apex-events.ads");
end Event_Id_Type;

data Event_State_Value_Type
properties
  Programming_Properties::Source_Name => "EVENT_STATE_VALUE_TYPE";
  Programming_Properties::Source_Text => ("arinc653/event.h", "arinc653/apex-events.ads");
end Event_State_Value_Type;

data Event_State_Type
properties
  Programming_Properties::Source_Name => "EVENT_STATE_TYPE";
  Programming_Properties::Source_Text => ("arinc653/event.h", "arinc653/apex-events.ads");
end Event_State_Type;

data Event_Name_Type
properties
  Programming_Properties::Source_Name => "EVENT_NAME_TYPE";
  Programming_Properties::Source_Text => ("arinc653/event.h", "arinc653/apex-events.ads");
end Event_Name_Type;

data Event_Status_Type
properties
  Programming_Properties::Source_Name => "EVENT_STATUS_TYPE";
  Programming_Properties::Source_Text => ("arinc653/event.h", "arinc653/apex-events.ads");
end Event_Status_Type;

subprogram Create_Event
features
  EVENT_NAME: in parameter EVENT_NAME_TYPE;
  EVENT_ID: out parameter EVENT_ID_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "CREATE_EVENT";
  Programming_Properties::Source_Text => ("arinc653/event.h", "arinc653/apex-events.ads");
end Create_Event;

subprogram Set_Event
features
  EVENT_ID: requires data access EVENT_ID_TYPE {Access_Right=>read_only;};
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "SET_EVENT";
  Programming_Properties::Source_Text => ("arinc653/event.h", "arinc653/apex-events.ads");
end Set_Event;

subprogram Reset_Event
features
  EVENT_ID: requires data access EVENT_ID_TYPE {Access_Right=>read_only;};
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "RESET_EVENT";
  Programming_Properties::Source_Text => ("arinc653/event.h", "arinc653/apex-events.ads");
end Reset_Event;

subprogram Wait_Event
features
  EVENT_ID: requires data access EVENT_ID_TYPE {Access_Right=>read_only;};
  TIME_OUT: in parameter SYSTEM_TIME_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "WAIT_EVENT";
  Programming_Properties::Source_Text => ("arinc653/event.h", "arinc653/apex-events.ads");
end Wait_Event;

subprogram Get_Event_Id
features
  EVENT_NAME: in parameter EVENT_NAME_TYPE;
  EVENT_ID: out parameter EVENT_ID_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "GET_EVENT_ID";
  Programming_Properties::Source_Text => ("arinc653/event.h", "arinc653/apex-events.ads");
end Get_Event_Id;

subprogram Get_Event_Status
features
  EVENT_ID: in parameter EVENT_ID_TYPE;
  EVENT_STATUS: out parameter EVENT_STATUS_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "GET_EVENT_STATUS";
  Programming_Properties::Source_Text => ("arinc653/event.h", "arinc653/apex-events.ads");
end Get_Event_Status;

--------------------------------------------
--------------------------------------------
--             QUEUEING PORT              --
--------------------------------------------
--------------------------------------------

data Queuing_Port_Name_Type
properties
  Programming_Properties::Source_Name => "NAME_TYPE";
  Programming_Properties::Source_Text => ("arinc653/queueing.h", "arinc653/apex-queuing.ads");
end Queuing_Port_Name_Type;

data Queuing_Port_Id_Type
properties
  Programming_Properties::Source_Name => "APEX_INTEGER";
  Programming_Properties::Source_Text => ("arinc653/queueing.h", "arinc653/apex-queuing.ads");
end Queuing_Port_Id_Type;

data Queuing_Port_Status_Type
properties
  Data_Model::Data_Representation => Struct;
  Programming_Properties::Source_Name => "QUEUING_PORT_STATUS_TYPE";
  Programming_Properties::Source_Text => ("arinc653/queueing.h", "arinc653/apex-queuing.ads");
end Queuing_Port_Status_Type;

data implementation Queuing_Port_Status_Type.impl
subcomponents
  NB_MESSAGE: data MESSAGE_RANGE_TYPE;
  MAX_NB_MESSAGE: data MESSAGE_RANGE_TYPE;
  MAX_MESSAGE_SIZE: data MESSAGE_SIZE_TYPE;
  PORT_DIRECTION: data PORT_DIRECTION_TYPE;
  WAITING_PROCESSES: data WAITING_RANGE_TYPE;
end Queuing_Port_Status_Type.impl;

subprogram Create_Queuing_Port
features
  QUEUING_PORT_NAME: in parameter QUEUING_PORT_NAME_TYPE;
  MAX_MESSAGE_SIZE: in parameter MESSAGE_SIZE_TYPE;
  MAX_NB_MESSAGE: in parameter MESSAGE_RANGE_TYPE;
  PORT_DIRECTION: in parameter PORT_DIRECTION_TYPE;
  QUEUING_DISCIPLINE: in parameter QUEUING_DISCIPLINE_TYPE;
  QUEUING_PORT_ID: out parameter QUEUING_PORT_ID_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "CREATE_QUEUING_PORT";
  Programming_Properties::Source_Text => ("arinc653/queueing.h", "arinc653/apex-queuing.ads");
end Create_Queuing_Port;


subprogram Send_Queuing_Message
prototypes
  MESSAGE_TYPE: data;
features
  QUEUING_PORT_ID: requires data access QUEUING_PORT_ID_TYPE {Access_Right=>read_only;};
  MESSAGE_ADDR: in out parameter MESSAGE_TYPE;
  LENGTH: in parameter MESSAGE_SIZE_TYPE;
  TIME_OUT: in parameter SYSTEM_TIME_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "SEND_QUEUING_MESSAGE";
  Programming_Properties::Source_Text => ("arinc653/queueing.h", "arinc653/apex-queuing.ads");
end Send_Queuing_Message;

subprogram Receive_Queuing_Message
prototypes
  MESSAGE_TYPE: data;
features
  QUEUING_PORT_ID: requires data access QUEUING_PORT_ID_TYPE {Access_Right=>read_only;};
  TIME_OUT: in parameter SYSTEM_TIME_TYPE;
  MESSAGE_ADDR: out parameter MESSAGE_TYPE;
  LENGTH: out parameter MESSAGE_SIZE_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "RECEIVE_QUEUING_MESSAGE";
  Programming_Properties::Source_Text => ("arinc653/queueing.h", "arinc653/apex-queuing.ads");
end Receive_Queuing_Message;

subprogram Get_Queuing_Port_Id
features
  QUEUING_PORT_NAME: in parameter QUEUING_PORT_NAME_TYPE;
  QUEUING_PORT_ID: out parameter QUEUING_PORT_ID_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "GET_QUEUING_PORT_ID";
  Programming_Properties::Source_Text => ("arinc653/queueing.h", "arinc653/apex-queuing.ads");
end Get_Queuing_Port_Id;

subprogram Get_Queuing_Port_Status
features
  QUEUING_PORT_ID: in parameter QUEUING_PORT_ID_TYPE;
  QUEUING_PORT_STATUS: out parameter QUEUING_PORT_STATUS_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "GET_QUEUING_PORT_STATUS";
  Programming_Properties::Source_Text => ("arinc653/queueing.h", "arinc653/apex-queuing.ads");
end Get_Queuing_Port_Status;

subprogram Get_Queueing_Port_Count
features
  QUEUING_PORT_ID: in parameter QUEUING_PORT_ID_TYPE;
  NB_MESSAGE: out parameter MESSAGE_RANGE_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
annex behavior_specification {**
  VARIABLES
    STATUS: Queuing_Port_Status_Type.impl;
  STATES
  	singleton: initial final state;
  TRANSITIONS
    t: singleton -[]-> singleton
    {
      Get_Queuing_Port_Status!(QUEUING_PORT_ID, STATUS, RETURN_CODE);
      NB_MESSAGE := STATUS.NB_MESSAGE
    };
**};
end Get_Queueing_Port_Count;
--------------------------------------------
--------------------------------------------
--             SAMPLING PORT              --
--------------------------------------------
--------------------------------------------

data Sampling_Port_Name_Type
properties
  Programming_Properties::Source_Name => "SAMPLING_PORT_NAME_TYPE";
  Programming_Properties::Source_Text => ("arinc653/sampling.h", "arinc653/apex-sampling.ads");
end Sampling_Port_Name_Type;

data Sampling_Port_Id_Type
properties
  Programming_Properties::Source_Name => "SAMPLING_PORT_ID_TYPE";
  Programming_Properties::Source_Text => ("arinc653/sampling.h", "arinc653/apex-sampling.ads");
end Sampling_Port_Id_Type;

data Validity_Type
properties
  Programming_Properties::Source_Name => "VALIDITY_TYPE";
  Programming_Properties::Source_Text => ("arinc653/sampling.h", "arinc653/apex-sampling.ads");
end Validity_Type;

data Sampling_Port_Status_Type
properties
  Programming_Properties::Source_Name => "SAMPLING_PORT_STATUS_TYPE";
  Programming_Properties::Source_Text => ("arinc653/sampling.h", "arinc653/apex-sampling.ads");
end Sampling_Port_Status_Type;

subprogram Create_Sampling_Port
features
  SAMPLING_PORT_NAME: in parameter SAMPLING_PORT_NAME_TYPE;
  MAX_MESSAGE_SIZE: in parameter MESSAGE_SIZE_TYPE;
  PORT_DIRECTION: in parameter PORT_DIRECTION_TYPE ;
  REFRESH_PERIOD: in parameter SYSTEM_TIME_TYPE;
  SAMPLING_PORT_ID: out parameter SAMPLING_PORT_ID_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "CREATE_SAMPLING_PORT";
  Programming_Properties::Source_Text => ("arinc653/sampling.h", "arinc653/apex-sampling.ads");
end Create_Sampling_Port;
 
subprogram Write_Sampling_Message
prototypes
  MESSAGE_TYPE: data;
features
  SAMPLING_PORT_ID: requires data access SAMPLING_PORT_ID_TYPE {Access_Right=>read_only;};
  MESSAGE_ADDR:  in out parameter MESSAGE_TYPE;
  LENGTH:  in parameter MESSAGE_SIZE_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "WRITE_SAMPLING_MESSAGE";
  Programming_Properties::Source_Text => ("arinc653/sampling.h", "arinc653/apex-sampling.ads");
end Write_Sampling_Message;

subprogram Read_Sampling_Message
prototypes
  MESSAGE_TYPE: data;
features
  SAMPLING_PORT_ID: requires data access SAMPLING_PORT_ID_TYPE {Access_Right=>read_only;};
  MESSAGE_ADDR: out parameter MESSAGE_TYPE;
  LENGTH:  in parameter MESSAGE_SIZE_TYPE;
  VALIDITY: out parameter VALIDITY_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "READ_SAMPLING_MESSAGE";
  Programming_Properties::Source_Text => ("arinc653/sampling.h", "arinc653/apex-sampling.ads");
end Read_Sampling_Message;

subprogram Get_Sampling_Port_Id
features
  SAMPLING_PORT_NAME: in parameter SAMPLING_PORT_NAME_TYPE;
  SAMPLING_PORT_ID: out parameter SAMPLING_PORT_ID_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "GET_SAMPLING_PORT_ID";
  Programming_Properties::Source_Text => ("arinc653/sampling.h", "arinc653/apex-sampling.ads");
end Get_Sampling_Port_Id;

subprogram Get_Sampling_Port_Status
features
  SAMPLING_PORT_ID: in parameter SAMPLING_PORT_ID_TYPE;
  SAMPLING_PORT_STATUS: out parameter SAMPLING_PORT_STATUS_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "GET_SAMPLING_PORT_STATUS";
  Programming_Properties::Source_Text => ("arinc653/sampling.h", "arinc653/apex-sampling.ads");
end Get_Sampling_Port_Status;



--------------------------------------------
--------------------------------------------
--              BLACKBOARD                --
--------------------------------------------
--------------------------------------------

data Blackboard_Name_Type
properties
  Programming_Properties::Source_Name => "BLACKBOARD_NAME_TYPE";
  Programming_Properties::Source_Text => ("arinc653/blackboard.h", "arinc653/apex-blackboards.ads");
end Blackboard_Name_Type;

data Blackboard_Id_Type
properties
  Programming_Properties::Source_Name => "BLACKBOARD_ID_TYPE";
  Programming_Properties::Source_Text => ("arinc653/blackboard.h", "arinc653/apex-blackboards.ads");
end Blackboard_Id_Type;

subprogram Periodic_Wait
features
  RETURN_CODE: out parameter RETURN_CODE_TYPE ;
properties
  Programming_Properties::Source_Name => "PERIODIC_WAIT";
  Programming_Properties::Source_Text => ("arinc653/time.h", "arinc653/apex-timing.ads");
  Compute_Execution_Time => 1 Ms .. 1 Ms;
end Periodic_Wait;

data Blackboard_Status_Type
properties
  Programming_Properties::Source_Name => "BLACKBOARD_STATUS_TYPE";
  Programming_Properties::Source_Text => ("arinc653/blackboard.h", "arinc653/apex-blackboards.ads");
end Blackboard_Status_Type;

subprogram Create_Blackboard
features
  BLACKBOARD_NAME: in parameter BLACKBOARD_NAME_TYPE ;
  MAX_MESSAGE_SIZE: in parameter MESSAGE_SIZE_TYPE ;
  BLACKBOARD_ID: in out parameter BLACKBOARD_ID_TYPE ;
  RETURN_CODE: out parameter RETURN_CODE_TYPE ;
properties
  Programming_Properties::Source_Name => "Create_Blackboard";
  Programming_Properties::Source_Text => ("arinc653/blackboard.h", "arinc653/apex-blackboards.ads");
end Create_Blackboard;
       
subprogram Display_Blackboard
prototypes
  MESSAGE_TYPE: data;
features
   BLACKBOARD_ID: requires data access BLACKBOARD_ID_TYPE {Access_Right=>read_only;};
   MESSAGE_ADDR: in out parameter MESSAGE_TYPE ;
   LENGTH: in parameter MESSAGE_SIZE_TYPE ;
   RETURN_CODE: out parameter RETURN_CODE_TYPE ;
properties
  Programming_Properties::Source_Name => "DISPLAY_BLACKBOARD";
  Programming_Properties::Source_Text => ("arinc653/blackboard.h", "arinc653/apex-blackboards.ads");
annex behavior_specification {**
	states
		s:initial final state;
	transitions
		t: s-[]->s{
			computation(4 us .. 5 us);
			BLACKBOARD_ID!<;
			computation(1ms..2ms);
			BLACKBOARD_ID!>
		};
**};
end Display_Blackboard;

subprogram Read_Blackboard
prototypes
  MESSAGE_TYPE: data;
features
  BLACKBOARD_ID: requires data access BLACKBOARD_ID_TYPE { Access_Right=>read_only; Concurrency_Control_Protocol => Priority_Ceiling; };
  TIME_OUT: in parameter SYSTEM_TIME_TYPE ;
  MESSAGE_ADDR: out parameter MESSAGE_TYPE ;
  LENGTH: out parameter MESSAGE_SIZE_TYPE ;
  RETURN_CODE: out parameter RETURN_CODE_TYPE ;
properties
  Programming_Properties::Source_Name => "READ_BLACKBOARD";
  Programming_Properties::Source_Text => ("arinc653/blackboard.h", "arinc653/apex-blackboards.ads");
annex behavior_specification {**
	states
		s:initial final state;
	transitions
		t: s-[]->s{
			computation(4 us .. 5 us);
			BLACKBOARD_ID!<;
			computation(1ms..2ms);
			BLACKBOARD_ID!>
		};
**};
end Read_Blackboard;

subprogram Clear_Blackboard
features
  BLACKBOARD_ID: in parameter BLACKBOARD_ID_TYPE ;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "CLEAR_BLACKBOARD";
  Programming_Properties::Source_Text => ("arinc653/blackboard.h", "arinc653/apex-blackboards.ads");
end Clear_Blackboard;

subprogram Get_Blackboard_Id
features
 BLACKBOARD_NAME: in parameter BLACKBOARD_NAME_TYPE ;
 BLACKBOARD_ID: out parameter BLACKBOARD_ID_TYPE ;
 RETURN_CODE: out parameter RETURN_CODE_TYPE ;
properties
  Programming_Properties::Source_Name => "GET_BLACKBOARD_ID";
  Programming_Properties::Source_Text => ("arinc653/blackboard.h", "arinc653/apex-blackboards.ads");
end Get_Blackboard_Id;

subprogram Get_Blackboard_Status
features
  BLACKBOARD_ID: in parameter BLACKBOARD_ID_TYPE ;
  BLACKBOARD_STATUS: out parameter BLACKBOARD_STATUS_TYPE ;
  RETURN_CODE: out parameter RETURN_CODE_TYPE ;
properties
  Programming_Properties::Source_Name => "GET_BLACKBOARD_STATUS";
  Programming_Properties::Source_Text => ("arinc653/blackboard.h", "arinc653/apex-blackboards.ads");
end Get_Blackboard_Status;

--------------------------------------------
--------------------------------------------
--              SEMAPHORE                 --
--------------------------------------------
--------------------------------------------

data Semaphore_Name_Type
properties
  Programming_Properties::Source_Name => "SEMAPHORE_NAME_TYPE";
  Programming_Properties::Source_Text => ("arinc653/semaphore.h", "arinc653/apex-semaphore.ads");
end Semaphore_Name_Type;

data Semaphore_Id_Type
properties
  Programming_Properties::Source_Name => "SEMAPHORE_ID_TYPE";
  Programming_Properties::Source_Text => ("arinc653/semaphore.h", "arinc653/apex-semaphore.ads");
end Semaphore_Id_Type;

data Semaphore_Value_Type
properties
  Programming_Properties::Source_Name => "SEMAPHORE_VALUE_TYPE";
  Programming_Properties::Source_Text => ("arinc653/semaphore.h", "arinc653/apex-semaphore.ads");
end Semaphore_Value_Type;

subprogram Create_Semaphore
features
  SEMAPHORE_NAME: in parameter SEMAPHORE_NAME_TYPE;
  CURRENT_VALUE: in parameter SEMAPHORE_VALUE_TYPE;
  MAXIMUM_VALUE: in parameter SEMAPHORE_VALUE_TYPE;
  QUEUING_DISCIPLINE : in parameter QUEUING_DISCIPLINE_TYPE;
  SEMAPHORE_ID: requires data access SEMAPHORE_ID_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "CREATE_SEMAPHORE";
  Programming_Properties::Source_Text => ("arinc653/semaphore.h", "arinc653/apex-semaphore.ads");
end Create_Semaphore;

subprogram Wait_Semaphore
features
  SEMAPHORE_ID: requires data access SEMAPHORE_ID_TYPE {Access_Right=>read_only;};
  TIME_OUT: in parameter SYSTEM_TIME_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "WAIT_SEMAPHORE";
  Programming_Properties::Source_Text => ("arinc653/semaphore.h", "arinc653/apex-semaphore.ads");
end Wait_Semaphore;

subprogram Signal_Semaphore
features
  SEMAPHORE_ID: requires data access SEMAPHORE_ID_TYPE {Access_Right=>read_only;};
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Programming_Properties::Source_Name => "SIGNAL_SEMAPHORE";
  Programming_Properties::Source_Text => ("arinc653/semaphore.h", "arinc653/apex-semaphore.ads");
end Signal_Semaphore;

--------------------------------------------
--------------------------------------------
--           HEALTH MONITORING            --
--------------------------------------------
--------------------------------------------

data ERROR_MESSAGE_TYPE
properties
  Source_Name => "ERROR_MESSAGE_TYPE";
  source_text => ("arinc653/error.h");
end ERROR_MESSAGE_TYPE;

data STACK_SIZE_TYPE extends APEX_UNSIGNED
end STACK_SIZE_TYPE;

data Error_Code_Type
properties
  Data_Model::Data_Representation => Enum;
  Data_Model::Enumerators => ("DEADLINE_MISSED",
  							  "APPLICATION_ERROR",
  							  "NUMERIC_ERROR",
  							  "ILLEGAL_REQUEST",
  							  "STACK_OVERFLOW",
  							  "MEMORY_VIOLATION",
  							  "HARDWARE_FAULT",
  							  "POWER_FAIL");
  Programming_Properties::Source_Name => "ERROR_CODE_TYPE";
  Programming_Properties::Source_Text => ("arinc653/error.h");  
end Error_Code_Type;


data Error_Status_Type
properties
  Data_Model::Data_Representation => Struct;
end Error_Status_Type;

data implementation Error_Status_Type.impl
subcomponents
  ERROR_CODE: data ERROR_CODE_TYPE;
  LENGTH: data MESSAGE_SIZE_TYPE;
  FAILED_PROCESS_ID: data PROCESS_ID_TYPE;
  FAILED_ADDRESS: data SYSTEM_ADDRESS_TYPE;
  MESSAGE: data ERROR_MESSAGE_TYPE;
properties
  Programming_Properties::Source_Name => "ERROR_STATUS_TYPE";
  Programming_Properties::Source_Text => ("arinc653/error.h");  
end Error_Status_Type.impl;

subprogram  Create_Error_Handler
features
  ENTRY_POINT: requires subprogram access;
  STACK_SIZE: in parameter STACK_SIZE_TYPE;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Source_Name => "CREATE_ERROR_HANDLER";
  source_text => ("arinc653/error.h");
end Create_Error_Handler;

subprogram Get_Error_Status
features
  ERROR_STATUS: out parameter ERROR_STATUS_TYPE.impl;
  RETURN_CODE: out parameter RETURN_CODE_TYPE;
properties
  Source_Name => "GET_ERROR_STATUS";
  source_text => ("arinc653/error.h");
end Get_Error_Status;


end arinc653_runtime;