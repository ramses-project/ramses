package PeriodicDelayedMutex_runtime
public

with AADL_Runtime;
with Base_Types;
with Data_Model;

---------------------------------------------------------------
-- Linked list types
---------------------------------------------------------------

-- Linked element

data t_aadl_linkedlist_link
properties
  Data_Model::Data_Representation => Struct;
end t_aadl_linkedlist_link;

data implementation t_aadl_linkedlist_link.impl
prototypes
  t_request: data;
subcomponents
  DataPtr   : data t_request -- pointer
              {
                 Data_Model::Data_Representation => Array;
                 Data_Model::Dimension => (0);
              };
              
  Timestamp : data Base_Types::Integer_16;
  Priority  : data Base_Types::Integer_16;
  
  Consumed  : data Base_Types::Boolean 
              { 
              	 Data_Model::Initial_Value => ("TRUE");
              };
  
  Previous  : data t_aadl_linkedlist_link_ptr.impl;
  Next      : data t_aadl_linkedlist_link_ptr.impl;
end t_aadl_linkedlist_link.impl;


-- Pointer on linked element

data t_aadl_linkedlist_link_ptr
end t_aadl_linkedlist_link_ptr;

data implementation t_aadl_linkedlist_link_ptr.impl
prototypes
  t_request: data;
properties
  Data_Model::Data_Representation => Array;
  Data_Model::Dimension => (0);
  Data_Model::Base_Type => (classifier(t_aadl_linkedlist_link.impl));
end t_aadl_linkedlist_link_ptr.impl;



-- Linked list structure

data t_aadl_thread_data_queue
properties
  Data_Model::Data_Representation => Array;
  Data_Model::Base_Type => (classifier(t_aadl_linkedlist_link.impl));
end t_aadl_thread_data_queue;

data implementation t_aadl_thread_data_queue.impl
prototypes
  t_request: data;
subcomponents
  Size: data Base_Types::Integer;
  UsedSize: data Base_Types::Integer;
  First: data t_aadl_linkedlist_link_ptr.impl;
  Free: data t_aadl_linkedlist_link_ptr.impl;
end t_aadl_thread_data_queue.impl;



---------------------------------------------------------------
-- Runtime Services
---------------------------------------------------------------

subprogram Get_Resource
features
  PortVariable: requires data access t_aadl_thread_data_queue.impl; -- Reference to port variable
end Get_Resource;

subprogram Release_Resource
features
  PortVariable: requires data access t_aadl_thread_data_queue.impl; -- Reference to port variable
end Release_Resource;


subprogram Put_Value
prototypes
  t_request: data;
features
  PortVariable    : requires data access t_aadl_thread_data_queue.impl; 
  DataValue       : requires data access t_request;
  CurrentDeadline : requires data access Base_Types::Integer_16;
  Priority        : requires data access Base_Types::Integer_16;
annex behavior_specification {**
  variables
    CurrentLink   : t_aadl_linkedlist_link_ptr.impl;
    AvailableLink : t_aadl_linkedlist_link_ptr.impl;
  states
    s: initial final state;
  transitions
    t: s -[]-> s
    {
      Get_Resource! (PortVariable);
      
      CurrentLink := PortVariable.First;
      while (not CurrentLink.Consumed and (CurrentLink.Timestamp < CurrentDeadline 
  			or (CurrentLink.Timestamp=CurrentDeadline and CurrentLink.Priority>Priority)))
      {
  	     CurrentLink := CurrentLink.Next
      };
      
      if (CurrentLink.Consumed)
      {
         -- The list is empty or the new data is the most recent
        
         CurrentLink.DataPtr   := DataValue;
         CurrentLink.Timestamp := CurrentDeadline;
         CurrentLink.Priority  := Priority;
         CurrentLink.Consumed  := FALSE;
         
         PortVariable.UsedSize := PortVariable.UsedSize + 1
      }
      else
      {
        -- Find a free link
        
         AvailableLink := CurrentLink.Next;
         while (not AvailableLink.Consumed)
         {
            AvailableLink := AvailableLink.Next
         };
         
         AvailableLink.DataPtr     := DataValue;
         AvailableLink.Timestamp   := CurrentDeadline;
         AvailableLink.Priority    := Priority;
         AvailableLink.Consumed    := FALSE;
         AvailableLink.Next        := CurrentLink;
         AvailableLink.Previous    := CurrentLink.Previous; 
         
         CurrentLink.Previous.Next := AvailableLink;
         CurrentLink.Previous      := AvailableLink; 
         
         PortVariable.UsedSize     := PortVariable.UsedSize + 1
      }
      end if;
      
      Release_Resource! (PortVariable)
    };
**};
end Put_Value;

subprogram Receive_Input
prototypes
  t_request: data;
features
  Period : requires data access Base_Types::Integer_16;
  CurrentPeriod : requires data access Base_Types::Integer_16;
  PortVariable : requires data access t_aadl_thread_data_queue.impl;
  First : in out parameter t_aadl_linkedlist_link_ptr.impl;
annex behavior_specification {**
  variables
    LastPeriod  : Base_Types::Integer_16;
    CurrentLink : t_aadl_linkedlist_link_ptr.impl;
  states
    s: initial final state;
  transitions
    t: s-[]->s {
      -- Skip elements received before previous period 
      -- and not already consumed.
    
      if (CurrentPeriod > 0)
      {
        LastPeriod := CurrentPeriod - Period;
        CurrentLink := First;
        while (CurrentLink.Timestamp <= LastPeriod)
        {
           CurrentLink.Consumed := TRUE;
           
           -- remove link
           CurrentLink.Previous.Next := CurrentLink.Next;
           CurrentLink.Next.Previous := CurrentLink.Previous;
           
           -- add link at the end of the chain
           CurrentLink.Previous := PortVariable.Free;
           CurrentLink.Next := PortVariable.Free.Next;
           PortVariable.Free.Next := CurrentLink;
           
           PortVariable.Free := CurrentLink;
           CurrentLink := CurrentLink.Next
        };
        First := CurrentLink
      }
      end if
    };
**};
end Receive_Input;


subprogram Next_Value
prototypes
  t_request: data;
features
  PortVariable: requires data access t_aadl_thread_data_queue.impl; -- Reference to port variable
  DataValue: out parameter t_request; -- Reference to value being retrieved
  First : in out parameter t_aadl_linkedlist_link_ptr.impl;
annex behavior_specification {**
  variables
    CurrentLink : t_aadl_linkedlist_link_ptr.impl;
  states
    s: initial final state;
  transitions
    t: s -[]-> s
    {
      Get_Resource! (PortVariable);
      
      DataValue := First.DataPtr;
      First.Consumed := TRUE;
      First := First.Next;
      PortVariable.UsedSize := PortVariable.UsedSize - 1;
      
      Release_Resource! (PortVariable)
    };
**};
end Next_Value;

subprogram Send_Output
features
  PortVariable: requires data access t_aadl_thread_data_queue.impl; -- Reference to port variable
end Send_Output;

subprogram Compute_Deadline
features 
  Period          : requires data access Base_Types::Integer_16;
  Deadline        : requires data access Base_Types::Integer_16;
  CurrentPeriod   : requires data access Base_Types::Integer_16;
  CurrentDeadline : requires data access Base_Types::Integer_16;
annex behavior_specification {**
  states
    s : initial final state;
  transitions
    t : s-[]->s
    {
      CurrentPeriod := CurrentPeriod + Period;
      CurrentDeadline := CurrentPeriod + Deadline
    };
**};
end Compute_Deadline;

end PeriodicDelayedMutex_runtime;