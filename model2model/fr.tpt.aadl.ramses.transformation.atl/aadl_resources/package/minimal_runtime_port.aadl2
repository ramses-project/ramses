-- List of concurrent proof subprograms:

   -- Event_Port_Send_Output
   -- Event_Port_Get_Value
   -- Event_Port_Freeze
   -- Event_Port_Updated
   -- Event_Port_Get_Count
   -- Event_Port_Discard_Events
   -- Event_Port_Put_Value
   -- Event_Port_Dequeue
   -- Next_Value
   -- Get_Updated_Port
   -- Data_Port_Discard_Pending_Event
   -- Data_Port_Send_Output
   -- Data_Port_Freeze
   -- Data_Port_Put_Value

-- List of unprotected subprograms - no racing condition -:
   
   -- Data_Port_Get_Count
   -- Data_Port_Updated
   -- Data_Port_Get_Value

-- List of unprotected subprograms - low level subprograms -:   

   -- Read_In
   -- Write_In
   -- Enqueue
   -- Dequeue
   -- Add_Pending_Event
   -- Remove_Pending_Event


package Minimal_Runtime_Port

public

with Timing_Properties, Data_Model, Base_Types, Minimal_Runtime_Types, Minimal_Runtime_Sync ;


subprogram Remove_Pending_Event

   features
   
   Link : requires data access Minimal_Runtime_Types::Pending_Event_Link.impl ;
      
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Link.Cpt_Access.Previous.Cpt_Access.Next := Link.Cpt_Access.Next ;
         Link.Cpt_Access.Next.Cpt_Access.Previous := Link.Cpt_Access.Previous ;
         Link.Is_Connected := FALSE
      } ; 
   **} ;

end Remove_Pending_Event ;


subprogram Add_Pending_Event

   features
   
   Pending_Events : requires data access Minimal_Runtime_Types::Pending_Event_Chain.impl ;
   Link : requires data access Minimal_Runtime_Types::Pending_Event_Link.impl ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         if(Link.Is_Connected) -- Obviously for data port and necessary for event port.
            Remove_Pending_Event ! (Link)
         end if ;
                  
         Link.Cpt_Access.Next := Pending_Events.Last ;
         Pending_Events.Last.Cpt_Access.Previous.Cpt_Access.Next := Link ;
         Link.Cpt_Access.Previous := Pending_Events.Last.Cpt_Access.previous ;
         Link.Is_Connected := TRUE
      } ; 
   **} ;

end Add_Pending_Event ;


subprogram Get_Updated_Port

   prototypes
   
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;

   features
   
   Pending_Events : requires data access Minimal_Runtime_Types::Pending_Event_Chain.impl ;
   UpdatedPort : requires data access Minimal_Runtime_Types::Natural_List.impl ;
   Mutex : requires data access Mutex_Type ;

   annex behavior_specification
   {**
      variables
      
      it_index, add_index : Base_Types::Natural ;
      current_link : Minimal_Runtime_Types::Pending_Event_Link.impl ;
      add, continue : Base_Types::Boolean ;
      
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         
         current_link := Pending_Events.First.Cpt_Access.Next ;
         add_index := 0 ;
         
         while(add_index < UpdatedPort.Length AND -- escape UpdatedPort out of bond.
               current_link.Port_Id != -1) -- stop on last link.
         {
            add := TRUE ;
            continue := TRUE ;
            it_index := 0 ;
            
            while(continue AND it_index < UpdatedPort.Nb_Items)
            {
               if(current_link.Port_Id = UpdatedPort[it_index])
               {
                  continue := FALSE ;
                  add := FALSE
               }
               end if ;
               
               it_index := it_index + 1
            } ;
            
            if(add)
            {
               UpdatedPort[add_index] := current_link.Port_Id ;
               add_index := add_index + 1
            }
            end if ;
            
            current_link := current_link.Cpt_Access.Next
         } ;
         
         UpdatedPort.Nb_Items := add_index ;
         
         Unlock ! (Mutex)
      } ; 
   **} ;

end Get_Updated_Port ;


subprogram Write_In

   prototypes
   
   Queue_type : data Minimal_Runtime_Types::Queue.impl ;
   Item_Type : data Minimal_Runtime_Types::Item.impl ;
   Overflow_Handling_Protocol : subprogram Overflow_Handling_Protocol ;
   
   features
   
   Queue : requires data access Queue_type ;
   Item : provides data access Item_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;

   annex behavior_specification
   {**
      
      variables
      
      last : Base_Types::Natural ;

      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         last := Queue.Last ;
         
         if( (Queue.Is_Empty = FALSE) AND
           ((last = Queue.First - 1) OR (Queue.First = 0 AND
             last = Queue.Length - 1))) 
            Overflow_Handling_Protocol ! (Queue, Item)
         else
         {
            if (last = Queue.Length - 1)
               last := 0
            else
               last := last + 1
            end if ;
             
            Item := Queue.Array[last]
         }
         end if
      } ;
      
   **} ;

end Write_In ;


subprogram Overflow_Handling_Protocol

   prototypes
   
   Queue_type : data Minimal_Runtime_Types::Queue.impl ;
   Item_Type : data Minimal_Runtime_Types::Item.impl ;
   
   features
   
   Queue : requires data access Queue_type ;
   Item : provides data access Item_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;

end Overflow_Handling_Protocol ;


subprogram Drop_Oldest_Protocol extends Overflow_Handling_Protocol

   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Item := Queue.Array[Queue.First]
      } ;
   **} ;

end Drop_Oldest_Protocol ;


-- Read the oldest element in the given queue or the queue's last value
-- if the queue is empty.

subprogram Read_In

   prototypes
   
   Queue_Type : data Minimal_Runtime_Types::Queue.impl ;
   Item_Type : data Minimal_Runtime_Types::Item.impl ;

   features
   
   Queue : requires data access Queue_Type ;
   Item : provides data access Item_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
      
   annex behavior_specification
   {**
      variables
      
      first, last : Base_Types::Natural ;
      
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         first := Queue.First ;
         last := Queue.Last ;
         
         if(Queue.Is_Empty = TRUE)
            Item := Queue.Last_Value
         else
            Item := Queue.Array[first]
         end if
      } ;
    **} ;
    
end Read_In ;


-- Dequeue one item from the given queue.
subprogram Dequeue

   prototypes
   
   Queue_Type : data Minimal_Runtime_Types::Queue.impl ;
   Payload_Copy : subprogram Payload_Copy ;
   
   features
   
   Queue : requires data access Queue_Type ;
      
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         if(Queue.First = Queue.Last)
            Queue.Is_Empty := TRUE
         end if ;
         
         Payload_Copy ! (Queue.Array[Queue.First].Payload, Queue.Last_Value.Payload) ;
         
         Queue.Last_Value.Link.Timestamp := Queue.Array[Queue.First].Link.Timestamp ;
         
         Remove_Pending_Event ! (Queue.Array[Queue.First].Link) ;
         
         if(Queue.First = Queue.Length - 1)
            Queue.First := 0
         else
            Queue.First := Queue.First + 1
         end if
      } ;
   **} ;
    
end Dequeue ;


subprogram Event_Port_Dequeue

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Event_Port_Variable.impl ;
   Dequeue : subprogram Dequeue ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   
   features
   
   Port_Variable : requires data access Port_Variable_Type ;
   Pending_Events : requires data access Minimal_Runtime_Types::Pending_Event_Chain ;
   Mutex : requires data access Mutex_Type ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         
         Dequeue ! (Port_Variable.Queue) ;
                    
         Unlock ! (Mutex)
      } ; 
   **} ;

end Event_Port_Dequeue ;


subprogram Payload_Copy

   prototypes
   
   Port_Type : data ;
   
   features
   
   Original : requires data access Port_Type ;
   Copy : requires data access Port_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
end Payload_Copy ;


subprogram Basic_Payload_Copy extends Payload_Copy

   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Copy := Original
      } ;
      
   **} ;

end Basic_Payload_Copy ;


-- Copy the given value to the oldest dequeued item.
-- If the queue is full, it applies the overflow handling protocol.
subprogram Event_Port_Put_Value

   prototypes
   
   Queue_type : data Minimal_Runtime_Types::Queue.impl ;
   Item_Type : data Minimal_Runtime_Types::Item.impl ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   Port_Type : data ;
   Payload_Copy : subprogram Payload_Copy ;
   Write_In : subprogram Write_In ;
   
   features
   
   Queue : requires data access Queue_type ;
   Value : requires data access Port_Type ;
   Mutex : requires data access Mutex_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;

end Event_Port_Put_Value ;

      
subprogram implementation Event_Port_Put_Value.impl

   subcomponents
   
   item : data Item_Type ;
   
   annex behavior_specification
   {**
      
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         
         Write_In ! (Queue, item) ;
         
         Payload_Copy ! (Value, item.Payload) ;
                  
         Unlock ! (Mutex)
      } ;
      
   **} ;

end Event_Port_Put_Value.impl ;


subprogram Enqueue
   
   prototypes
   
   Monitor_Type : data ;
   Queue_Type : data Minimal_Runtime_Types::Queue.impl ;
   Signal : subprogram Minimal_Runtime_Sync::Signal ;
   
   features
   
   Queue : requires data access Queue_Type ;
   Monitor : requires data access Monitor_Type ;
   Pending_Events : requires data access Minimal_Runtime_Types::Pending_Event_Chain ;
   Timestamp : in parameter Minimal_Runtime_Types::Date ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
      
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         if (Queue.Last = Queue.Length - 1)
             Queue.Last := 0
         else
            Queue.Last := Queue.Last + 1
         end if ;
             
         Queue.Is_Empty := FALSE ;
         
         Queue.Array[Queue.Last].Link.Timestamp := Timestamp ;
         
         Add_Pending_Event ! (Pending_Events, 
                              Queue.Array[Queue.Last].Link) ;
         Signal ! (Monitor)
      } ;
      
   **} ;

end Enqueue ;


subprogram Event_Port_Discard_Events

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Event_Port_Variable.impl ;
   Dequeue : subprogram Dequeue ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   
   features
   
   Port_Variable : requires data access Port_Variable_Type ;
   Pending_Events : requires data access Minimal_Runtime_Types::Pending_Event_Chain ;
   Mutex : requires data access Mutex_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         
         while(Port_Variable.Dequeuable_Items > 0 AND
               Port_Variable.Queue.Is_Empty = FALSE)
         {
            Dequeue ! (Port_Variable.Queue) ;
            Port_Variable.Dequeuable_Items := Port_Variable.Dequeuable_Items - 1
         } ;
         
         Unlock ! (Mutex)
      } ;
   **} ;

end Event_Port_Discard_Events ;


subprogram Data_Port_Discard_Pending_Event

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Data_Port_Variable.impl ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   
   features
   
   Port_Variable : requires data access Port_Variable_Type ;
   Pending_Events : requires data access Minimal_Runtime_Types::Pending_Event_Chain ;
   Mutex : requires data access Mutex_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         Remove_Pending_Event ! (Port_Variable.Array[Port_Variable.Snapshot_Index].Link) ;
         Unlock ! (Mutex)
      } ;
   **} ;

end Data_Port_Discard_Pending_Event ;


subprogram Event_Port_Get_Count

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Event_Port_Variable.impl ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   
   features
   
   Port_Variable : requires data access Port_Variable_Type ;
   Mutex : requires data access Mutex_Type ;
   Count_Value : out parameter Base_Types::Natural ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         Count_Value := Port_Variable.Dequeuable_Items ;
         Unlock ! (Mutex)
      } ;
   **} ;

end Event_Port_Get_Count ;


-- As only one thread can accessed to the memory in involved in this subprogram
-- during the dispatch execution time, this subprogram don't use any mutex.

subprogram Data_Port_Get_Count

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Data_Port_Variable.impl ;
   
   features
   
   Portvariable : requires data access Port_Variable_Type ;
   CountValue : out parameter Base_Types::Natural ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         if( Portvariable.Is_Fresh)
            CountValue := 1
         else
            CountValue := 0
         end if
      } ;
   **} ;

end Data_Port_Get_Count ;


subprogram Event_Port_Updated

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Event_Port_Variable.impl ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   
   features
   
   Port_Variable : requires data access Port_Variable_Type ;
   Mutex : requires data access Mutex_Type ;
   Fresh_Flag : out parameter Base_Types::Boolean ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         
         Fresh_Flag := FALSE ;
          
          if(NOT Port_Variable.Queue.Is_Empty OR
            Port_Variable.Dequeuable_Items > 0)
            Fresh_Flag := TRUE
         end if ;
         
         Unlock ! (Mutex)    
      } ;
   **} ;

end Event_Port_Updated ;


-- As only one thread can accessed to the memory in involved in this subprogram
-- during the dispatch execution time, this subprogram don't use any mutex.

subprogram Data_Port_Updated

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Data_Port_Variable.impl ;
   
   features
   
   Portvariable : requires data access Port_Variable_Type ;
   FreshFlag : out parameter Base_Types::Boolean ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         FreshFlag := Portvariable.Is_Fresh
      } ;
   **} ;

end Data_Port_Updated ;


subprogram Next_Value

   prototypes
   
   Port_Type : data ;
   Port_Variable_Type : data Minimal_Runtime_Types::Event_Port_Variable.impl ;
   Dequeue : subprogram Dequeue ;
   Get_Value : subprogram Event_Port_Get_Value ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   
   features

   Port_Variable   : requires data access Port_Variable_Type ; -- reference to port variable
   Value           : requires data access Port_Type ; -- value being retrieved
   Pending_Events : requires data access Minimal_Runtime_Types::Pending_Event_Chain ;
   Mutex : requires data access Mutex_Type ;
   No_Value: out parameter Base_Types::Boolean ; -- exception if no value is available
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         
         if(Port_Variable.Dequeuable_Items > 0 AND
            Port_Variable.Queue.Is_Empty = FALSE)
         {
            Dequeue ! (Port_Variable.Queue) ;
            Get_Value ! (Port_Variable, Value, Mutex) ;
            Port_Variable.Dequeuable_Items := Port_Variable.Dequeuable_Items - 1 ;
            No_Value := FALSE
         }
         else
         {
            No_Value := TRUE ;
            Port_Variable.Dequeuable_Items := 0
         }
         end if ;
         
         Unlock ! (Mutex)
      } ;
   **} ;
   
end Next_Value ;


subprogram Event_Port_Freeze

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Event_Port_Variable.impl ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   
   features
   
   Port_Variable : requires data access Port_Variable_Type ;
   Mutex : requires data access Mutex_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         
         -- It's Get_Count.
         if(NOT Port_Variable.Queue.Is_Empty)
         {
            if(Port_Variable.Queue.First > Port_Variable.Queue.Last)
               Port_Variable.Dequeuable_Items := 1 + Port_Variable.Queue.Length - Port_Variable.Queue.First + Port_Variable.Queue.Last
            else
               Port_Variable.Dequeuable_Items := 1 + Port_Variable.Queue.Last - Port_Variable.Queue.First
            end if ;

            -- Maximum according to the Dequeue_Protocol property.
            if (Port_Variable.Dequeuable_Items > Port_Variable.Readable_Items)
               Port_Variable.Dequeuable_Items := Port_Variable.Readable_Items
            end if
         }
         else
            Port_Variable.Dequeuable_Items := 0  -- May be unnecessary.
         end if ;
         
         Unlock ! (Mutex)
      } ;
   **} ;

end Event_Port_Freeze ;


subprogram Data_Port_Freeze

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Data_Port_Variable.impl ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   
   features
   
   Portvariable : requires data access Port_Variable_Type ;
   Mutex : requires data access Mutex_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      variables
      
      tmp_index : Base_Types::Natural ;
      
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         if(Portvariable.Array[Portvariable.Stream_Index].Link.Timestamp !=
            Portvariable.Array[Portvariable.Snapshot_Index].Link.Timestamp)
         {
            tmp_index := Portvariable.Snapshot_Index ;
            Portvariable.Snapshot_Index := Portvariable.Stream_Index ;
            Portvariable.Stream_Index := tmp_index ;
            Portvariable.Is_Fresh := TRUE
         }
         else
         {
            Portvariable.Is_Fresh := FALSE
         }
         end if ;
         Unlock ! (Mutex)         
      } ;
   **} ;

end Data_Port_Freeze ;


subprogram Data_Port_Put_Value

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Data_Port_Variable.impl ;
   Port_Type : data ;
   Payload_Copy : subprogram Payload_Copy ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   
   features
   
   Portvariable : requires data access Port_Variable_Type ;
   Value : requires data access Port_Type ;
   Mutex : requires data access Mutex_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         Payload_Copy ! (Value, Portvariable.Array[Portvariable.Stream_Index].Payload) ;
         Unlock ! (Mutex)
      } ; 
   **} ;

end Data_Port_Put_Value ;


-- Get the oldest value in the event [data] port or the last value if the port is
-- not frozen or there is no more event available or the port's queue is empty.

subprogram Event_Port_Get_Value

prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Event_Port_Variable.impl ;
   Item_Type : data Minimal_Runtime_Types::Item.impl ;
   Read_In : subprogram Read_In ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   Port_Type : data ;
   Payload_Copy : subprogram Payload_Copy ;
   
   features
   
   Port_Variable : requires data access Port_Variable_Type ;
   Value : requires data access Port_Type ;
   Mutex : requires data access Mutex_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;

end Event_Port_Get_Value ;


subprogram implementation Event_Port_Get_Value.impl

   subcomponents
   
   item : data Item_Type ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         Read_In ! (Port_Variable.Queue, item) ; -- returns Last_Value if queue is empty.
         Payload_Copy ! (item.Payload, Value) ;
         Unlock ! (Mutex)
      } ; 
   **} ;

end Event_Port_Get_Value.impl ;


-- As only one thread can accessed to the memory in involved in this subprogram
-- during the dispatch execution time, this subprogram don't use any mutex.

subprogram Data_Port_Get_Value

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Data_Port_Variable.impl ;
   Port_Type : data ;
   Payload_Copy : subprogram Payload_Copy ;
   
   features
   
   Portvariable : requires data access Port_Variable_Type ;
   Value : requires data access Port_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Payload_Copy ! (Portvariable.Array[Portvariable.Snapshot_Index].Payload, Value)
      } ; 
   **} ;
   
end Data_Port_Get_Value ;


subprogram Event_Port_Send_Output

   prototypes
   
   Monitor_Type : data ;
   Queue_Type : data Minimal_Runtime_Types::Queue.impl ;
   Enqueue : subprogram Enqueue ;
   Get_Current_Date : subprogram Minimal_Runtime_Sync::Get_Current_Date ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;

   features
   
   Queue : requires data access Queue_Type ;
   Monitor : requires data access Monitor_Type ;
   Pending_Events : requires data access Minimal_Runtime_Types::Pending_Event_Chain ;
   Mutex : requires data access Mutex_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      variables
      
      timestamp : Minimal_Runtime_Types::Date ;
      
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         Get_Current_Date ! (timestamp) ;
         Enqueue ! (Queue, Monitor, Pending_Events, timestamp) ;
         Unlock ! (Mutex)
      } ; 
   **} ;

end Event_Port_Send_Output ;


subprogram Data_Port_Send_Output

   prototypes
   
   Port_Variable_Type : data Minimal_Runtime_Types::Data_Port_Variable.impl ;
   Monitor_Type : data ;
   Signal : subprogram Minimal_Runtime_Sync::Signal ;
   Get_Current_Date : subprogram Minimal_Runtime_Sync::Get_Current_Date ;
   Mutex_Type : data ;
   Lock : subprogram Minimal_Runtime_Sync::Lock ;
   Unlock : subprogram Minimal_Runtime_Sync::Unlock ;
   
   features
   
   Monitor : requires data access Monitor_Type ;
   Portvariable : requires data access Port_Variable_Type ;
   Pending_Events : requires data access Minimal_Runtime_Types::Pending_Event_Chain.impl ;
   Mutex : requires data access Mutex_Type ;
   
   properties
   
   Prototype_Substitution_Rule => Type_Extension ;
   
   annex behavior_specification
   {**
      variables
      
      timestamp : Minimal_Runtime_Types::Date ;
      
      states
      
      init_state : initial state ;
      final_state : final state ;
      
      transitions
      
      init_state -[TRUE]-> final_state
      {
         Lock ! (Mutex) ;
         Get_Current_Date ! (timestamp) ;
         Portvariable.Array[Portvariable.Stream_Index].Link.Timestamp := timestamp ;
         Add_Pending_Event ! (Pending_Events, Portvariable.Array[Portvariable.Stream_Index].Link) ;
         Signal ! (Monitor) ;
         Unlock ! (Mutex)
      } ; 
   **} ;

end Data_Port_Send_Output ;


end Minimal_Runtime_Port ;
