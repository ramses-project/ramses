package OSEK_runtime
public

-- Task management
data StatusType
properties
  Programming_Properties::Source_Name => "StatusType";
  Programming_Properties::Source_Text => ("tpl_os_types.h");
end StatusType;

data TaskType
properties
  Programming_Properties::Source_Name => "TaskType";
  Programming_Properties::Source_Text => ("tpl_os_types.h");
end TaskType;

data TaskRefType
properties
  Programming_Properties::Source_Name => "TaskRefType";
  Programming_Properties::Source_Text => ("tpl_os_types.h");
end TaskRefType;

data TaskStateType
properties
  Programming_Properties::Source_Name => "TaskStateType";
  Programming_Properties::Source_Text => ("tpl_os_types.h");
end TaskStateType;

data TaskStateRefType
properties
  Programming_Properties::Source_Name => "TaskStateRefType";
  Programming_Properties::Source_Text => ("tpl_os_types.h");
end TaskStateRefType;

subprogram ActivateTask
features
  TASK_ID: in parameter TaskType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "ActivateTask";
  Programming_Properties::Source_Text => ("tpl_os_task.h");
end ActivateTask;

subprogram TerminateTask
properties
  Programming_Properties::Source_Name => "TerminateTask";
  Programming_properties::Source_Text => ("tpl_os_task.h");
end TerminateTask;

-- TODO: ChainTask
-- TODO: Schedule
-- TODO: GetTaskID
-- TODO: GetTaskState


-- Resource management
data ResourceType
properties
  Programming_Properties::Source_Name => "ResourceType";
  Programming_Properties::Source_Text => ("tpl_os_rez.h");
end ResourceType;

subprogram GetResource
features
  RES_ID: in parameter ResourceType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "GetResource";
  Programming_Properties::Source_Text => ("tpl_os_rez.h");
end GetResource;

subprogram ReleaseResource
features
  RES_ID: in parameter ResourceType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "ReleaseResource";
  Programming_Properties::Source_Text => ("tpl_os_rez.h");
end ReleaseResource;

-- Event control
data EventMaskType
properties
  Programming_Properties::Source_Name => "EventMaskType";
  Programming_Properties::Source_Text => ("tpl_os_event.h");
end EventMaskType;

data EventMaskRefType
properties
  Programming_Properties::Source_Name => "EventMaskRefType";
  Programming_Properties::Source_Text => ("tpl_os_event.h");
end EventMaskRefType;

subprogram SetEvent
features
  TASK_ID: in parameter TaskType;
  MASK: in parameter EventMaskType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "SetEvent";
  Programming_Properties::Source_Text => ("tpl_os_event.h");
end SetEvent;

subprogram ClearEvent
features
  MASK: in parameter EventMaskType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "ClearEvent";
  Programming_Properties::Source_Text => ("tpl_os_event.h");
end ClearEvent;

subprogram GetEvent
features
  TASK_ID: in parameter TaskType;
  EVENT_REF: out parameter EventMaskRefType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "GetEvent";
  Programming_Properties::Source_Text => ("tpl_os_event.h");
end GetEvent;

subprogram WaitEvent
features
  MASK: in parameter EventMaskType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "WaitEvent";
  Programming_Properties::Source_Text => ("tpl_os_event.h");
end WaitEvent;

-- Operating system
data AppModeType
properties
  Programming_Properties::Source_Name => "AppModeType";
  Programming_Properties::Source_Text => ("tpl_os.h");
end AppModeType;

-- TODO: GetActiveApplicationMode
subprogram StartOS
features
  APP_MODE: in parameter AppModeType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "StartOS";
  Programming_Properties::Source_Text => ("tpl_os.h");
end StartOS;

subprogram ShutdownOS
features
  STATUS: in parameter StatusType;
properties
  Programming_Properties::Source_Name => "ShutdownOS";
  Programming_Properties::Source_Text => ("tpl_os.h");
end ShutdownOS;

-- Hooks
-- Les hooks sont initialement vides, ils sont transformés en
-- une séquence d'appels contenant l'ensemble des fonctions
-- qui sont définies dans les propriétés Initialize_Entrypoint
-- (StartupHook) ou Finilize_Entrypoint (ShutdownHook)
subprogram StartupHook
end StartupHook;

subprogram ShutdownHook
end ShutdownHook;
-- TODO: Alarms
-- TODO: Interrupt handling

-- Ports management
data EventQueueIdType
properties
  Programming_Properties::Source_Name => "EventQueueIdType";
  Programming_Properties::Source_Text => ("osek_runtime.h");
end EventQueueIdType;

data EventDataType
properties
  Programming_Properties::Source_Name => "EventDataType";
  Programming_Properties::Source_Text => ("osek_runtime.h");
end EventDataType;

subprogram SetOSEKEventData
features
  EV_DATA_QUEUE_ID: in parameter EventQueueIdType;
  VALUE: in parameter EventDataType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "SetEventData";
  Programming_Properties::Source_Text => ("osek_runtime.h");
end SetOSEKEventData;

subprogram WaitOSEKEventData
features
  EV_DATA_QUEUE_ID: in parameter EventQueueIdType;
  VALUE: out parameter EventDataType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "WaitEventData";
  Programming_Properties::Source_Text => ("osek_runtime.h");
end WaitOSEKEventData;

subprogram SetOSEKEvent
features
  EV_QUEUE_ID: in parameter EventQueueIdType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "SetEvent";
  Programming_Properties::Source_Text => ("osek_runtime.h");
end SetOSEKEvent;

subprogram WaitOSEKEvent
features
  EV_QUEUE_ID: in parameter EventQueueIdType;
  STATUS: out parameter StatusType;
properties
  Programming_Properties::Source_Name => "WaitEvent";
  Programming_Properties::Source_Text => ("osek_runtime.h");
end WaitOSEKEvent;

end OSEK_runtime;
