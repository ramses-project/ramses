--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @atlcompiler emftvm

module CopyBehaviorCondition;
create OUT : AADLBA 	from 	IN : AADLBA,
								HOOKS: ATLHOOKS;


abstract rule m_ExecuteCondition 
{
	from
		src_behaviorCondition: AADLBA!ExecuteCondition
	to
		target_ExecuteCondition: AADLBA!ExecuteCondition
}

rule m_ExecutionTimeoutCatch 
{
	from
		src_behaviorCondition: AADLBA!ExecutionTimeoutCatch
	to
		target_ExecutionTimeoutCatch: AADLBA!ExecutionTimeoutCatch
}

rule m_Otherwise
{
	from
		src_behaviorCondition: AADLBA!Otherwise
	to
		target_Otherwise: AADLBA!Otherwise
}

rule m_DispatchCondition
{
	from
		src_DispatchCondition: AADLBA!DispatchCondition
	to
		target_DispatchCondition: AADLBA!DispatchCondition
		(
			dispatchTriggerCondition <- src_DispatchCondition.dispatchTriggerCondition,
			frozenPorts              <- src_DispatchCondition.frozenPorts
		)
}


rule m_DispatchTriggerConditionStop
{
	from
		src_DispatchTriggerConditionStop: AADLBA!DispatchTriggerConditionStop
	to
		target_DispatchTriggerConditionStop: AADLBA!DispatchTriggerConditionStop
}

rule m_DispatchRelativeTimeout
{
	from
		src_DispatchRelativeTimeout: AADLBA!DispatchRelativeTimeout
	to
		target_DispatchRelativeTimeout: AADLBA!DispatchRelativeTimeout
}

rule m_DispatchTriggerLogicalExpression
{
	from
		src_DispatchTriggerLogicalExpression: AADLBA!DispatchTriggerLogicalExpression
	to
		target_DispatchTriggerLogicalExpression: AADLBA!DispatchTriggerLogicalExpression
		(
			dispatchConjunctions <- src_DispatchTriggerLogicalExpression
										.dispatchConjunctions
		)
}

rule m_DispatchConjunction
{
	from
		src_DispatchConjunction : AADLBA!DispatchConjunction
	to
		target_DispatchConjunction:AADLBA!DispatchConjunction
		(
			dispatchTriggers <- src_DispatchConjunction
									.dispatchTriggers
		)
}
