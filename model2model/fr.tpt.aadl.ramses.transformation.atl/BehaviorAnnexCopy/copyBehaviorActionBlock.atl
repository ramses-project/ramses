--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--


-- @atlcompiler emftvm

module copyBehaviorActionBlock;
create OUT : AADLBA 	from 	IN : AADLBA,
								HOOKS: ATLHOOKS;

rule m_BehaviorActionBlock
{
	from
		src_actionBlock: AADLBA!BehaviorActionBlock
		(src_actionBlock.isThreadBehaviorElement())
	to
		target_actionBlock: AADLBA!BehaviorActionBlock
		(
			content <- src_actionBlock.content,
			timeout <- src_actionBlock.timeout
		)
}


rule m_BehaviorActionSequence
{
	from
		src_behaviorActionSequence: AADLBA!BehaviorActionSequence
		(src_behaviorActionSequence.isThreadBehaviorElement())
	to
		target_behaviorActionSequence: AADLBA!BehaviorActionSequence
		(
			actions <- src_behaviorActionSequence.actions
		)
}

rule m_IfStatement
{
	from
		src_ifStatement: AADLBA!IfStatement
		(
			not src_ifStatement.oclIsTypeOf(AADLBA!ElseStatement)
			and
			src_ifStatement.isThreadBehaviorElement()
		)
	to
		target_ifStatement: AADLBA!IfStatement
		(
			logicalValueExpression <- src_ifStatement.logicalValueExpression,
			elif <- src_ifStatement.elif,
			behaviorActions <- src_ifStatement.behaviorActions,
			elseStatement <- src_ifStatement.elseStatement
		)
}

rule m_AssignmentAction
{
	from
		src_assignmentAction: AADLBA!AssignmentAction
		(src_assignmentAction.isThreadBehaviorElement())
	to
		target_assignmentAction: AADLBA!AssignmentAction
		(
			target <- src_assignmentAction.target,
			valueExpression <- src_assignmentAction.valueExpression
		)
}

rule m_ElseStatement
{
	from
		src_elseStatement: AADLBA!ElseStatement
		(
			not src_elseStatement.oclIsTypeOf(AADLBA!IfStatement)
			and
			src_elseStatement.isThreadBehaviorElement()
		)
	to
		target_elseStatement: AADLBA!ElseStatement
		(
			behaviorActions <- src_elseStatement.behaviorActions
		)
}

rule m_BehaviorEnumerationLiteral
{
	from
		src_behaviorEnumerationLiteral: AADLBA!BehaviorEnumerationLiteral
		(src_behaviorEnumerationLiteral.isThreadBehaviorElement())
	to
		target_behaviorEnumerationLiteral: AADLBA!BehaviorEnumerationLiteral
		(
			component <- src_behaviorEnumerationLiteral.component,
			enumLiteral <- src_behaviorEnumerationLiteral.enumLiteral
		)
}

rule m_ValueExpression
{
	from
		src_valueExpression: AADLBA!ValueExpression
		(src_valueExpression.isThreadBehaviorElement())
	to
		target_valueExpression: AADLBA!ValueExpression
		(
			relations <- src_valueExpression.relations,
			logicalOperators <- src_valueExpression.logicalOperators
		)
}

rule m_Relation
{
	from
		src_relation: AADLBA!Relation
		(src_relation.isThreadBehaviorElement())
	to
		target_relation: AADLBA!Relation
		(
			firstExpression <- src_relation.firstExpression,
			relationalOperator <- src_relation.relationalOperator,
			secondExpression <- src_relation.secondExpression
		)
}

rule m_SimpleExpression {
	from
		src_simpleExpression : AADLBA!SimpleExpression
		(src_simpleExpression.isThreadBehaviorElement())
	to 
		target_simpleExpression : AADLBA!SimpleExpression
		(
			unaryAddingOperator <- src_simpleExpression.unaryAddingOperator,
			terms <- src_simpleExpression.terms,
			binaryAddingOperators <- src_simpleExpression.binaryAddingOperators
		)
}

rule m_Term {
	from
		src_term: AADLBA!Term
		(src_term.isThreadBehaviorElement())
	to
		target_term: AADLBA!Term
		(
			factors <- src_term.factors,
			multiplyingOperators <- src_term.multiplyingOperators
		)
}

rule m_Factor {
	from
		src_factor: AADLBA!Factor
		(src_factor.isThreadBehaviorElement())
	to
		target_factor: AADLBA!Factor
		(
			firstValue <- src_factor.firstValue,
			secondValue <- src_factor.secondValue,
			binaryNumericOperator <- src_factor.binaryNumericOperator,
			unaryNumericOperator <- src_factor.unaryNumericOperator,
			unaryBooleanOperator <- src_factor.unaryBooleanOperator
		)
}

abstract rule m_CommunicationAction
{
	from
		src_communicationAction: AADLBA!CommunicationAction
		(src_communicationAction.isThreadBehaviorElement())
	to
		target_communicationAction: AADLBA!CommunicationAction
}

-- @extends m_CommunicationAction
rule m_SubprogramCallAction
{
	from
		src_communicationAction: AADLBA!SubprogramCallAction
	to
		target_communicationAction: AADLBA!SubprogramCallAction
		(
			subprogram <- src_communicationAction.subprogram,
			parameterLabels <- src_communicationAction.parameterLabels,
			dataAccess <- src_communicationAction.dataAccess
		)
}

-- @extends m_CommunicationAction
rule m_PortDequeueAction
{
	from
		src_communicationAction: AADLBA!PortDequeueAction
	to
		target_communicationAction: AADLBA!PortDequeueAction
		(
			port   <- src_communicationAction.port,
			target <- src_communicationAction.target
		)
}

-- @extends m_CommunicationAction
rule m_PortSendAction
{
	from
		src_communicationAction: AADLBA!PortSendAction
	to
		target_communicationAction: AADLBA!PortSendAction
		(
			port   			<- src_communicationAction.port,
			valueExpression <- src_communicationAction.valueExpression
		)
}