--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm

module ReducedBA;
create OUT : AADLBA 	from 		IN: AADLI,
									WCET: REDUCEDBA;

helper context AADLI!InstanceObject def : collectSelfPropertyAssociationImg() : Sequence(AADLBA!PropertyAssociation) =
	self.ownedPropertyAssociation->select(e | not e.property.name.equalsIgnoreCase('Compute_Entrypoint_Call_Sequence')
									)->collectSelfPropertyAssociationImg()
									->append(self.isRootSystem())
									->excluding(OclUndefined)
;

helper context AADLI!InstanceObject def : isRootSystem() : AADLBA!PropertyAssociation = 
	if (self.category = #system and self.eContainer().oclIsUndefined()) then
		thisModule.CreatePropertyAssociation('Root_System', 'AI', thisModule.CreateStringLiteralPropertyExpression('selected')).debug(' !!!!!!!!! ')
	else
		OclUndefined
	endif
;

-- @extends m_Component_Instance
rule m_Component_Instance_Ignored {
	from
		c : AADLI!ComponentInstance 
		(
		  thisModule.theHOOK.deployedOnIgnoredCpu(c)
		)
}


-- @extends m_Component_Instance
rule m_Process_Instance {
	from
		c : AADLI!ComponentInstance (
			c.category = #process
			and
			not thisModule.theHOOK.deployedOnIgnoredCpu(c)
		)
	using
	{
 		impl : AADLI!ThreadImplementation = c.subcomponent.subcomponentType;
	}
	to 
		sub : AADLBA!ProcessSubcomponent
		(
			processSubcomponentType <- implImg
		),
		implImg : AADLBA!ProcessImplementation (
			name 							<- if c.subcomponent.processSubcomponentType.oclIsKindOf(AADLBA!ComponentType)  then c.processSubcomponentType.name+'.impl'
											else c.subcomponent.processSubcomponentType.name
											endif,
			ownedRealization 				<- thisModule.Realization(type),
			ownedThreadSubcomponent         <- c.componentInstance->select(e|e.category=#thread),
			ownedDataSubcomponent         <- c.componentInstance->select(e|e.category=#data),
			ownedAccessConnection			<- impl.getConnectionsInstancesImg('accessConnection')
		),
		type:AADLBA!ProcessType (
			name 							<- if c.subcomponent.processSubcomponentType.oclIsKindOf(AADLBA!ComponentType)  then c.processSubcomponentType.name
											else c.subcomponent.processSubcomponentType.type.name
											endif
		)
}

rule m_Process_Type {
 from
 	type : AADLI!ProcessType
}

rule m_Process_Implementation {
 from
 	type : AADLI!ProcessImplementation
}

rule m_Processor_Type {
 from
 	type : AADLI!ProcessorType
}

rule m_Processor_Implementation {
 from
 	type : AADLI!ProcessorImplementation
}

rule m_VirtualProcessor_Type {
 from
 	type : AADLI!VirtualProcessorType
}

rule m_VirtualProcessor_Implementation {
 from
 	type : AADLI!VirtualProcessorImplementation
}

rule m_Memory_Type {
 from
 	type : AADLI!MemoryType
}

rule m_Memory_Implementation {
 from
 	impl : AADLI!MemoryImplementation
}

-- @extends m_Component_Type
rule m_System_Type {
 from
 	type : AADLI!SystemType
	(AADLI!ComponentInstance.allInstancesFrom('IN')->select(e| e.category=#system)->exists(e|e.systemImplementation.type=type))
 to
 	typeImg: AADLBA!SystemType
	(
		name                              <- if(thisModule.theHOOK.getOutputPackageName().oclIsUndefined()) then
											 type.name
											 else
											 thisModule.theHOOK.getOutputPackageName()
											 endif
	)
 do
 {
	thisModule.addImportedUnitFromInputModel(thisModule.public(), type);
 }
}

--@extends m_Component_Implementation
rule m_System_Implementation {
  from
  	impl : AADLI!SystemImplementation
	(AADLI!ComponentInstance.allInstancesFrom('IN')->select(e| e.category=#system)->exists(e|e.systemImplementation=impl))
  to
  	implImg : AADLBA!SystemImplementation
	(
		name                              <- if(thisModule.theHOOK.getOutputPackageName().oclIsUndefined()) then
											 impl.name
											 else
											 thisModule.theHOOK.getOutputPackageName()+'.impl'
											 endif,
		ownedMemorySubcomponent           <- impl.getSubcomponentsInstances('memory'),
		ownedProcessorSubcomponent        <- impl.getSubcomponentsInstances('processor'),
		ownedDeviceSubcomponent           <- impl.getSubcomponentsInstances('device'),
		ownedVirtualProcessorSubcomponent <- impl.getSubcomponentsInstances('virtual processor'),
		ownedProcessSubcomponent          <- impl.getSubcomponentsInstances('process'),
		ownedSubprogramSubcomponent       <- impl.getSubcomponentsInstances('subprogram'),
		ownedSystemSubcomponent           <- impl.getSubcomponentsInstances('system'),
		ownedDataSubcomponent             <- impl.getSubcomponentsInstances('data')
	)
}


--@extends m_Component_Implementation
rule m_Thread_Implementation {
 from 
 	impl : AADLI!ThreadImplementation
	(
		REDUCEDBA!ReducedThreadBA.allInstancesFrom('WCET')->exists(e|e.thread.subcomponent.subcomponentType = impl)
	)
 to 
 	implImg : AADLBA!ThreadImplementation (
 		name <- impl.name,
		ownedSubprogramSubcomponent 	<- impl.getSubcomponentsInstances('subprogram'),
		ownedDataSubcomponent 			<- impl.getSubcomponentsInstances('data')
	)
}

-- @extends m_Component_Type
rule m_Thread_Type {
 from 
 	type : AADLI!ThreadType
 to 
 	typeImg : AADLBA!ThreadType (
	 ownedDataAccess <- type.ownedDataAccess->collect(e|e.getFeaturesInstances('dataAccess')),
	 ownedSubprogramAccess <- type.ownedSubprogramAccess->collect(e|e.getFeaturesInstances('subprogramAccess'))
 	)
}

---- next rule overrides the existing "copy" since we use already defined types referencing them instead of copying them
abstract rule m_Data_Type {
 from 
   type : AADLI!DataType
 to
}

abstract rule m_Subprogram_Type {
 from
 	type : AADLI!SubprogramType
}

abstract rule m_Subprogram_Implementation {
 from
 	impl : AADLI!SubprogramImplementation
}

-- @extends m_PropertyValue
abstract rule m_NumberValue {
    from
    	v : AADLI!NumberValue in IN
		(v.unit.oclIsUndefined()
    		or not v.unit.isTimeUnit())
    to 
    	v2 : AADLBA!NumberValue (
    		unit <- v.unit
    	)
}

rule m_IntegerLiteral_Time {
    from
    	v : AADLI!IntegerLiteral in IN
		(not v.unit.oclIsUndefined()
    		and v.unit.isTimeUnit()) 
	using
	{
		precision: String = thisModule.theHOOK.getTimingPrecision(v.getContainingClassifier());
	}
    to 
    	v2 : AADLBA!IntegerLiteral (
    		base <- v.base,
    		value <- thisModule.theHOOK.getFloor(v.getScaledValue(precision)),
			unit <- AADLI!UnitLiteral.allInstances()->any(e|e.name = precision)
    	)
}


rule m_RealLiteral_Time {
    from 
    	v : AADLI!RealLiteral  in IN
		(not v.unit.oclIsUndefined()
    		and v.unit.isTimeUnit())
	using
	{
		precision: String = thisModule.theHOOK.getTimingPrecision(v.getContainingClassifier());
	}
    to
    	v2 : AADLBA!RealLiteral (
    		value <- v.getScaledValue(precision),   
			unit <- AADLI!UnitLiteral.allInstances()->any(e|e.name = precision)
    	)
}

helper context AADLBA!UnitLiteral def: isTimeUnit() : Boolean =
	self.name='ns' or self.name='us' or self.name='ms'
	or self.name='sec' or self.name='min' or self.name='hr'
;

rule m_AddReducedBA
{
	from
		t: AADLI!ComponentInstance in IN,
		reducedBA: REDUCEDBA!ReducedThreadBA in WCET
		(
			t.category = #thread
			and
			reducedBA.thread = t
			and
			not thisModule.theHOOK.deployedOnIgnoredCpu(t)
		)
	to
		ba: AADLBA!BehaviorAnnex
		(
			name        <- 'behavior_specification',
			states      <- Sequence{singleState},
			transitions <- Sequence{singleTransition},
			actions		<- Sequence{mainLoopActionBlock}
		),
		singleState:AADLBA!BehaviorState
		(
			initial  <- true,
			final    <- true,
			complete <- true,
			name     <- 'main_state'
		),
		singleTransition:AADLBA!BehaviorTransition
		(
			name <- 'main_loop',
			sourceState <- singleState,
			destinationState <- singleState,
			condition <- onDispatch,
			actionBlock <- mainLoopActionBlock
		),
		onDispatch: AADLBA!DispatchCondition,
		mainLoopActionBlock: AADLBA!BehaviorActionBlock
		(content<-mainLoopActions),
		mainLoopActions: AADLBA!BehaviorActionSequence
		( 
			actions <- reducedBA.elements
		)
	do
	{
		t.subcomponent.subcomponentType.resolve().ownedAnnexSubclause <- Sequence{ba};
	}
}

rule m_AddComputation
{
	from
		t: AADLI!ComponentInstance,
		comp: REDUCEDBA!Computation
		(
			t.category = #thread
			and
			comp.eContainer().thread = t
		)
	using
	{
		precision: String = thisModule.theHOOK.getTimingPrecision(t);
	}
	to
		baComputation: AADLBA!TimedAction mapsTo comp
		(
		  lowerTime <- lower,
		  upperTime <- upper
		),
		lower: AADLBA!BehaviorTime
		(
			integerValue <- lowerIV,
			unit <- lowerUnit
		),
		lowerIV: AADLBA!BehaviorIntegerLiteral
		(
			value <- comp.min.longValue()
		),
		lowerUnit: AADLBA!UnitLiteral
		(name <- precision),
		
		upper: AADLBA!BehaviorTime
		(
			integerValue <- upperIV,
			unit <- upperUnit
		),
		upperIV: AADLBA!BehaviorIntegerLiteral
		(
			value <- thisModule.theHOOK.getCeil(comp.max)
		),
		upperUnit: AADLBA!UnitLiteral
		(name <- precision)
}

rule m_AddLock
{
	from
		t: AADLI!ComponentInstance,
		lock: REDUCEDBA!CriticalSectionBegin
		(
			t.category = #thread
			and
			lock.eContainer().thread = t
		)
	to
		entry: AADLBA!LockAction mapsTo lock
		(
			dataAccess <- dah
		),
		dah: AADLBA!DataAccessHolder
		(
			element <- t.featureInstance->any(e|e.feature = lock.sharedData)
		)
}

rule m_AddUnlock
{
	from
		t: AADLI!ComponentInstance,
		unlock: REDUCEDBA!CriticalSectionEnd
		(
			t.category = #thread
			and
			unlock.eContainer().thread = t
		)
	to
		exit: AADLBA!UnlockAction mapsTo unlock
		(
			dataAccess <- dah
		),
		dah: AADLBA!DataAccessHolder
		(
			element <- t.featureInstance->any(e|e.feature = unlock.sharedData)
		)
}