--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @atlcompiler emftvm

library AADLICopyHelpers;

helper context AADLI!Subcomponent def : getType() : AADLI!ComponentType =
	if(self.getClassifier().oclIsKindOf(AADLI!ComponentType)) then
		self.getClassifier()
	else
		self.getClassifier().getOwnedRealization().implemented
	endif
;

helper context AADLI!ComponentImplementation def : getType() : AADLI!ComponentType =
	self.getOwnedRealization().implemented
;

helper context AADLI!ComponentInstance def : getType() : AADLI!ComponentType =
	if (self.getSubcomponent().getClassifier().oclIsKindOf(AADLI!ComponentType)) then
		self.getSubcomponent().getClassifier()
	else
		self.getSubcomponent().getClassifier().getOwnedRealization().implemented
	endif
;

helper context AADLI!ComponentInstance def : getImpl() : AADLI!ComponentImplementation =
	if (self.category = #system) then
		self.systemImplementation
	else
		if (self.getSubcomponent().getClassifier().oclIsKindOf(AADLI!ComponentImplementation)) then
			self.getSubcomponent().getClassifier()
		else
			OclUndefined
		endif
	endif
;

helper context AADLI!ComponentInstance def : getTypeOrImpl() : AADLI!ComponentClassifier =
	if(not self.getImpl().oclIsUndefined()) then
		self.getImpl()
	else
		self.getType()
	endif
;
	
helper context AADLI!InstanceObject def : uniqueName() : String =
	if (self.eContainer().oclIsKindOf(AADLI!SystemInstance)) then
		self.name
	else
		self.eContainer().uniqueName().concat('_').concat(self.name)
	endif
;

helper context AADLI!InstanceObject def : targetPackagePrefix() : String =
	if (self.getSystemInstance().getSystemImplementation().eContainer().eContainer().oclIsKindOf(AADLI!AadlPackage)) then
		self.getSystemInstance().getSystemImplementation().eContainer().eContainer().name+thisModule.getPackageSuffix()+'__'
	else
		''
	endif
;

helper context AADLI!Element def : getOwnerComponent() : AADLI!ComponentInstance =
	if (self.eContainer().oclIsKindOf(AADLI!ComponentInstance)) then
		self.eContainer()
	else
		self.eContainer().getOwnerComponent()
	endif
;

helper context AADLI!ComponentInstance def : owner() : AADLI!ComponentInstance =
	self.eContainer()
;

helper context AADLI!ComponentInstance def : ownerImplImg() : AADLBA!ComponentImplementation = 
	if (self.eContainer().category = #system) then
		thisModule.resolveMatchedSingleIfExists(self.eContainer().systemImplementation, 'implImg')
	else
		thisModule.resolveMatchedSingleIfExists(self.eContainer(), 'sub').getSubcomponentType()
	endif
;

helper context AADLI!ConnectionInstanceEnd def : getSubcomponentImg() : AADLBA!Subcomponent =
	thisModule.resolveMatchedSingleIfExists(self, 'sub')
;

helper context AADLI!ConnectionInstanceEnd def : getFeatureImg() : AADLBA!Feature =
	thisModule.resolveMatchedSingleIfExists(self, 'f')
;

helper context AADLI!ConnectionInstanceEnd def : getFeatureImg(cnxInst: AADLI!ConnectionInstance) : AADLBA!Feature =
		thisModule.resolveMatchedTupleIfExists(Sequence{self,cnxInst.connectionReference->first()}, 'f')
;

helper context AADLI!ConnectionInstanceEnd def : retreiveEntrypointFeature() : AADLBA!DataAccess =
	thisModule.resolveMatchedSingleIfExists(self, 'f_entrypoint')
;

helper context AADLI!ConnectionInstanceEnd def : retreiveEntrypointFeature(cnx: AADLI!PortConnection) : AADLBA!Feature =
		thisModule.resolveMatchedTupleIfExists(Sequence{self,cnx}, 'f_entrypoint')
;

helper context AADLI!InstanceObject def : collectSelfPropertyAssociationImg() : Sequence(AADLBA!PropertyAssociation) =
	self.ownedPropertyAssociation->collectSelfPropertyAssociationImg()
;

helper context Sequence(AADLBA!PropertyAssociation) def : collectSelfPropertyAssociationImg() : Sequence(AADLBA!PropertyAssociation) =
	self->select(e|(e.collectInstanceReferenceValue()->isEmpty()))
								 ->union(self->select(e|not e.collectInstanceReferenceValue()->isEmpty() 
								 											  and e.collectInstanceReferenceValue()->select(f| not f.referencedInstanceObject.isContainedIn(f.eContainer().eContainer().eContainer().eContainer()))->isEmpty())) -- econtainer() 4 times retreives container component instance; recursive helper would be better...
													 ->collect ( p |  thisModule.resolveMatchedSingleIfExists(p, 'p2'))
;

helper context AADLI!ComponentImplementation def : getSubcomponentsInstances(category : String) : Sequence(AADLI!ComponentInstance) =
	let instance : AADLI!ComponentInstance = AADLI!ComponentInstance->allInstancesFrom('IN')->any(c|c.getImpl()=self)
	in
	if(not instance.oclIsUndefined()) then
		instance.componentInstance
	                        ->select(c|c.category.getName()=category)
	else
		Sequence{}
	endif
;
	
helper context AADLI!Feature def : getFeaturesInstances(category : String) : AADLI!FeatureInstance =
	let featureInstance : AADLI!FeatureInstance = AADLI!FeatureInstance->allInstancesFrom('IN')->any(f|f.feature=self)
	in
	if(not featureInstance.oclIsUndefined()) then
		featureInstance
	else
		OclUndefined
	endif
;

helper context AADLI!ConnectedElement def : getConnContextImg(owner : AADLBA!ComponentImplementation) : AADLBA!Context =
	if (self.context.oclIsUndefined()) then
		OclUndefined
	else
		if (self.context.oclIsKindOf(AADLI!SubprogramCall).debug('Context is subprogram call')) then
			owner.debug('1111').ownedSubprogramCallSequence.debug('222')->first().ownedSubprogramCall->any(call|call.name = self.context.name)
		else
			-- can return OclUndefined if the subcomponent is not yet mapped
			owner.getAllSubcomponents()->any(s|s.name = self.context.name)
		endif
	endif
; 

helper context AADLI!ConnectedElement def : getConnFeatureImg(owner : AADLBA!ComponentImplementation) : AADLBA!Feature =
	if(not self.connectionEnd.oclIsKindOf(AADLI!Feature)) then
		owner.ownedSubcomponent->any(f|f.name=self.connectionEnd.name)
	else
		if (self.context.oclIsUndefined()) then
			owner.getType().getOwnedFeatures()->any(f|f.name=self.connectionEnd.name)
		else 
			if (self.getConnContextImg(owner).oclIsUndefined()) then
				-- subcomponent is not yet mapped: feature cannot be resolved yet
				OclUndefined.debug('XXX')
			else 
				-- subcomponent is mapped: feature is accessible
				if (self.getConnContextImg(owner).oclIsKindOf(AADLBA!SubprogramCall)) then
					self.getConnContextImg(owner).calledSubprogram.getConnFeatureImg(self)
				else
					self.getConnContextImg(owner).getType().getOwnedFeatures()->any(f|f.name=self.connectionEnd.name)
				endif
			endif
		endif
	endif
;

helper context AADLI!Subprogram def : getConnFeatureImg(connectedElt: AADLI!ConnectedElement) : AADLBA!Feature =
	self.ownedFeature->any(p|p.name.debug('Param1')=connectedElt.connectionEnd.name.debug('Param2'))
;

helper context AADLI!SubprogramAccess def : getConnFeatureImg(connectedElt: AADLI!ConnectedElement) : AADLBA!Feature =
	self.subprogramFeatureClassifier.ownedParameter->any(p|p.name.debug('Param1')=connectedElt.connectionEnd.name.debug('Param2'))
;

helper context AADLI!ComponentImplementation def : callSequenceFromComputeEntryPoint() : AADLI!Subprogram =
	if(self.getModalPropertyValue('Compute_Entrypoint') = OclUndefined) then
		if(self.type.getModalPropertyValue('Compute_Entrypoint') = OclUndefined) then
			if(self.type.callSequenceFromComputeEntryPoint() = OclUndefined) then
				OclUndefined
			else
				self.type.callSequenceFromComputeEntryPoint()
			endif
		else
			self.type.getModalPropertyValue('Compute_Entrypoint').ownedValue.classifier
		endif
	else
		self.getModalPropertyValue('Compute_Entrypoint').ownedValue.classifier
	endif
;

helper context AADLI!ComponentType def : callSequenceFromComputeEntryPoint() : AADLI!Subprogram =
	if(self.ownedEventPort->first() = OclUndefined) then
		OclUndefined
	else
		if(self.ownedEventPort->first().getModalPropertyValue('Compute_Entrypoint') = OclUndefined) then
			OclUndefined
		else
			self.ownedEventPort->first().getModalPropertyValue('Compute_Entrypoint').ownedValue.classifier.debug('Retreived Call Sequence from Compute_Entrypoint')
		endif
	endif
;

helper context AADLI!SubprogramCallSequence def : getAllOutParameters() : Sequence(AADLI!Parameter) =
	self.ownedSubprogramCall->collect(c|c.calledSubprogram.ownedParameter)->flatten()->select(p|p.direction=#out)
;


helper context AADLI!Feature def : mapDataClassifier() : AADLBA!DataClassifier =
	if (self.dataFeatureClassifier.oclIsKindOf(AADLI!DataImplementation)) then
		thisModule.Implementation(OclUndefined,self.dataFeatureClassifier, thisModule.Type(OclUndefined,self.dataFeatureClassifier.getType()))
	else
		thisModule.Type(OclUndefined,self.dataFeatureClassifier)
	endif
;

helper context AADLI!Feature def : mapSubprogramClassifier() : AADLBA!SubprogramClassifier =
	if (self.subprogramFeatureClassifier.oclIsKindOf(AADLI!SubprogramImplementation)) then
		thisModule.Implementation(OclUndefined,self.subprogramFeatureClassifier, thisModule.Type(OclUndefined,self.subprogramFeatureClassifier.getType()))
	else
		thisModule.Type(OclUndefined,self.subprogramFeatureClassifier)
	endif
;

helper context AADLI!DataClassifier def : mapDataClassifier() : AADLBA!DataClassifier =
	if (self.oclIsKindOf(AADLI!DataImplementation)) then
		thisModule.Implementation(OclUndefined,self, thisModule.Type(OclUndefined,self.getType()))
	else
		thisModule.Type(OclUndefined,self)
	endif
;

