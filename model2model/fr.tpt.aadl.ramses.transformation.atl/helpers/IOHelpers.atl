--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore

library IOHelpers;

helper context AADLI!ComponentInstance def : memoryBinding() : AADLBA!ProcessorSubcomponent =
	self.ownedPropertyAssociation->any(pa|pa.property.name='Actual_Memory_Binding')
		.ownedValue->first().ownedValue.ownedListElement->first().referencedInstanceObject
;

helper context AADLI!ComponentInstance def : getPartitionSwitchTime() : AADLBA!RealLiteral =
	self.ownedPropertyAssociation
		->any(pa|pa.property.name='Process_Swap_Execution_Time').ownedValue
		->first().ownedValue.maximum
;	
	

helper context AADLBA!ThreadType def : getMinExecutionTime() : AADLBA!RealLiteral =
	self.ownedPropertyAssociation
		->any(pa|pa.property.name='Compute_Execution_Time').ownedValue
		->first().ownedValue.minimum
;

helper context AADLBA!ThreadType def : getMaxExecutionTime() : AADLBA!RealLiteral =
	self.ownedPropertyAssociation
		->any(pa|pa.property.name='Compute_Execution_Time').ownedValue
		->first().ownedValue.maximum
;


helper context AADLI!FeatureInstance def : getQueueSize() : Integer =
	if (self.ownedPropertyAssociation->any(pa|pa.property.name='Queue_Size')
			.oclIsUndefined()) then
			1
	else
		self.ownedPropertyAssociation->any(pa|pa.property.name='Queue_Size')
		.ownedValue->first().value
	endif
;


helper context AADLI!FeatureInstance def : getInputRate() : Integer =
	if (self.ownedPropertyAssociation->any(pa|pa.property.name='Input_Rate')
		.oclIsUndefined()) then
		1
	else
		self.ownedPropertyAssociation->any(pa|pa.property.name='Input_Rate')
		.ownedValue->first().ownedValue.ownedFieldValue->any(fv|fv.property.name='Value_Range')
		.ownedValue.maximum.value
	endif
;

helper context AADLI!FeatureInstance def : getOutputRate() : Integer =
	if (self.ownedPropertyAssociation->any(pa|pa.property.name='Output_Rate')
		.oclIsUndefined()) then
		1
	else
		self.ownedPropertyAssociation->any(pa|pa.property.name='Output_Rate')
		.ownedValue->first().ownedValue.ownedFieldValue->any(fv|fv.property.name='Value_Range')
		.ownedValue.maximum.value
	endif
;

helper context AADLI!FeatureInstance def : getOutputTime() : AADLI!RecordValue =
	if (self.ownedPropertyAssociation->any(pa|pa.property.name='Output_Time').oclIsUndefined()) then
		OclUndefined
	else
		self.ownedPropertyAssociation->any(pa|pa.property.name='Output_Time')
		.ownedValue->first().ownedValue
	endif
;

helper context AADLI!FeatureInstance def : getOutputTimeKind() : String =
	if (self.getOutputTime().oclIsUndefined()) then
		OclUndefined
	else
		self.getOutputTime().ownedFieldValue
			->any(fv|fv.property.name='Time').ownedValue.namedValue.name
	endif
;

helper context AADLI!FeatureInstance def : getOutputTimeOffset() : AADLI!RealLiteral =
	if (self.getOutputTime().oclIsUndefined()) then
		OclUndefined
	else
		self.getOutputTime().ownedFieldValue
			->any(fv|fv.property.name='Offset').ownedValue
	endif
;

helper context AADLI!RealLiteral def : minimum : AADLI!RealLiteral = self;
helper context AADLI!IntegerLiteral def : minimum : AADLI!IntegerLiteral = self;
helper context AADLI!RealLiteral def : maximum : AADLI!RealLiteral = self;
helper context AADLI!IntegerLiteral def : maximum : AADLI!IntegerLiteral = self;

helper context AADLI!ComponentInstance def : getReadTime() : AADLI!RecordValue =
	if (self.category=#memory) then
		self.ownedPropertyAssociation
			->any(pa|pa.property.name='Read_Time').ownedValue
			->first().ownedValue
	else
		self.memoryBinding().getReadTime()
	endif
;

helper context AADLI!ComponentInstance def : getFixedReadTime() : Real =
	self.getReadTime().ownedFieldValue->any(fv|fv.property.name='Fixed').ownedValue.value
;

helper context AADLI!ComponentInstance def : getPerByteReadTime() : Real =
	self.getReadTime().ownedFieldValue->any(fv|fv.property.name='PerByte').ownedValue.value
;

helper context AADLI!ComponentInstance def : getWriteTime() : AADLI!RecordValue =
	if (self.category=#memory) then
		self.ownedPropertyAssociation
			->any(pa|pa.property.name='Write_Time').ownedValue
			->first().ownedValue
	else
		self.memoryBinding().getWriteTime()
	endif
;

helper context AADLI!ComponentInstance def : getFixedWriteTime() : Real =
	self.getWriteTime().ownedFieldValue->any(fv|fv.property.name='Fixed').ownedValue.value
;

helper context AADLI!ComponentInstance def : getPerByteWriteTime() : Real =
	self.getWriteTime().ownedFieldValue->any(fv|fv.property.name='PerByte').ownedValue.value
;

helper context AADLI!FeatureInstance def : getDataSize() : Integer =
	self.feature.dataFeatureClassifier.ownedPropertyAssociation
		->any(pa|pa.property.name='Source_Data_Size')
		.ownedValue->first().ownedValue.value
;

helper context AADLI!FeatureInstance def : getReadTime() : Real =
	(self.eContainer().getFixedReadTime().doubleValue()
	  + (self.getDataSize().intValue() * self.eContainer().getPerByteReadTime().doubleValue()))

	* self.getOutputRate()
;

helper context AADLI!FeatureInstance def : getWriteTime() : Real =
	(self.eContainer().getFixedWriteTime().doubleValue()
	  + (self.getDataSize().intValue() * self.eContainer().getPerByteWriteTime().doubleValue()))
	  
	* self.getInputRate()
;