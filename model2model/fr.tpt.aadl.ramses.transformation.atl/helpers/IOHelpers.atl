--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm

library IOHelpers;

helper context AADLI!ConnectionInstance def: isDelayedConnection() : Boolean =
	let mpv: AADLI!ModalPropertyValue = self.getModalPropertyValue('timing') in
	if(not mpv.oclIsUndefined()) then
		mpv.ownedValue.namedValue.name.toLower() = 'delayed'
	else
		false -- should consider default valuer here
	endif
;

helper context AADLI!FeatureInstance def: isDelayedPort() : Boolean =
	if(self.direction.getName()='in' and self.dstConnectionInstance->forAll(e|e.isDelayedConnection())) then
		true
	else 
		if(self.direction.getName()='out' and self.srcConnectionInstance->forAll(e|e.isDelayedConnection())) then
			true
		else
			if(self.direction.getName()='in' and self.dstConnectionInstance->forAll(e|e.source.isDefinedDelayedPort())) then
				true
			else
				if(self.direction.getName()='out' and self.srcConnectionInstance->forAll(e|e.destination.isDefinedDelayedPort())) then
					true
				else
					false
				endif
			endif
		endif
	endif
;


helper context AADLI!ConnectionInstance def: isImmediateConnection() : Boolean =
	self.getModalPropertyValue('timing').ownedValue.namedValue.name.toLower() = 'immediate'
;

helper context AADLI!FeatureInstance def: isImmediatePort() : Boolean =
	if(self.getModalPropertyValue('timing').ownedValue.namedValue.name.toLower() = 'immediate')
	then
		true
	else if(self.direction.getName()='in' and self.dstConnectionInstance->forAll(e|e.isImmediateConnection())) then
			true
			else if(self.direction.getName()='out' and self.srcConnectionInstance->forAll(e|e.isImmediateConnection())) then
				true
			else
				false
			endif
		endif
	endif
;


helper context AADLI!ComponentInstance def : memoryBinding() : AADLBA!ProcessorSubcomponent =
	self.ownedPropertyAssociation->any(pa|pa.property.name='Actual_Memory_Binding')
		.ownedValue->first().ownedValue.ownedListElement->first().referencedInstanceObject
;

helper context AADLI!ComponentInstance def : getPartitionSwitchTime() : AADLBA!RealLiteral =
	self.ownedPropertyAssociation
		->any(pa|pa.property.name='Process_Swap_Execution_Time').ownedValue
		->first().ownedValue.maximum
;	
	

helper context AADLBA!ThreadType def : getMinExecutionTime() : AADLBA!RealLiteral =
	self.ownedPropertyAssociation
		->any(pa|pa.property.name='Compute_Execution_Time').ownedValue
		->first().ownedValue.minimum
;

helper context AADLBA!ThreadType def : getMaxExecutionTime() : AADLBA!RealLiteral =
	self.ownedPropertyAssociation
		->any(pa|pa.property.name='Compute_Execution_Time').ownedValue
		->first().ownedValue.maximum
;


helper context AADLI!FeatureInstance def : getDefaultQueueSize() : Integer =
	10
;

helper context AADLI!FeatureInstance def : getQueueSize() : Integer =
	if (self.ownedPropertyAssociation->any(pa|pa.property.name='Queue_Size')
			.oclIsUndefined()) then
			self.getDefaultQueueSize()
	else
		self.ownedPropertyAssociation->any(pa|pa.property.name='Queue_Size')
		.ownedValue->first().ownedValue.value
	endif
;

helper context AADLI!FeatureInstance def : getQueueSizeFromInputRate() : Integer =
	self.getInputRate().round().longValue()
;

helper context AADLI!FeatureInstance def : getQueueSizeFromOutputRate() : Integer =
	self.getOutputRate().round().longValue()
;


helper context AADLI!FeatureInstance def : getInputRate() : Real =
	if (self.ownedPropertyAssociation->any(pa|pa.property.name='Input_Rate')
		.oclIsUndefined()) then
		1
	else
		self.ownedPropertyAssociation->any(pa|pa.property.name='Input_Rate')
		.ownedValue->first().ownedValue.ownedFieldValue->any(fv|fv.property.name='Value_Range')
		.ownedValue.maximum.value
	endif
;

helper context AADLI!FeatureInstance def : getOutputRatePeriodFactor() : Real =
	if (self.getOutputRate() < 1) then
		1.0 / self.getOutputRate()
	else
		1.0
	endif
;

helper context AADLI!FeatureInstance def : getInputRatePeriodFactor() : Real =
	if (self.getInputRate() < 1) then
		1.0 / self.getInputRate()
	else
		1.0
	endif
;

helper context AADLI!ComponentInstance def: isPeriodicDelayedPort(): Boolean =
	false
;

helper context AADLI!ComponentInstance def: isDefinedDelayedPort(): Boolean =
	false
;

helper context AADLI!FeatureInstance def: isDefinedDelayedPort() : Boolean =
        -- TODO: consider default value here
        let mpv: AADLBA!ModalPropertyValue = self.getModalPropertyValue('timing') in
        if(not mpv.oclIsUndefined()) then
                mpv.ownedValue.namedValue.name.toLower() = 'delayed'
        else
                false
        endif
;

helper context AADLI!FeatureInstance def: isPeriodicDelayedPort(): Boolean =
	if(self.direction = #out) then
		self.category=#eventDataPort and
		self.isPeriodicThreadPort() and
		self.srcConnectionInstance->forAll(e|e.destination.isPeriodicThreadPort()) and
		(self.isDelayedPort() or self.isTimeBasedOutputPort() ) and
		-- We should also deal with the output time property even though we consider here it is replaced by the
		-- 'timing=Delayed' property
		self.isOnePerDispatchOutputRate() -- Value_Range = '1.0 .. 1.0' and Rate_Unit = 'PerDispatch' and Rate_Distribution = 'Fixed'
	else
		self.direction.getName()='in' and
		self.category=#eventDataPort and
		self.isPeriodicThreadPort() and
		self.dstConnectionInstance->forAll(e|e.source.isPeriodicThreadPort()) and
		(self.isDelayedPort() or self.isTimeBasedInputPort())  and
		(self.getDequeueProtocol() = 'AllItems'.toLower())
	endif
;

helper context AADLI!FeatureInstance def: isTimeBasedOutputPort(): Boolean =
	self.getOutputTimeKind() = 'Deadline' and self.getOutputTimeOffset().minimum = self.getOutputTimeOffset().maximum
;

helper context AADLI!FeatureInstance def: isTimeBasedInputPort(): Boolean =
	self.getInputTimeKind() = 'Dispatch' and self.getInputTimeOffset().minimum = self.getOutputTimeOffset().maximum
;

helper context AADLI!FeatureInstance def: getDequeueProtocol() : String =
	let property:AADLBA!PropertyAssociation = self.ownedPropertyAssociation->any(pa|pa.property.name.toLower()='dequeue_protocol') 
	in
	if (property.oclIsUndefined()) then
		thisModule.getProperty('dequeue_protocol').defaultValue.namedValue.name.toLower()
	else
		property.ownedValue->first().ownedValue.namedValue.name.toLower()
	endif
;

helper context AADLBA!PropertyExpression def: isFixedRateDistribution() : Boolean =
	if(self.ownedFieldValue->any(fv|fv.property.name='Rate_Distribution').ownedValue.namedValue.name.oclIsUndefined()) then
		true
	else
		self.ownedFieldValue->any(fv|fv.property.name='Rate_Distribution').ownedValue.namedValue.name.toLower() = 'fixed'
	endif
;

helper context AADLBA!PropertyExpression def: isPerDispatchRateUnit() : Boolean =
	self.ownedFieldValue->any(fv|fv.property.name='Rate_Unit').ownedValue.namedValue.name.toLower() = 'perdispatch'
;

helper context AADLBA!PropertyExpression def: isOnePerDispatchOutputRate() : Boolean =
	(self.ownedFieldValue->any(fv|fv.property.name='Value_Range').ownedValue.minimum.value.toString() = '1.0')
	and
	(self.ownedFieldValue->any(fv|fv.property.name='Value_Range').ownedValue.maximum.value.toString() = '1.0')
	and
	self.isPerDispatchRateUnit()
	and
	self.isFixedRateDistribution()
;

helper context AADLI!FeatureInstance def : isOnePerDispatchOutputRate() : Boolean =
	let property:AADLBA!PropertyAssociation = self.ownedPropertyAssociation->any(pa|pa.property.name='Output_Rate') 
	in
	if (property.oclIsUndefined()) then
		thisModule.getProperty('Output_Rate').defaultValue.isOnePerDispatchOutputRate()
	else
		property.ownedValue->first().ownedValue.isOnePerDispatchOutputRate()
	endif
;

-- EB: the helper bellow is not precise enough, it abstracts away most of the semantical capabilities of the 
-- Output_Rate property; reason why I wrote the helpers above

helper context AADLI!FeatureInstance def : getOutputRate() : Real =
	if (self.ownedPropertyAssociation->any(pa|pa.property.name='Output_Rate')
		.oclIsUndefined()) then
		1 -- should look at the default value in the property set
	else
		self.ownedPropertyAssociation->any(pa|pa.property.name='Output_Rate')
		.ownedValue->first().ownedValue.ownedFieldValue->any(fv|fv.property.name='Value_Range')
		.ownedValue.maximum.value
	endif
;

helper context AADLI!FeatureInstance def : getOutputTime() : AADLI!RecordValue =
	let pa: AADLI!PropertyAssociation = self.ownedPropertyAssociation->any(pa|pa.property.name='Output_Time') in 
	if (pa.oclIsUndefined()) then
		thisModule.getDefaultOutputTime()
	else
		pa.ownedValue->first().ownedValue
	endif
;

helper def : getDefaultOutputTime() : AADLI!RecordValue =
	thisModule.getProperty('Output_Time').defaultValue
;

helper context AADLI!FeatureInstance def : getInputTime() : AADLI!RecordValue =
	let pa: AADLI!PropertyAssociation = self.ownedPropertyAssociation->any(pa|pa.property.name='Intput_Time') in 
	if (pa.oclIsUndefined()) then
		thisModule.getDefaultOutputTime()
	else
		pa.ownedValue->first().ownedValue
	endif
;

helper def : getDefaultInputTime() : AADLI!RecordValue =
	thisModule.getProperty('Input_Time').defaultValue
;

helper context AADLI!FeatureInstance def : getOutputTimeKind() : String =
	if (self.getOutputTime().oclIsUndefined()) then
		OclUndefined
	else
		self.getOutputTime().ownedListElement.get(0).ownedFieldValue
			->any(fv|fv.property.name='Time').ownedValue.namedValue.name
	endif
;

helper context AADLI!FeatureInstance def : getInputTimeKind() : String =
	if (self.getInputTime().oclIsUndefined()) then
		OclUndefined
	else
		self.getInputTime().ownedListElement.get(0).ownedFieldValue
			->any(fv|fv.property.name='Time').ownedValue.namedValue.name
	endif
;

helper context AADLI!FeatureInstance def : getOutputTimeOffset() : AADLI!RealLiteral =
	if (self.getOutputTime().oclIsUndefined()) then
		OclUndefined
	else
		self.getOutputTime().ownedListElement.get(0).ownedFieldValue
			->any(fv|fv.property.name='Offset').ownedValue
	endif
;

helper context AADLI!FeatureInstance def : getInputTimeOffset() : AADLI!RealLiteral =
	if (self.getInputTime().oclIsUndefined()) then
		OclUndefined
	else
		self.getInputTime().ownedListElement.get(0).ownedFieldValue
			->any(fv|fv.property.name='Offset').ownedValue
	endif
;

helper context AADLI!RealLiteral def : minimum : AADLI!RealLiteral = self;
helper context AADLI!IntegerLiteral def : minimum : AADLI!IntegerLiteral = self;
helper context AADLI!RealLiteral def : maximum : AADLI!RealLiteral = self;
helper context AADLI!IntegerLiteral def : maximum : AADLI!IntegerLiteral = self;

helper context AADLI!ComponentInstance def : getReadTime() : AADLI!RecordValue =
	if (self.category=#memory) then
		self.ownedPropertyAssociation
			->any(pa|pa.property.name='Read_Time').ownedValue
			->first().ownedValue
	else
		self.memoryBinding().getReadTime()
	endif
;

helper context AADLI!ComponentInstance def : getFixedReadTime() : Real =
	self.getReadTime().ownedFieldValue->any(fv|fv.property.name='Fixed').ownedValue.value
;

helper context AADLI!ComponentInstance def : getPerByteReadTime() : Real =
	self.getReadTime().ownedFieldValue->any(fv|fv.property.name='PerByte').ownedValue.value
;

helper context AADLI!ComponentInstance def : getWriteTime() : AADLI!RecordValue =
	if (self.category=#memory) then
		self.ownedPropertyAssociation
			->any(pa|pa.property.name='Write_Time').ownedValue
			->first().ownedValue
	else
		self.memoryBinding().getWriteTime()
	endif
;

helper context AADLI!ComponentInstance def : getFixedWriteTime() : Real =
	self.getWriteTime().ownedFieldValue->any(fv|fv.property.name='Fixed').ownedValue.value
;

helper context AADLI!ComponentInstance def : getPerByteWriteTime() : Real =
	self.getWriteTime().ownedFieldValue->any(fv|fv.property.name='PerByte').ownedValue.value
;

helper context AADLI!FeatureInstance def : getDataSize() : Integer =
	self.feature.dataFeatureClassifier.ownedPropertyAssociation
		->any(pa|pa.property.name='Source_Data_Size')
		.ownedValue->first().ownedValue.value
;

helper context AADLI!FeatureInstance def : getReadTime() : Real =
	(self.eContainer().getFixedReadTime().doubleValue()
	  + (self.getDataSize().intValue() * self.eContainer().getPerByteReadTime().doubleValue()))

	* self.getQueueSizeFromOutputRate()
;

helper context AADLI!FeatureInstance def : getWriteTime() : Real =
	(self.eContainer().getFixedWriteTime().doubleValue()
	  + (self.getDataSize().intValue() * self.eContainer().getPerByteWriteTime().doubleValue()))
	  
	* self.getQueueSizeFromInputRate()
;

helper context AADLI!ConnectionInstance def : getIOTime() : Real =
	Sequence{self.source.getReadTime(), self.destination.getWriteTime()}
		->sum().doubleValue()
;