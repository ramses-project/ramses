-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm

module LanguageSpecificitiesAda;
create OUT : AADLBA from IN : AADLI;

helper def: structInitInitiator: String = '(';
helper def: structInitTerminator: String = ')';


rule concatToString(list: Sequence(Integer))
{
	
  using
  {
  	counter: Integer = 0;
  	result: String = '';
  	sep: String = ', ';
  	subSeq: Sequence(Integer) = list->subSequence(1, list->size()-1);
  }
  do
  {
  	result <- thisModule.structInitInitiator;
  	for(i in subSeq)
  	{
  		result <- counter.toString() + ' => ' + result + i.toString() + ',';
  		counter<-counter+1;
  	}
--	result <- subSeq->iterate(i; result:String = thisModule.structInitInitiator | 
--		counter.toString() + '=>' + result + i.toString() + ','
--	);
	result <- result + counter.toString() + ' => '+ list->last().toString() + thisModule.structInitTerminator;
	result;
  }
}


helper def: getSizeOfType(dataType: String): String =
	dataType+'\'size';

helper context AADLBA!NamedElement def: getProgrammationLanguageIdentifier(): String =
	let pa: AADLBA!PropertyAssociation = self.getPropertyAssociation('Source_Name') in
	if(not pa.oclIsUndefined()) then
		pa.ownedValue->first().ownedValue.value
	else
		self.getQualifiedName().replaceAll('::', '_').replaceAll('\\.','_')
	endif
;

helper context String def: getProgrammationLanguageIdentifier(): String =
	self.replaceAll('::', '__').replaceAll('\\.','_')
;

helper def:getProgrammationLanguageIdentifier(identifier:String): String =
	identifier.replaceAll('\\.','_').replaceAll('::','_');
