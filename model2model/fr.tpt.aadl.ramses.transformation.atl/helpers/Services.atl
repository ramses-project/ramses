--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

library Services;


helper def: dataSubcomponentSuffix(): String = '_Instance';
helper def: dataAccessSuffix(): String ='_PortIdAccess_';
helper def: callPrefix(): String ='call_';


helper def: theHOOK : ATLHOOKS!HookAccess = ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first();

helper context AADLBA!NamedElement def: get_C_Identifier(): String =
	self.getQualifiedName().replaceAll('::', '__').replaceAll('.','_')
;

helper context AADLBA!ThreadImplementation def : callSequence() : AADLBA!SubprogramCallSequence =
	self.ownedSubprogramCallSequence->first()
;

helper context AADLBA!DirectedFeature def: isOutputFeature(): Boolean =
	self.getDirection() = #out;
		
helper context AADLBA!DirectedFeature def: isInputOutputFeature(): Boolean =
	self.getDirection() = #inOut;

helper context AADLBA!DirectedFeature def: isInputFeature(): Boolean =
	(not self.isOutputFeature() and not self.isInputOutputFeature());

helper context AADLBA!DirectedFeature def: getDirection(): AADLBA!DirectionType =
	self.direction;

helper context AADLBA!SubprogramType def: getOrderedFeature() : Sequence(AADLBA!Feauture) =
	ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().orderFeatures(self);

helper context AADLBA!ComponentImplementation def: getComponentType(): AADLBA!ComponentType = 
	self.type;

helper context AADLBA!SubprogramSubcomponentType def: getSubprogramType() : AADLBA!SubprogramType = 
	if(self.oclIsKindOf(AADLBA!SubprogramType)) then
		self
	else 
		if(self.oclIsKindOf(AADLBA!SubprogramImplementation)) then
			self.type
		else
			OclUndefined
		endif
	endif
;

helper context AADLBA!SubprogramType def: getSubprogramParameters() : Sequence(AADLBA!Parameter) = 
	self.ownedParameter;

helper context AADLBA!SubprogramImplementation def: getSubprogramParameters() : Sequence(AADLBA!Parameter) = 
	self.type.ownedParameter;

helper def:getProgrammationLanguageIdentifier(identifier:String): String =
	identifier.replaceAll('.','_').replaceAll('::','__');

helper context AADLI!FeatureInstance def : isThreadPort() : Boolean =
	self.eContainer().category = #thread and self.category.oclIsTypeOf(AADLBA!Port)
;

helper context AADLI!ComponentInstance def : isThreadPort() : Boolean =
	false
;

helper context AADLI!FeatureInstance def : isProcessPort() : Boolean =
	self.eContainer().category=#process  and self.category.oclIsTypeOf(AADLBA!Port)
;

helper context AADLI!ComponentInstance def : isProcessPort() : Boolean =
	false
;

helper context AADLI!FeatureInstance def : isDataOrEventDataPort() : Boolean =
	(self.feature.oclIsTypeOf(AADLI!EventDataPort) or self.feature.oclIsTypeOf(AADLI!DataPort)); 


helper context AADLI!ComponentInstance def: isPeriodicThread() : Boolean =
	let mpv: AADLBA!ModalPropertyValue = self.getModalPropertyValue('Dispatch_Protocol') in
	if(mpv.oclIsUndefined()) then
		false
	else
		mpv.ownedValue.namedValue.name.toLower() = 'periodic'
	endif
;

helper context AADLI!ComponentInstance def: isSporadicThread() : Boolean =
	let mpv: AADLBA!ModalPropertyValue = self.getModalPropertyValue('Dispatch_Protocol') in
	if(mpv.oclIsUndefined()) then
		false
	else
		mpv.ownedValue.namedValue.name.toLower() = 'sporadic'
	endif
;

helper context AADLI!ComponentInstance def: isAperiodicThread() : Boolean =
	let mpv: AADLBA!ModalPropertyValue = self.getModalPropertyValue('Dispatch_Protocol') in
	if(mpv.oclIsUndefined()) then
		false
	else
		mpv.ownedValue.namedValue.name.toLower() = 'aperiodic'
	endif
;

helper context AADLI!FeatureInstance def: isPeriodicThreadPort(): Boolean =
	self.isThreadPort() and self.eContainer().isPeriodicThread()
;

helper context AADLI!ComponentInstance def: isPeriodicThreadPort(): Boolean =
	false
;

helper context AADLI!ConnectionInstance def: isIntraProcessConnection() : Boolean =
	self.source.eContainer().eContainer() = self.destination.eContainer().eContainer() 
;