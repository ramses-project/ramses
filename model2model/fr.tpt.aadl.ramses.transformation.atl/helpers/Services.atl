--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @atlcompiler emftvm

library Services;

--- Returns the same as thisModule.resolveTemp(var : OclAny, rule_name : String, target_pattern_name : String),
--- except that it returns OclUndefined if no trace exists instead of throwing an error.
helper def : resolveLazyTupleSingleIfExists(var : Sequence(OclAny), rule_name : String, target_pattern_name : String) : OclAny =
    let tr : OclAny = thisModule.traces.getLinksByRule(rule_name, false) in
    if tr.oclIsUndefined() then
    	OclUndefined
    else
    	let sel : OclAny = tr.getUniqueSourceElements(var) in
        if sel.oclIsUndefined() then
        	OclUndefined
        else
        	let te : OclAny = sel.getSourceElements().get(0).getSourceOf().getTargetElement(target_pattern_name) in
            if te.oclIsUndefined() then
            	OclUndefined
            else
            	te.getObject()
            endif
        endif
       endif;

helper def : resolveLazySingleIfExists(var :OclAny, rule_name : String, target_pattern_name : String) : OclAny =
    let tr : OclAny = thisModule.traces.getLinksByRule(rule_name, false) in
    if tr.oclIsUndefined() then
    	OclUndefined
    else
    	let sel : OclAny = tr.getUniqueSourceElement(var) in
        if sel.oclIsUndefined() then
        	OclUndefined
        else
        	let te : OclAny = sel.getSourceOf().getTargetElement(target_pattern_name) in
            if te.oclIsUndefined() then
            	OclUndefined
            else
            	te.getObject()
            endif
        endif
       endif;
        
helper def : resolveMatchedTupleIfExists(var : Sequence(OclAny), target_pattern_name : String) : OclAny =
   	let sel : OclAny = thisModule.traces.getDefaultSourceElements(var) in
       if sel.oclIsUndefined() then
       	OclUndefined
       else
       	let te : OclAny = sel.getSourceElements().get(0).getSourceOf().getTargetElement(target_pattern_name) in
           if te.oclIsUndefined() then
           	OclUndefined
           else
           	te.getObject()
           endif
      endif;

helper def : resolveMatchedSingleIfExists(var : OclAny, target_pattern_name : String) : OclAny =
   	let sel : OclAny = thisModule.traces.getDefaultSourceElement(var) in
       if sel.oclIsUndefined() then
       	OclUndefined
       else
       	let te : OclAny = sel.getSourceOf().getTargetElement(target_pattern_name) in
           if te.oclIsUndefined() then
           	OclUndefined
           else
           	te.getObject()
           endif
      endif;

helper context OclAny def : debug(msg: String) : OclAny =
	thisModule.theHOOK.log(msg, self)
;
       
helper def: dataAccessSuffix(): String ='_PortIdAccess_';
helper def: callPrefix(): String ='call';

helper def: theHOOK : ATLHOOKS!HookAccess = ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first();

helper def: getAllInstances(category: String) : Sequence(AADLI!ComponentInstance) = 
	AADLI!ComponentInstance.allInstancesFrom('IN')->select(e|e.category.getName()=category);


helper context AADLBA!ThreadImplementation def : callSequence() : AADLBA!SubprogramCallSequence =
	self.ownedSubprogramCallSequence->first()
;

helper context AADLI!SubprogramCallSequence def: isComputeEntryPointOf(c: AADLI!InstanceObject): Boolean =
	c.ownedPropertyAssociation->exists(
				e | 
				e.property.name = 'Compute_Entrypoint_Call_Sequence'
				and
				e.ownedValue->exists(f|f.ownedValue.containmentPathElement->first().namedElement=self)
			)
;

helper context AADLI!SubprogramCallSequence def: modesIsComputeEntryPointOf(c: AADLI!InstanceObject): Sequence(AADLBA!Mode) =
	c.ownedPropertyAssociation->select(
				e | 
				e.property.name = 'Compute_Entrypoint_Call_Sequence'
				and
				e.ownedValue->exists(f|f.ownedValue.containmentPathElement->first().namedElement=self)
			)
			->collect(
				e | e.ownedValue->collect(ov | ov.inMode)
			)
			->flatten()
			->asSet()
;

helper context AADLI!InstanceObject def: getComputeEntryPoints(): Sequence(AADLI!SubprogramCallSequence) =
	self.ownedPropertyAssociation->select(
				e | 
				e.property.name = 'Compute_Entrypoint_Call_Sequence'
			)->collect
			(
				owned_val| owned_val.ownedValue->collect(val|val.ownedValue.containmentPathElement->first().namedElement)
			)->flatten()
;


helper context AADLBA!DirectedFeature def: isOutputFeature(): Boolean =
	self.getDirection() = #out;
		
helper context AADLBA!DirectedFeature def: isInputOutputFeature(): Boolean =
	self.getDirection() = #inOut;

helper context AADLBA!DirectedFeature def: isInputFeature(): Boolean =
	(not self.isOutputFeature() and not self.isInputOutputFeature());

helper context AADLI!FeatureInstance def: isOutputFeature(): Boolean =
	self.feature.oclIsKindOf(AADLBA!DirectedFeature) and self.direction = #out;
		
helper context AADLI!FeatureInstance def: isInputOutputFeature(): Boolean =
	self.feature.oclIsKindOf(AADLBA!DirectedFeature) and self.direction = #inOut;

helper context AADLI!FeatureInstance def: isInputFeature(): Boolean =
	(self.feature.oclIsKindOf(AADLBA!DirectedFeature) and not self.isOutputFeature() and not self.isInputOutputFeature());

helper context AADLBA!SubprogramType def: getOrderedFeature() : Sequence(AADLBA!Feauture) =
	if(self.oclIsUndefined()) then
		OclUndefined
	else
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().orderFeatures(self)
	endif
;

helper context AADLBA!SubprogramImplementation def: getOrderedFeature() : Sequence(AADLBA!Feauture) =
	self.getComponentType().getOrderedFeature();

helper context AADLBA!ComponentImplementation def: getComponentType(): AADLBA!ComponentType = 
	self.type;

helper context AADLBA!SubprogramSubcomponentType def: getSubprogramType() : AADLBA!SubprogramType = 
	if(self.oclIsKindOf(AADLBA!SubprogramType)) then
		self
	else 
		if(self.oclIsKindOf(AADLBA!SubprogramImplementation)) then
			self.type
		else
			OclUndefined
		endif
	endif
;

helper context AADLBA!SubprogramType def: getSubprogramParameters() : Sequence(AADLBA!Parameter) = 
	self.ownedParameter;

helper context AADLBA!SubprogramImplementation def: getSubprogramParameters() : Sequence(AADLBA!Parameter) = 
	self.type.ownedParameter;


helper context AADLI!Feature def : isThreadPort() : Boolean =
	self.eContainer().oclIsKindOf(AADLBA!Thread) and self.oclIsKindOf(AADLBA!Port)
;

helper context AADLI!FeatureInstance def : isThreadPort() : Boolean =
	self.getComponentInstance().category = #thread and self.feature.oclIsKindOf(AADLBA!Port)
;

helper context AADLI!ComponentInstance def : isThreadPort() : Boolean =
	false
;

helper context AADLI!Feature def : isProcessPort() : Boolean =
	self.eContainer().oclIsKindOf(AADLBA!Process) and self.oclIsKindOf(AADLBA!Port)
;

helper context AADLI!FeatureInstance def : isProcessPort() : Boolean =
	self.getComponentInstance().category=#process  and self.feature.oclIsKindOf(AADLBA!Port)
;

helper context AADLI!ComponentInstance def : isProcessPort() : Boolean =
	false
;

helper context AADLI!FeatureInstance def : isDataOrEventDataPort() : Boolean =
	(self.isEventDataPort() or self.isDataPort()); 

helper context AADLI!FeatureInstance def : isEventOrEventDataPort() : Boolean =
	(self.isEventDataPort() or self.isEventPort());

helper context AADLI!FeatureInstance def : isEventPort(): Boolean =
	self.feature.oclIsTypeOf(AADLI!EventPort);

helper context AADLI!FeatureInstance def : isEventDataPort(): Boolean =
	self.feature.oclIsTypeOf(AADLI!EventDataPort);

helper context AADLI!FeatureInstance def : isDataPort(): Boolean =
	self.feature.oclIsTypeOf(AADLI!DataPort);

helper context AADLI!FeatureInstance def : isIntraProcessFeatureInstance(): Boolean =
	not self.srcConnectionInstance->exists(e| not (e.destination.getProcess() = self.getProcess()))
	and
	not self.dstConnectionInstance->exists(e| not (e.source.getProcess() = self.getProcess()))
;

helper context AADLI!FeatureInstance def : getProcess(): AADLI!ComponentInstance =
	if(self.getComponentInstance().category=#process) then
		self.getComponentInstance()
	else
			self.getComponentInstance().getProcess()
	endif
;

helper context AADLI!ComponentInstance def : getProcess(): AADLI!ComponentInstance =
	if(self.category=#process) then
		self
	else
		self.eContainer().getProcess()
	endif
;

helper context AADLI!NamedElement def: getPeriodValue(): Integer =
	let mpv: AADLBA!ModalPropertyValue = self.getModalPropertyValue('Period') in
	if(mpv.oclIsUndefined()) then
		false
	else
		mpv.ownedValue.value
	endif
;

helper context AADLI!NamedElement def: isPeriodicThread() : Boolean =
	let mpv: AADLBA!ModalPropertyValue = self.getModalPropertyValue('Dispatch_Protocol') in
	if(mpv.oclIsUndefined()) then
		false
	else
		mpv.ownedValue.namedValue.name.toLower() = 'periodic'
	endif
;

helper context AADLI!NamedElement def: isSporadicThread() : Boolean =
	let mpv: AADLBA!ModalPropertyValue = self.getModalPropertyValue('Dispatch_Protocol') in
	if(mpv.oclIsUndefined()) then
		false
	else
		mpv.ownedValue.namedValue.name.toLower() = 'sporadic'
	endif
;

helper context AADLI!NamedElement def: isAperiodicThread() : Boolean =
	let mpv: AADLBA!ModalPropertyValue = self.getModalPropertyValue('Dispatch_Protocol') in
	if(mpv.oclIsUndefined()) then
		false
	else
		mpv.ownedValue.namedValue.name.toLower() = 'aperiodic'
	endif
;

helper context AADLI!NamedElement def: isTimedThread() : Boolean =
	let mpv: AADLBA!ModalPropertyValue = self.getModalPropertyValue('Dispatch_Protocol') in
	if(mpv.oclIsUndefined()) then
		false
	else
		mpv.ownedValue.namedValue.name.toLower() = 'timed'
	endif
;

helper context AADLI!NamedElement def: isHybridThread() : Boolean =
	let mpv: AADLBA!ModalPropertyValue = self.getModalPropertyValue('Dispatch_Protocol') in
	if(mpv.oclIsUndefined()) then
		false
	else
		mpv.ownedValue.namedValue.name.toLower() = 'hybrid'
	endif
;

helper context AADLI!FeatureInstance def: isPeriodicThreadPort(): Boolean =
	self.isThreadPort() and self.eContainer().isPeriodicThread()
;

helper context AADLI!ComponentInstance def: isPeriodicThreadPort(): Boolean =
	false
;

helper context AADLI!ConnectionInstance def: isIntraProcessConnection() : Boolean =
	self.source.eContainer().eContainer() = self.destination.eContainer().eContainer() 
;


helper context AADLI!ComponentInstance def: getPeriod() : Integer = 
	-- should call java code (PropertyUtils class) instead
	self.getModalPropertyValue('Period').ownedValue.value
;

helper context AADLI!ComponentInstance def: getDeadline() : Integer = 
	-- should call java code (PropertyUtils class) instead
	if(self.getModalPropertyValue('Deadline').oclIsUndefined()) then
		self.getModalPropertyValue('Period').ownedValue.value
	else
		self.getModalPropertyValue('Deadline').ownedValue.value
	endif
;

helper def: getBAInitialStateIdentifier(implBA: AADLBA!BehaviorAnnex) : String =
	implBA.states->any(s|s.initial=true).name
;

helper context AADLI!Connection def : uniqueName(): String =
	let component : AADLI!ComponentImplementation = self.eContainer() in
	if(not self.name.isEmpty()) then
		self.name
	else
		'cnx_generated_id_'+component.ownedConnection.indexOf(self).toString()
	endif
;

helper context AADLI!ComponentInstance def : getProcessorBinding() : Sequence(AADLI!ComponentInstance) =
	self.ownedPropertyAssociation->any(e | e.property.name = 'Actual_Processor_Binding').ownedValue->first().ownedValue.ownedListElement
	->collect(e|e.referencedInstanceObject)
;

helper context AADLI!FeatureInstance def: getInputMessagePortId(): Integer = 
	self.getComponentInstance().featureInstance->select(e| e.isInputFeature() and 
										(self.category=#eventDataPort or self.category=#eventPort)
															)->indexOf(self)
;

helper context AADLI!ComponentInstance def: getContainingThread():AADLBA!ThreadClassifier =
	if(self.eContainer().category=#thread) then
		self.eContainer()
	else
		self.eContainer().getContainingThread()
	endif
;

helper def : collectPeriodicDelayed_GlobalVariables(c: AADLI!ComponentInstance): Sequence(AADLBA!DataSubcomponent) =
	Sequence{}
;

helper def : collectPeriodicDelayed_GlobalVariablesAccesses(c: AADLI!ComponentInstance): Sequence(AADLBA!DataAccess) =
	Sequence{}
;

helper def : collectPeriodicDelayed_GlobalVariablesConnections(c: AADLI!ComponentInstance): Sequence(AADLBA!DataAccess) =
	Sequence{}
;

helper def : collectPeriodicDelayed_LocalVariablesAccesses(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!DataAccess) =
	Sequence{}
;

helper def : collectPeriodicDelayed_LocalVariablesConnections(c: AADLI!ComponentInstance, behavior: AADLI!Element): Sequence(AADLBA!DataAccess) =
	Sequence{}
;

helper def: collectPeriodicDelayed_LocalVariables(c: AADLI!ComponentInstance, behavior: Sequence(AADLI!SubprogramCallSequence)): Sequence(AADLBA!DataSubcomponent)=
	Sequence{}
;

helper def: collectPeriodicDelayed_ThreadVariables(c: AADLI!ComponentInstance, behavior: Sequence(AADLI!SubprogramCallSequence)): Sequence(AADLBA!DataSubcomponent)=
	Sequence{}
;

helper def: collectInitCallSequence(c: AADLI!ComponentInstance): AADLBA!SubprogramCallSequence =
	OclUndefined
;
