--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLI=http:///AADL2/instance
-- @atlcompiler emftvm

module Connections;

create 
	OUT 			: AADLBA
from 
	IN 				: AADLI;



helper context AADLI!Classifier def : getConnectionsInstancesImg(connectionKind: String) : Sequence(AADLBA!Connection) =
	let connectionReferenceList : Sequence(AADLI!ConnectionReference) = AADLI!ConnectionInstance->allInstancesFrom('IN')
	->select(e| e.kind.getName()=connectionKind and not(e.kind=#accessConnection and e.connectionReference->first().connection.accessCategory=#subprogram ))
	->collect(c | c.connectionReference->select(f| self.ownedConnection->includes(f.connection)))->flatten()-->collect(e|e.connectionReference)
	in
	connectionReferenceList->collect(e|e.getConnectionsReferencesImg())
;

helper context AADLI!ConnectionReference def: getConnectionsReferencesImg() : AADLBA!Connection =
	thisModule.resolveMatchedSingleIfExists(self, 'cnxImg')
;
	
abstract rule m_Connection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference
	to
		cnxImg: AADLBA!Connection(
			name <- cnxRef.name,
			source <- cnxSourceImg,
			destination <- cnxDestinationImg,
			bidirectional <- cnxRef.connection.bidirectional
		),
		cnxSourceImg : AADLBA!ConnectedElement(
			connectionEnd <- cnxRef.source,
			context <- if(cnxRef.connection.bidirectional and not cnxRef.connection.oclIsKindOf(AADLBA!AccessConnection))then
							if(not cnxRef.connection.destination.context.oclIsUndefined()) then 
								cnxRef.source.eContainer()
							else
								OclUndefined
							endif
						else if(not cnxRef.connection.source.context.oclIsUndefined()) then 
							cnxRef.source.eContainer()
							else
								OclUndefined
							endif
						endif
		),
		cnxDestinationImg : AADLBA!ConnectedElement(
			connectionEnd <- cnxRef.destination,
			context <- if(cnxRef.connection.bidirectional and not cnxRef.connection.oclIsKindOf(AADLBA!AccessConnection))then
							if(not cnxRef.connection.source.context.oclIsUndefined()) then 
								cnxRef.destination.eContainer()
							else
								OclUndefined
							endif
						else if(not cnxRef.connection.destination.context.oclIsUndefined()) then 
							cnxRef.destination.eContainer()
							else
								OclUndefined
							endif
						endif
		)
}

-- @extends m_Connection_Reference
rule m_PortConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (cnxRef.eContainer().kind = #portConnection)
	to
		cnxImg: AADLBA!PortConnection
}

-- @extends m_Connection_Reference
rule m_AccessConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (cnxRef.eContainer().kind = #accessConnection)
	to
		cnxImg: AADLBA!AccessConnection
		(accessCategory <- cnxRef.connection.accessCategory)
}

-- @extends m_Connection_Reference
rule m_ParameterConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (cnxRef.eContainer().kind = #parameterConnection)
	to
		cnxImg: AADLBA!ParameterConnection
}

-- @extends m_Connection_Reference
rule m_FeatureGroupConnection_Reference
{
	from
		cnxRef: AADLI!ConnectionReference (cnxRef.eContainer().kind = #featureGroupConnection)
	to
		cnxImg: AADLBA!FeatureGroupConnection
}

-------------------------------------------------------------------------------------
---  LAZY RULES FOR KINDS OF CONNECTIONS
-------------------------------------------------------------------------------------

unique lazy abstract rule ulr_Connection
{
  from
	cnx : AADLI!Connection
  to
    cnxImg : AADLBA!Connection(
		name <- cnx.name,
		source <- cnxImgSource,
		destination <- cnxImgDestination
	),
	cnxImgSource : AADLBA!ConnectedElement(
		connectionEnd <- cnx.source.connectionEnd,
		context <- cnx.source.context
	),
	cnxImgDestination : AADLBA!ConnectedElement(
		connectionEnd <- cnx.destination.connectionEnd,
		context <- cnx.destination.context
	)
	do { cnxImg; }
}

-- @extends ulr_Connection
unique lazy rule AccessConnection
{
  from
	cnx : AADLI!AccessConnection
  to
    cnxImg : AADLBA!AccessConnection
  do { cnxImg; }
}

-- @extends ulr_Connection
unique lazy rule ParameterConnection
{
  from
	cnx : AADLI!ParameterConnection
  to
    cnxImg : AADLBA!ParameterConnection
  do { cnxImg; }
}

lazy rule AccessConnectionInstance
{
  from
	co: AADLI!Connection,
   	source : AADLI!AccessConnectionEnd,
	destination : AADLI!AccessConnectionEnd,
	ownerImplImg : AADLBA!ComponentImplementation
  to
    co2 : AADLBA!AccessConnection(
		name <- co.name,
		source <- co2source,
		destination <- co2destination,
		accessCategory <- co.accessCategory
	),
	co2source : AADLBA!ConnectedElement(
		connectionEnd <- source,
		context <- co.source.getConnContextImg(ownerImplImg)
	),
	co2destination : AADLBA!ConnectedElement(
		connectionEnd <- destination,
		context <- co.destination.getConnContextImg(ownerImplImg)
	)
	do { co2; }
}

lazy rule PortConnection
{
  from
  	co: AADLI!Connection,
	source: AADLI!Feature,
	destination: AADLI!Feature,
	sourceContext: AADLI!Context,
	destinationContext: AADLI!Context
  to
    co2 : AADLBA!PortConnection(
		name <- co.name,
		source <- co2source,
		destination <- co2destination
	),
	co2source : AADLBA!ConnectedElement(
		connectionEnd <- source,
		context <- sourceContext
	),
	co2destination : AADLBA!ConnectedElement(
		connectionEnd <- destination,
		context <- destinationContext
	)
	do { co2; }
}

rule addDataAccessConnection(implImg: AADLBA!ComponentImplementation, name: String, param: AADLBA!DataAccess, ctx:AADLBA!Context, variable: AADLBA!DataSubcomponent)
{
  to
	connectedParam: AADLBA!ConnectedElement
	(
		connectionEnd<-param
	),
	connectedSubcomponent: AADLBA!ConnectedElement
	(
		connectionEnd<-variable
	),
	accessConnection: AADLBA!AccessConnection
	(
		name<-name,
		source<-connectedParam,
		accessCategory<-#data,
		destination<-connectedSubcomponent
	)
  do
  {
  	if(not ctx.oclIsUndefined())
  	{
  		connectedParam.setContext(ctx);
  	}
  	implImg.ownedAccessConnection <- implImg.ownedAccessConnection.including(accessConnection);
  }
}

