--
-- AADL-RAMSES
-- 
-- Copyright © 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLI=http:///AADL2/instance
-- @atlcompiler emftvm

module Properties;

-- TODO
--  ClassifierValue property kind

create 
	OUT 			: AADLBA
from 
	IN 				: AADLI;



------------------------------
--- COPY MATCHED PROPERTIES
------------------------------


helper context AADLI!NamedElement def : getPropertyAssociationImg() : Sequence (AADLBA!PropertyAssociation) = 
    self.ownedPropertyAssociation -> 
    	collect ( p |  thisModule.resolveMatchedSingleIfExists(p, 'p2'))
;

helper context AADLI!Element def: getContainerInstance(): AADLI!InstanceObject = 
	let container : AADLI!InstanceObject = self.eContainer() in
	if(container.oclIsTypeOf(AADLI!ComponentInstance)
			or container.oclIsTypeOf(AADLI!SystemInstance)
			or  container.oclIsTypeOf(AADLI!ConnectionInstance)
			or container.oclIsUndefined()) then
		container
	else
		container.getContainerInstance()
	endif
;

helper context AADLI!Property def: getAbsoluteName() : String = 
	self.eContainer().getName()+'::'+self.name
;

rule m_PropertyAssociationAppliesToSelf { 
    from 
    	p : AADLI!PropertyAssociation in IN
		(p.collectInstanceReferenceValue()->isEmpty())
    to
    	p2 : AADLBA!PropertyAssociation (
    		property <- thisModule.getProperty(p.property.getAbsoluteName()),  
    		appliesTo <- p.appliesTo,
    		inBinding <- p.inBinding,
    		append <- p.append,
    		constant <- p.constant,
			ownedValue <- p.ownedValue
    	)
}


rule m_PropertyAssociationAppliesToParent { 
    from 
    	p : AADLI!PropertyAssociation in IN
		(not p.collectInstanceReferenceValue()->isEmpty())
	using
	{
		l : Sequence(AADLI!InstanceObject) = p.eContainer().getContainmentPath(p.getReferenceRoot());
	}
    to
    	p2 : AADLBA!PropertyAssociation (
    		property <- thisModule.getProperty(p.property.getAbsoluteName()),  
    		appliesTo <- Sequence{cne},
    		inBinding <- p.inBinding,
    		append <- p.append,
    		constant <- p.constant,
			ownedValue <- p.ownedValue
    	),
		cne: AADLBA!ContainedNamedElement (
			containmentPathElement<- l->collect(e|thisModule.createContainmentPathElement(e))
		)
}

helper context AADLI!PropertyAssociation def: collectInstanceReferenceValue() : Sequence(AADLI!InstanceReferenceValue) =
	self.ownedValue->collect(e | e.ownedValue.collectInstanceReferenceValue())->flatten()
;

-- PropertyExpression

helper context AADLI!PropertyExpression def: collectInstanceReferenceValue() : Sequence(AADLI!InstanceReferenceValue) =
	Sequence{}
;

helper context AADLI!InstanceReferenceValue def: collectInstanceReferenceValue() : Sequence(AADLI!InstanceReferenceValue) =
	Sequence{self}
;

helper context AADLI!ListValue def: collectInstanceReferenceValue() : Sequence(AADLI!InstanceReferenceValue) =
	self.ownedListElement->collect(e|e.collectInstanceReferenceValue())->flatten()
;

helper context AADLI!RecordValue def: collectInstanceReferenceValue() : Sequence(AADLI!InstanceReferenceValue) =
	self.ownedFieldValue->collect(e|e.collectInstanceReferenceValue())->flatten()
;

helper context AADLI!BasicPropertyAssociation def: collectInstanceReferenceValue() : Sequence(AADLI!InstanceReferenceValue) =
	self.ownedValue.collectInstanceReferenceValue()
;

rule m_ModalPropertyValue {
    from
        mp : AADLI!ModalPropertyValue in IN
    to 
    	mp2 : AADLBA!ModalPropertyValue (
    		ownedValue <- mp.ownedValue
--					if(mp.ownedValue.isSimpleValueType() ) 
--    				then
--    				mp.ownedValue.PropertyExpression().debug(' ModalPropertyValue value ')
--					else
--    				mp.ownedValue.debug(' ModalPropertyValue value (matched)')
--					endif
			-- OSATE INSTANTIATION BUG WORKAROUND
			-- ownedValue <- mp.ownedValue
    	)
}

helper context AADLI!PropertyExpression def: isSimpleValueType() : Boolean =
	self.oclIsTypeOf(AADLI!StringLiteral) or
	self.oclIsTypeOf(AADLI!IntegerLiteral) or 
	self.oclIsTypeOf(AADLI!BooleanLiteral) or
	self.oclIsTypeOf(AADLI!RecordValue) or
	self.oclIsTypeOf(AADLI!NamedValue) or
	self.oclIsTypeOf(AADLI!RealLiteral)
	
;

rule m_BasicPropertyAssociation{
    from
    	bp : AADLI!BasicPropertyAssociation in IN
    to
    	bp2 : AADLBA!BasicPropertyAssociation(
    	property <- bp.property,
    	ownedValue <- bp.ownedValue
    	)
}

-----------------------------------------------------------------------------------------------------------------
---property value -----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

abstract rule m_PropertyExpression {
    from 
    	v : AADLI!PropertyExpression in IN
    to 
    	v2 : AADLBA!PropertyExpression
    
}

abstract rule m_PropertyValue extends m_PropertyExpression{
    from 
    	v : AADLI!PropertyValue in IN
    to
    	v2 : AADLBA!PropertyValue
    
}

rule m_Operation extends m_PropertyExpression {
    from 
    	v : AADLI!Operation in IN
    to
    	v2 : AADLBA!Operation (
    		op <- v.op,
    		ownedPropertyExpression <- v.ownedPropertyExpression
    	)
}

rule m_ListValue extends m_PropertyExpression {
    from
    	v : AADLI!ListValue in IN
    to 
    	v2 : AADLBA!ListValue (
    		-- OSATE INSTANTIATION BUG WORKAROUND
			-- ownedListElement <- v.ownedListElement
    		ownedListElement <- v.ownedListElement
			
--			->collect( e | 
--				if(e.isSimpleValueType())
--    				then
--    				e.PropertyExpression().debug(' ListValue Element ')
--					else
--    				e.debug(' ListValue Element ')
--					endif
--				)
    	)
}

-----------------------------------------------------------------------------------------------------------------

rule m_ReferenceValue extends m_PropertyValue {
    from 
    	v : AADLI!ReferenceValue in IN
    to
    	v2 : AADLBA!ReferenceValue (
    		containmentPathElement <- v.containmentPathElement
    	)
}

helper context AADLI!InstanceReferenceValue def: isParentReferenceValue(): Boolean =
	let l : Sequence(AADLI!InstanceObject) = self.referencedInstanceObject.getContainmentPath(self.getReferenceRoot())
	in
	if(l->isEmpty()) then
		true
	else
		not (self.referencedInstanceObject.getReferenceOwner() = l->at(1).eContainer())
		or self.referencedInstanceObject.getReferenceOwner().eContainer().oclIsUndefined()
	endif
--	false
;

rule m_InstanceReferenceValue extends m_PropertyValue {
    from
    	v : AADLI!InstanceReferenceValue in IN
		(not v.isParentReferenceValue() )
	using
	{
		l : Sequence(AADLI!InstanceObject) = v.referencedInstanceObject.getContainmentPath(v.getReferenceOwner());
	}
    to
        v2 : AADLBA!ReferenceValue (
    		containmentPathElement <- l->collect(e|thisModule.createContainmentPathElement(e))   			
    	)
	do
	{
		if (not v.referencedInstanceObject.oclIsKindOf(AADLI!ComponentInstance))
		{
	    	v.referencedInstanceObject.debug('WARNING!!! Class not taken into account!!!');
		}
	}
}

rule m_InstanceReferenceValueToParent extends m_PropertyValue {
    from
    	v : AADLI!InstanceReferenceValue in IN
		(v.isParentReferenceValue())
	using
	{
		l : Sequence(AADLI!InstanceObject) = v.referencedInstanceObject.getContainmentPath(v.getReferenceRoot());
	}
    to
        v2 : AADLBA!ReferenceValue (
    		containmentPathElement <- l->collect(e|thisModule.createContainmentPathElement(e))   			
    	)
	do
	{
		if (not v.referencedInstanceObject.oclIsKindOf(AADLI!ComponentInstance))
		{
	    	v.referencedInstanceObject.debug('WARNING!!! Class not taken into account!!!');
		}
	}
}

lazy rule createContainmentPathElement
{
	from
		ne: AADLI!NamedElement
	to
		cpe : AADLBA!ContainmentPathElement (
				namedElement<-if(ne.resolve().oclIsKindOf(AADLI!NamedElement)) then ne else OclUndefined endif
			)
	do
	{
		cpe;
	}
}

helper context AADLI!InstanceObject def: getContainmentPath(rootInstance: AADLI!ComponentInstance): Sequence(AADLI!InstanceObject) =
	if(rootInstance.componentInstance->union(rootInstance.featureInstance)->exists(e| e=self)) then
		Sequence{self}
	else
		rootInstance.componentInstance->collect(e | 
			if(not self.getContainmentPath(e)->isEmpty()) then
				self.getContainmentPath(e)->prepend(e)
			else
				Sequence{}
			endif)->flatten()
	endif
;

helper context AADLI!Element def: getReferenceRoot(): AADLI!ComponentInstance =
	if(self.eContainer().oclIsUndefined()) then
		self
	else
		self.eContainer().getReferenceRoot()
	endif
;

helper context AADLI!Element def: getReferenceOwner(): AADLI!ComponentInstance =
	if(self.eContainer().oclIsKindOf(AADLI!ComponentInstance) or self.eContainer().oclIsKindOf(AADLI!FeatureInstance)) then
		self.eContainer()
	else
		self.eContainer().getReferenceOwner()
	endif
;

rule m_ContainmentPathElement {
    from 
    	cpe : AADLI!ContainmentPathElement in IN
    to
    	cpe2 : AADLBA!ContainmentPathElement(
    	    arrayRange <- cpe.arrayRange,
   		 	namedElement <- 
--   		 			cpe.namedElement.debug('cloe:'
--   		 	    	+cpe.namedElement.oclType().toString()+':'+
--   		 	    	cpe.namedElement.getOwner().oclType().toString())
   		 	-- a modifier pour faire une recherche des éléments dans le modèle de sortie
   		 	if ( cpe.namedElement.oclIsKindOf(AADLI!Subcomponent) ) then
   		 		thisModule.resolveMatchedSingleIfExists(cpe.namedElement.getInstance(), 'sub')
   		 	else if ( cpe.namedElement.oclIsKindOf(AADLI!Connection) ) then 
   		 		cpe.namedElement.getInstance()
   		 	else
   		 	    cpe.namedElement.debug('WARNING!!! Class not taken into account!!!')
   		 	endif endif   		 	    
    	)    	
}

helper context AADLI!Subcomponent def : getInstance() : AADLI!ComponentInstance = 
    AADLI!ComponentInstance.allInstancesFrom('IN') ->
    	select ( i | not i.subcomponent.oclIsUndefined()) ->
    	any ( i | i.subcomponent.name = self.name and i.subcomponent.oclIsKindOf(self.oclType()))
    ;

-- a modifier pour matcher mieux les connexions avec resolveTemp 
-- pour cela il faut modifier la matching rule des connexions : elle n'a pas de clause to
-- attention ce helper n'est pas optimisé
helper context AADLI!Connection def : getInstance() : AADLBA!Connection =
    AADLBA!Connection.allInstancesFrom('OUT') -> 
    	any ( c | c.name = self.name and c.getOwner().name = self.getOwner().name )
    ;


-----------------------------------------------------------------------------------------------------------------

rule m_RecordValue extends m_PropertyValue {
    from
    	v : AADLI!RecordValue in IN
    to
    	v2 : AADLBA!RecordValue (
    		ownedFieldValue <- v.ownedFieldValue
			
--								if(v.ownedFieldValue.isSimpleValueType()) then
--									v.ownedFieldValue.PropertyExpression().debug(' RecordValue Element ')
--								else
--									v.ownedFieldValue.debug(' RecordValue Element ')
--								endif
    	)
}

-----------------------------------------------------------------------------------------------------------------

rule m_StringLiteral extends m_PropertyValue {
    from
    	v : AADLI!StringLiteral in IN
    to 
    	v2 : AADLBA!StringLiteral (
    		value <- v.value    
    	)
}

-----------------------------------------------------------------------------------------------------------------

rule m_BooleanLiteral extends m_PropertyValue {
    from
    	v : AADLI!BooleanLiteral in IN
    to 
    	v2 : AADLBA!BooleanLiteral (
    		value <- v.value    
    	)
}

-----------------------------------------------------------------------------------------------------------------

rule m_ClassifierValue extends m_PropertyValue {
    from
    	v : AADLI!ClassifierValue in IN
    to 
    	v2 : AADLBA!ClassifierValue (
    		classifier <- v.classifier 
    	)
}


-----------------------------------------------------------------------------------------------------------------

rule m_ComputedValue extends m_PropertyValue {
    from
    	v : AADLI!ComputedValue in IN
    to 
    	v2 : AADLBA!ComputedValue (
    		function <- v.function 
    	)
}

-----------------------------------------------------------------------------------------------------------------

abstract rule m_NumberValue extends m_PropertyValue {
    from
    	v : AADLI!NumberValue in IN
    to 
    	v2 : AADLBA!NumberValue (
    		unit <- v.unit
    	)
}

rule m_IntegerLiteral extends m_NumberValue {
    from
    	v : AADLI!IntegerLiteral in IN
    to 
    	v2 : AADLBA!IntegerLiteral (
    		base <- v.base,
    		value <- v.value
    	)
}


rule m_RealLiteral extends m_NumberValue {
    from 
    	v : AADLI!RealLiteral in IN
    to
    	v2 : AADLBA!RealLiteral (
    		value <- v.value    
    	)
}

-----------------------------------------------------------------------------------------------------------------

rule m_NamedValue extends m_PropertyValue {
	from
    	v : AADLI!NamedValue in IN
    to
    	v2 : AADLBA!NamedValue (
    		namedValue <- v.namedValue    
    	)
    	
}

-----------------------------------------------------------------------------------------------------------------

rule m_RangeValue extends m_PropertyValue {
	from
    	v : AADLI!RangeValue in IN
    to
    	v2 : AADLBA!RangeValue (
    		minimum <- v.minimum,
--						if(v.minimum.isSimpleValueType())then
--    						v.minimum.PropertyExpression()
--						else
--							thisModule.resolveMatchedSingleIfExists(v.minimum, 'v2')
--						endif,
    				
    		maximum <- v.maximum
--						if(v.maximum.isSimpleValueType())then
--    						v.maximum.PropertyExpression()
--						else
--							thisModule.resolveMatchedSingleIfExists(v.maximum, 'v2')
--						endif
    	)
}



------------------------------
--- COPY UNMATCHED PROPERTIES
------------------------------

helper context AADLI!NamedElement def : mapOwnedPropertyAssociationList() : Sequence (AADLBA!PropertyAssociation) =
	let result : Sequence (AADLBA!PropertyAssociation) = self.ownedPropertyAssociation->collect (e|thisModule.PropertyAssociation (e,false))->select(e| not e.oclIsUndefined())
	in
	if (not result.isEmpty()) then
		result->flatten()->select(e| not e.oclIsUndefined())
	else
		result
	endif
;

helper context AADLI!NamedElement def : mapSubcomponentsReferenceList() : Sequence (AADLBA!PropertyAssociation) =
	let result : Sequence (AADLBA!PropertyAssociation) = self.componentInstance->collect(e|e.ownedPropertyAssociation->collect (f|thisModule.PropertyAssociation (f, true)))
	in
	if (not result.isEmpty()) then
		result->flatten()->select(e| not e.oclIsUndefined())
	else
		result
	endif
;

helper def: PropertyAssociation(p : AADLI!PropertyAssociation, referencesOnly:Boolean) : AADLI!PropertyAssociation = 
	let content :Sequence(AADLBA!ModalPropertyValue) = p.ownedValue->collect(e|thisModule.ModalPropertyValue(e, referencesOnly))->select(e| not e.oclIsUndefined())
	in
	if(not content.isEmpty() and not content->oclIsUndefined())
	then
		thisModule.PropertyAssociationRule(p, content, referencesOnly)
	else
		OclUndefined
	endif
;

rule PropertyAssociationRule(p : AADLI!PropertyAssociation,
							 content: Sequence(AADLBA!ModalPropertyValue),
							 referencesOnly:Boolean)
{
	to
		p2 : AADLBA!PropertyAssociation (
			property <- p.property.debug('  property'),
			constant <- p.constant,
			append <- p.append,
			ownedValue <- content.debug('  value')
		)
	do
	{
		if(referencesOnly)
		{
			p2.appliesTo <- Sequence{thisModule.createContainedNamedElement(p.eContainer().getSubcomponentImg())};
		}
		p2;
	}
}

lazy rule createContainedNamedElement
{
	from
		ne: AADLBA!NamedElement
	to
		cne: AADLBA!ContainedNamedElement
		(containmentPathElement <- Sequence{cpe}),
		cpe: AADLBA!ContainmentPathElement
		(namedElement<-ne)
	do
	{
		cne;
	}
}

helper def:ModalPropertyValue(v : AADLI!ModalPropertyValue, referencesOnly:Boolean) : AADLBA!ModalPropertyValue =
	let content: AADLBA!PropertyExpression = v.ownedValue.PropertyExpression()
	in
	if(not content.oclIsUndefined()) then
		thisModule.ModalPropertyValueRule(v, content)
	else
		OclUndefined
	endif
;

lazy rule ModalPropertyValueRule {
	from
		v : AADLI!ModalPropertyValue,
		content: AADLBA!PropertyExpression
	to
		v2 : AADLBA!ModalPropertyValue (
			ownedValue <- content
	)
	do { v2; }
}


-------------------------------------------------------------------------------------
--  RULES FOR KINDS OF PROPERTY VALUES
-------------------------------------------------------------------------------------

-- PropertyExpression: PropertyValue: 
-- 			Operation
--			ListValue
-- PropertyValue: 
--			NumberValue
--			ClassifierValue
--			ReferenceValue
--			BooleanLiteral
--			RangeValue
--			RecordValue
--			ComputedValue
--			NamedValue
--			StringLiteral


helper context AADLI!ListValue def: PropertyExpression() : AADLBA!ListValue =
	let elements : Sequence(AADLBA!PropertyExpression) = self.ownedListElement->collect(e|e.PropertyExpression())
						->select(e| not e.oclIsUndefined()) in 
	if(not elements->isEmpty()) then
		thisModule.ListValue(self, elements)
	else
		OclUndefined
	endif
;

rule ListValue (l : AADLI!ListValue,
		elts: Sequence(AADLBA!PropertyExpression))
{
	to
		l2 : AADLBA!ListValue (
			ownedListElement <- elts->select(e|e.isSimpleValueType())->collect(e|e.PropertyExpression().debug(' ListValue Element '))
								->union(elts->select(e|not e.isSimpleValueType()).debug(' ListValue Elements '))
		)
	do { l2; }
}

helper context AADLI!Operation def: PropertyExpression() : AADLBA!Operation =
	let content : Sequence(AADLBA!PropertyExpression) = self.ownedPropertyExpressions->collect(pe|pe.PropertyExpression())->select(e| not e.oclIsUndefined()) in
	if (not content->isEmpty()) then
		thisModule.Operation(self, content)
	else
		OclUndefined
	endif
;

rule Operation(l : AADLI!Operation,	content: Sequence(AADLBA!PropertyExpression)) 
{
	to
		l2 : AADLBA!Operation (
			op <- l.op,
			ownedPropertyExpressions <- content
		)
	do { l2; }
}

helper context AADLI!BooleanLiteral def: PropertyExpression() : AADLBA!BooleanLiteral =
	thisModule.BooleanLiteral(self)
;

lazy rule BooleanLiteral {
	from
		l : AADLI!BooleanLiteral
	to
		l2 : AADLBA!BooleanLiteral (value <- l.value)
	do { l2; }
}

--helper context AADLI!ClassifierValue def: PropertyExpression(referencesOnly:Boolean) : AADLBA!ClassifierValue =
--	if(referencesOnly)then
--		OclUndefined
--	else
--		thisModule.ClassifierValue(self)
--	endif
--;
--
--lazy rule ClassifierValue {
--	from
--		l : AADLI!ClassifierValue
--	to
--		l2 : AADLBA!ClassifierValue(classifier <- l.classifier.resolve())
--	do 
--	{
--		l2; 
--	}
--}


--helper context AADLI!ComputedValue def: PropertyExpression(referencesOnly:Boolean) : AADLBA!ComputedValue =
--	if(referencesOnly)then
--		OclUndefined
--	else
--		thisModule.ClassifierValue(self)
--	endif
--;
--
--lazy rule ComputedValue {
--	from
--		l : AADLI!ComputedValue
--	to
--		l2 : AADLBA!ComputedValue (function <- l.function)
--	do { l2; }
--}

helper context AADLI!PropertyConstant def: PropertyExpression() : AADLBA!PropertyConstant =
	thisModule.PropertyConstant(self)
;

lazy rule PropertyConstant {
	from
		l : AADLI!PropertyConstant
	to
		l2 : AADLBA!PropertyConstant (constantValue <- l.constantValue) -- not containment
	do { l2; }
}

helper context AADLI!NamedValue def: PropertyExpression() : AADLBA!NamedValue =
		thisModule.NamedValue(self)
;

lazy rule NamedValue {
	from
		l : AADLI!NamedValue
	to
		l2 : AADLBA!NamedValue (namedValue <- l.namedValue)
	do { l2; }
}

--helper context AADLI!ReferenceValue def: PropertyExpression(referencesOnly:Boolean) : AADLBA!ReferenceValue =
--	if(referencesOnly)then
--		if( not self.getOwnerComponent().oclIsUndefined() )
--		then
--			thisModule.ReferenceValue(self)
--		else
--			OclUndefined
--		endif
--	else
--		OclUndefined
--	endif
--;
--
--lazy rule ReferenceValue {
--	from
--		l : AADLI!ReferenceValue
--	using
--	{
--		ref : AADLI!Subcomponent = l.containmentPathElement->first().namedElement;
--			
--		o : AADLI!ComponentInstance = l.getOwnerComponent();
--		subi : AADLI!ComponentInstance = o.getReferenceValueContainer(l);
--		sub : AADLBA!Subcomponent = thisModule.resolveMatchedSingleIfExists(subi,'sub');
--	}
--	to
--		l2 : AADLBA!ReferenceValue (containmentPathElement <- Sequence {cpe2,cpe1}),
--		cpe1 : AADLBA!ContainmentPathElement (namedElement <- sub),
--		cpe2 : AADLBA!ContainmentPathElement (namedElement <- o.getSubcomponentImg())
--	do {
--		l2;
--	}
--}

--helper context AADLI!ComponentInstance def:getReferenceValueContainer(l: AADLI!ReferenceValue) : AADLI!ComponentInstance =
--  let ref : AADLI!Subcomponent = l.containmentPathElement->first().namedElement in
--  	self.componentInstance->any(subc|subc.name=ref.name)
--;
--
--helper context AADLI!InstanceReferenceValue def: PropertyExpression(referencesOnly:Boolean) : AADLI!InstanceReferenceValue =
--	if(referencesOnly)then
--		let containmentPathOrder: Integer = thisModule.getInstanceReferenceInContainmentPath(true, self.getContainerInstance(), self.referencedInstanceObject)  
--		in
--		
--		if(containmentPathOrder=1)
--		then
--			thisModule.FirstOrderInstanceReferenceValue(self)
--		else if (containmentPathOrder=2)
--			then
--				thisModule.SecondOrderInstanceReferenceValue(self)
--			else if (containmentPathOrder>2) then
--				OclUndefined.debug('ERROR: Only Second Order RefenrenceValue have been implemented')
--				else
--					OclUndefined
--				endif
--			endif
--		endif
--	else
--		OclUndefined
--	endif
--;
--
--
--helper def : ContainmentPathOrder : Integer = 0;
--
--rule getInstanceReferenceInContainmentPath (first: Boolean, container: AADLI!InstanceObject, ref: AADLI!InstanceObject)
--{
--	do
--	{
--		if(first)
--		{
--			thisModule.ContainmentPathOrder<-0;
--		}
--		if(container = ref.eContainer())
--		{
--			thisModule.ContainmentPathOrder<-0;
--		}
--		else
--		{
--		if(container.eContainer().oclIsKindOf(AADLI!ComponentInstance))
--		{
--			if(container.eContainer().componentInstance->contains(ref))
--			{
--				thisModule.ContainmentPathOrder<-thisModule.ContainmentPathOrder+1;
--			}
--			else
--			{
--				if(not ref.eContainer().oclIsUndefined())
--				{
--					thisModule.ContainmentPathOrder<-thisModule.ContainmentPathOrder+1;
--					thisModule.getInstanceReferenceInContainmentPath(false, container, ref.eContainer());
--				}
--				else
--				thisModule.ContainmentPathOrder<-0;
--				
--			}
--		}
--	 		
--		else
--		{
--			thisModule.ContainmentPathOrder<-0;
--			thisModule.ContainmentPathOrder.debug('ERROR: Container of ComponentInstance, SystemInstance, or 
--				ConnectionInstance is not of subtype of ComponentInstance');
--		}
--		}
--		thisModule.ContainmentPathOrder;
--	}
--}
--
--lazy rule FirstOrderInstanceReferenceValue {
--	from
--		l : AADLI!InstanceReferenceValue
--	to
--		l2 : AADLBA!ReferenceValue(containmentPathElement <- Sequence{path}),
--		path : AADLBA!ContainmentPathElement (namedElement <- l.referencedInstanceObject.getSubcomponentImg())
--	do
--	{
--		l2;
--	}
--}
--
--lazy rule SecondOrderInstanceReferenceValue {
--	from
--		l : AADLI!InstanceReferenceValue
--	to
--		l2 : AADLBA!ReferenceValue(containmentPathElement <- Sequence{path1,path2}),
--		path1 : AADLBA!ContainmentPathElement (namedElement <- l.referencedInstanceObject.eContainer().getSubcomponentImg()),
--		path2 : AADLBA!ContainmentPathElement (namedElement <- l.referencedInstanceObject.getSubcomponentImg())
--	do
--	{
--		l2;
--	}
--}

helper context AADLI!IntegerLiteral def: PropertyExpression() : AADLBA!IntegerLiteral =
	thisModule.IntegerLiteral(self)
;

lazy rule IntegerLiteral {	
	from
		l : AADLI!IntegerLiteral
	to
		l2 : AADLBA!IntegerLiteral (
			unit <- l.unit,
			value <- l.value,
			base <- l.base)
	do { l2; }
}

helper context AADLI!RealLiteral def: PropertyExpression() : AADLBA!RealLiteral =
	thisModule.RealLiteral(self)
;

lazy rule RealLiteral {
	from
		l : AADLI!RealLiteral
	to
		l2 : AADLBA!RealLiteral (
			unit <- l.unit,
			value <- l.value)
	do { l2; }
}

helper context AADLI!RangeValue def: PropertyExpression() : AADLBA!RangeValue =
	thisModule.RangeValue(self)
;

rule RangeValue (l : AADLI!RangeValue)
{
	to
		l2 : AADLBA!RangeValue (
			minimum <- l.minimum.PropertyExpression(), 
			maximum <- l.maximum.PropertyExpression(), 
			delta <- l.delta
		)
	do { l2; }
}

helper context AADLI!RecordValue def: PropertyExpression() : AADLBA!RecordValue =
	thisModule.RecordValue(self)
;

rule RecordValue(l : AADLI!RecordValue,
				 referencesOnly:Boolean)
{
	to
		l2 : AADLBA!RecordValue (
			ownedFieldValue <- l.ownedFieldValue->collect(fv|thisModule.BasicPropertyAssociation(fv, referencesOnly))
		)
	do { l2; }
}

rule BasicPropertyAssociation(bpa : AADLI!BasicPropertyAssociation)
{
	to
		bpa2 : AADLBA!BasicPropertyAssociation (
			property <- bpa.property,
			ownedValue <- if(bpa.ownedValue.isSimpleValueType()) then
							bpa.ownedValue.PropertyExpression()
						  else
						  	bpa.ownedValue
						  endif
		)
	do { bpa2; }
}

helper context AADLI!StringLiteral def: PropertyExpression() : AADLBA!StringLiteral =
	thisModule.StringLiteral(self)
;

lazy rule StringLiteral{
	from
		l : AADLI!StringLiteral
	to
		l2 : AADLBA!StringLiteral (value <- l.value)
	do { l2; }
}

helper context AADLI!UnitLiteral def: PropertyExpression() : AADLBA!UnitLiteral =
	thisModule.UnitLiteral(self)
;

lazy rule UnitLiteral{
	from
		l : AADLI!UnitLiteral
	to
		l2 : AADLBA!UnitLiteral (name <- l.name)
	do { l2; }
}