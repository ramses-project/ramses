--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLI=http:///AADL2/instance
-- @atlcompiler emftvm

module Implementations;

-- TODO
--  ClassifierValue property kind

create 
	OUT 			: AADLBA
from 
	IN 				: AADLI;


helper context AADLI!ComponentImplementation def: needsCopy(): Boolean =
	true
;

unique lazy rule Realization {
	from
		typeImg : AADLBA!ComponentType
	to
		realization : AADLBA!Realization (implemented <- typeImg)
	do
	{
		realization;
	}
}

abstract rule m_Component_Implementation {
 from
    impl : AADLI!ComponentImplementation
	(impl.needsCopy())
 to
 	implImg : AADLBA!ComponentImplementation (
 		name             			<- impl.name,
		ownedComment     			<- impl.ownedComment,
		ownedPortConnection  		<- impl.getConnectionsInstancesImg('portConnection')->excluding(OclUndefined),
		ownedAccessConnection  		<- impl.getConnectionsInstancesImg('accessConnection')->excluding(OclUndefined),
		ownedParameterConnection 	<- impl.getConnectionsInstancesImg('parameterConnection')->excluding(OclUndefined),
		ownedFeatureGroupConnection <- impl.getConnectionsInstancesImg('featureGroupConnection')->excluding(OclUndefined),
		ownedRealization 			<- thisModule.Realization(impl.type.resolve()),
		-- should be in a factorized rule for Classifier
		ownedMode                   <- impl.getModesInstancesImg(),
		ownedModeTransition         <- impl.getModesTransitionInstancesImg(),
		ownedFlowImplementation     <- impl.ownedFlowImplementation,
		ownedEndToEndFlow           <- impl.ownedEndToEndFlow
 	)
 do
 {
 	thisModule.addImportedUnitFromInputModel(thisModule.public(), impl);
 }
}

--@extends m_Component_Implementation
rule m_Bus_Implementation {
 from
 	impl : AADLI!BusImplementation
 to
 	implImg : AADLBA!BusImplementation (
		ownedVirtualBusSubcomponent <- impl.getSubcomponentsInstances('virtual bus')
 	)
}

--@extends m_Component_Implementation
rule m_VirtualBus_Implementation {
 from
 	impl : AADLI!VirtualBusImplementation
 to
 	implImg : AADLBA!VirtualBusImplementation (
		ownedVirtualBusSubcomponent <- impl.getSubcomponentsInstances('virtual bus')
 	)
}

--@extends m_Component_Implementation
rule m_Device_Implementation {
 from 
 	impl : AADLI!DeviceImplementation
 to 
 	implImg : AADLBA!DeviceImplementation (
		ownedBusSubcomponent 		<- impl.getSubcomponentsInstances('bus'),
		ownedVirtualBusSubcomponent <- impl.getSubcomponentsInstances('virtual bus')
 	)
}

--@extends m_Component_Implementation
rule m_Processor_Implementation {
 from 
 	impl : AADLI!ProcessorImplementation
 to 
 	implImg : AADLBA!ProcessorImplementation (
		ownedVirtualProcessorSubcomponent 	<- impl.getSubcomponentsInstances('virtual processor'),
		ownedBusSubcomponent 				<- impl.getSubcomponentsInstances('bus'),
		ownedVirtualBusSubcomponent 		<- impl.getSubcomponentsInstances('virtual bus')
 	)
}

--@extends m_Component_Implementation
rule m_VirtualProcessor_Implementation {
 from 
 	impl : AADLI!VirtualProcessorImplementation
 to 
 	implImg : AADLBA!VirtualProcessorImplementation (
		ownedVirtualProcessorSubcomponent 	<- impl.getSubcomponentsInstances('virtual processor'),
		ownedVirtualBusSubcomponent 		<- impl.getSubcomponentsInstances('virtual bus')
	)
}

--@extends m_Component_Implementation
rule m_Memory_Implementation {
 from 
 	impl : AADLI!MemoryImplementation
 to 
 	implImg : AADLBA!MemoryImplementation (
		ownedMemorySubcomponent <- impl.getSubcomponentsInstances('memory')->excluding(OclUndefined)
	)
}

--@extends m_Component_Implementation
rule m_Process_Implementation {
 from
 	impl : AADLI!ProcessImplementation
 to 
 	implImg : AADLBA!ProcessImplementation (
		ownedThreadGroupSubcomponent 	<- impl.getSubcomponentsInstances('threadgroup')->excluding(OclUndefined),
		ownedThreadSubcomponent 		<- impl.getSubcomponentsInstances('thread')->excluding(OclUndefined),
		ownedSubprogramSubcomponent 	<- impl.getSubcomponentsInstances('subprogram')->excluding(OclUndefined),
		ownedDataSubcomponent 			<- impl.getSubcomponentsInstances('data')->excluding(OclUndefined)
	)
}

helper context AADLI!SystemImplementation def:  isRoot() : Boolean = 
	AADLI!ComponentInstance.allInstancesFrom('IN')->select(e|e.subcomponent.oclIsUndefined())
			->exists(e| e.componentImplementation=self)
;

helper context AADLI!ComponentInstance def: getSystemSubcomponent(): Sequence(AADLI!ComponentInstance) =
	self.componentInstance->select(e|e.category=#system)
	->collect(e|e.getSystemSubcomponent())
	->union(Sequence{self})
;

--@extends m_Component_Implementation
rule m_System_Implementation {
  from
  	impl : AADLI!SystemImplementation
	(
		impl.isRoot()
	)
  to
  	implImg : AADLBA!SystemImplementation
	(
		name                              <- if(thisModule.theHOOK.getOutputPackageName().oclIsUndefined()) then
											 impl.name
											 else
											 thisModule.theHOOK.getOutputPackageName()+'.impl'
											 endif,
		ownedMemorySubcomponent           <- impl.getSubcomponentsInstances('memory')->excluding(OclUndefined),
		ownedProcessorSubcomponent        <- impl.getSubcomponentsInstances('processor')->excluding(OclUndefined),
		ownedDeviceSubcomponent           <- impl.getSubcomponentsInstances('device')->excluding(OclUndefined),
		ownedSystemSubcomponent           <- impl.getSubcomponentsInstances('system')->excluding(OclUndefined),
		ownedVirtualProcessorSubcomponent <- impl.getSubcomponentsInstances('virtual processor')->excluding(OclUndefined),
		ownedProcessSubcomponent          <- impl.getSubcomponentsInstances('process')->excluding(OclUndefined),
		ownedSubprogramSubcomponent       <- impl.getSubcomponentsInstances('subprogram')->excluding(OclUndefined),
		ownedDataSubcomponent             <- impl.getSubcomponentsInstances('data')->excluding(OclUndefined),
		ownedBusSubcomponent             <- impl.getSubcomponentsInstances('bus')->excluding(OclUndefined)
	)
}

--@extends m_Component_Implementation
rule m_ThreadGroup_Implementation {
 from
 	impl : AADLI!ThreadGroupImplementation 
 to 
 	implImg : AADLBA!ThreadGroupImplementation (
		ownedThreadGroupSubcomponent 	<- impl.getSubcomponentsInstances('threadgroup'),
		ownedThreadSubcomponent 		<- impl.getSubcomponentsInstances('thread'),
		ownedSubprogramSubcomponent 	<- impl.getSubcomponentsInstances('subprogram'),
		ownedDataSubcomponent 			<- impl.getSubcomponentsInstances('data')
	)
}

--@extends m_Component_Implementation
rule m_Thread_Implementation {
 from 
 	impl : AADLI!ThreadImplementation
 to 
 	implImg : AADLBA!ThreadImplementation (
 		name <- impl.name,
		ownedSubprogramSubcomponent 	<- impl.getSubcomponentsInstances('subprogram'),
		ownedDataSubcomponent 			<- impl.getSubcomponentsInstances('data'),
		ownedSubprogramCallSequence     <- impl.ownedSubprogramCallSequence,
		ownedParameterConnection		<- impl.getAllConnections()->select(e| e.oclIsKindOf(AADLI!ParameterConnection) )->collect(e|thisModule.ParameterConnection(e)),
		ownedAccessConnection			<- impl.ownedAccessConnection->collect(e|thisModule.AccessConnection(e))
	)
}

--@extends m_Component_Implementation
rule m_Subprogram_Implementation {
 from
 	impl : AADLI!SubprogramImplementation
 to 
 	implImg : AADLBA!SubprogramImplementation (
		ownedPropertyAssociation    <- impl.mapOwnedPropertyAssociationList(),
		ownedSubprogramCallSequence <- impl.ownedSubprogramCallSequence,
		ownedAccessConnection		<- impl.ownedAccessConnection->collect(co|thisModule.AccessConnection(co, implImg))
	)
}

rule m_SubprogramCallSequence
{
	from
		seq : AADLI!SubprogramCallSequence
	to
		seqImg: AADLBA!SubprogramCallSequence(
			name <- seq.name,
			ownedSubprogramCall <- seq.ownedSubprogramCall
		)
	do
	{
		seqImg;
	}
}

rule m_SubprogramCall
{
	from
		sc: AADLI!SubprogramCall
	to
		call : AADLBA!SubprogramCall (
			name <- sc.name,
			calledSubprogram <- sc.calledSubprogram
		)
	do
	{
		call;
	}
}


--helper def : copyCallSequence(c : AADLI!ComponentInstance, impl : AADLI!ComponentImplementation, implImg : AADLBA!ComponentImplementation) : AADLBA!SubprogramCallSequence =
--	if( impl.behaviorFromImpl().oclIsUndefined() ) then
--		if(impl.behaviorFromComputeEntryPoint().oclIsUndefined()) then
--			OclUndefined
--		else
--			thisModule.mapComputeEntrypoint(implImg, c, impl)
--		endif
--	else
--		thisModule.mapCallSequence(implImg, c, impl)
--	endif
--;


----@extends m_Component_Implementation
--rule m_Data_Implementation {
--  from
-- 	impl : AADLI!DataImplementation 
-- to 
-- 	implImg : AADLBA!DataImplementation (
--		ownedPropertyAssociation 	<- impl.mapOwnedPropertyAssociationList(),
--		ownedDataSubcomponent 		<- impl.getSubcomponentsInstances('data')
--	)
--}

