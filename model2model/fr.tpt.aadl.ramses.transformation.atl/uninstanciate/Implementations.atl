--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLI=http:///AADL2/instance
-- @atlcompiler emftvm

module Implementations;

-- TODO
--  ClassifierValue property kind

create 
	OUT 			: AADLBA
from 
	IN 				: AADLI;



unique lazy rule Realization {
	from
		typeImg : AADLBA!ComponentType
	to
		realization : AADLBA!Realization (implemented <- typeImg)
	do
	{
		realization;
	}
}

abstract rule m_Component_Implementation {
 from
    impl : AADLI!ComponentImplementation
 to
 	implImg : AADLBA!ComponentImplementation (
 		name             			<- impl.name,
		ownedComment     			<- impl.ownedComment,
		ownedPortConnection  		<- impl.getConnectionsInstancesImg('portConnection'),
		ownedAccessConnection  		<- impl.getConnectionsInstancesImg('accessConnection'),
		ownedParameterConnection 	<- impl.getConnectionsInstancesImg('parameterConnection'),
		ownedFeatureGroupConnection <- impl.getConnectionsInstancesImg('featureGroupConnection'),
		ownedRealization 			<- thisModule.Realization(impl.type.resolve())
 	)
}

--@extends m_Component_Implementation
rule m_Bus_Implementation {
 from
 	impl : AADLI!BusImplementation
 to
 	implImg : AADLBA!BusImplementation (
		ownedVirtualBusSubcomponent <- impl.getSubcomponentsInstances('virtual bus')
 	)
}

--@extends m_Component_Implementation
rule m_VirtualBus_Implementation {
 from
 	impl : AADLI!VirtualBusImplementation
 to
 	implImg : AADLBA!VirtualBusImplementation (
		ownedVirtualBusSubcomponent <- impl.getSubcomponentsInstances('virtual bus')
 	)
}

--@extends m_Component_Implementation
rule m_Device_Implementation {
 from 
 	impl : AADLI!DeviceImplementation
 to 
 	implImg : AADLBA!DeviceImplementation (
		ownedBusSubcomponent 		<- impl.getSubcomponentsInstances('bus'),
		ownedVirtualBusSubcomponent <- impl.getSubcomponentsInstances('virtual bus')
 	)
}

--@extends m_Component_Implementation
rule m_Processor_Implementation {
 from 
 	impl : AADLI!ProcessorImplementation
 to 
 	implImg : AADLBA!ProcessorImplementation (
		ownedVirtualProcessorSubcomponent 	<- impl.getSubcomponentsInstances('virtual processor'),
		ownedBusSubcomponent 				<- impl.getSubcomponentsInstances('bus'),
		ownedVirtualBusSubcomponent 		<- impl.getSubcomponentsInstances('virtual bus')
 	)
}

--@extends m_Component_Implementation
rule m_VirtualProcessor_Implementation {
 from 
 	impl : AADLI!VirtualProcessorImplementation
 to 
 	implImg : AADLBA!VirtualProcessorImplementation (
		ownedVirtualProcessorSubcomponent 	<- impl.getSubcomponentsInstances('virtual processor'),
		ownedVirtualBusSubcomponent 		<- impl.getSubcomponentsInstances('virtual bus')
	)
}

--@extends m_Component_Implementation
rule m_Memory_Implementation {
 from 
 	impl : AADLI!MemoryImplementation
 to 
 	implImg : AADLBA!MemoryImplementation (
		ownedMemorySubcomponent <- impl.getSubcomponentsInstances('memory')
	)
}

--@extends m_Component_Implementation
rule m_Process_Implementation {
 from
 	impl : AADLI!ProcessImplementation
 to 
 	implImg : AADLBA!ProcessImplementation (
		ownedThreadGroupSubcomponent 	<- impl.getSubcomponentsInstances('threadgroup'),
		ownedThreadSubcomponent 		<- impl.getSubcomponentsInstances('thread'),
		ownedSubprogramSubcomponent 	<- impl.getSubcomponentsInstances('subprogram'),
		ownedDataSubcomponent 			<- impl.getSubcomponentsInstances('data')
	)
}

--@extends m_Component_Implementation
rule m_System_Implementation {
  from
  	impl : AADLI!SystemImplementation
	
  to
  	implImg : AADLBA!SystemImplementation
	(
		name                              <- if(thisModule.theHOOK.getOutputPackageName().oclIsUndefined()) then
											 impl.name
											 else
											 thisModule.theHOOK.getOutputPackageName()+'.impl'
											 endif,
		ownedMemorySubcomponent           <- impl.getSubcomponentsInstances('memory'),
		ownedProcessorSubcomponent        <- impl.getSubcomponentsInstances('processor'),
		ownedDeviceSubcomponent           <- impl.getSubcomponentsInstances('device'),
		ownedVirtualProcessorSubcomponent <- impl.getSubcomponentsInstances('virtual processor'),
		ownedProcessSubcomponent          <- impl.getSubcomponentsInstances('process'),
		ownedSubprogramSubcomponent       <- impl.getSubcomponentsInstances('subprogram'),
		ownedSystemSubcomponent           <- impl.getSubcomponentsInstances('system'),
		ownedDataSubcomponent             <- impl.getSubcomponentsInstances('data')
	)
}

--@extends m_Component_Implementation
rule m_ThreadGroup_Implementation {
 from
 	impl : AADLI!ThreadGroupImplementation 
 to 
 	implImg : AADLBA!ThreadGroupImplementation (
		ownedThreadGroupSubcomponent 	<- impl.getSubcomponentsInstances('threadgroup'),
		ownedThreadSubcomponent 		<- impl.getSubcomponentsInstances('thread'),
		ownedSubprogramSubcomponent 	<- impl.getSubcomponentsInstances('subprogram'),
		ownedDataSubcomponent 			<- impl.getSubcomponentsInstances('data')
	)
}

--@extends m_Component_Implementation
rule m_Thread_Implementation {
 from 
 	impl : AADLI!ThreadImplementation
 to 
 	implImg : AADLBA!ThreadImplementation (
 		name <- impl.name,
		ownedSubprogramSubcomponent 	<- impl.getSubcomponentsInstances('subprogram'),
		ownedDataSubcomponent 			<- impl.getSubcomponentsInstances('data'),
		ownedSubprogramCallSequence     <- impl.ownedSubprogramCallSequence,
		ownedParameterConnection		<- impl.ownedParameterConnection->collect(e|thisModule.ParameterConnection(e)),
		ownedAccessConnection			<- impl.ownedAccessConnection->collect(e|thisModule.AccessConnection(e))
	)
 do
 {
 	if(impl.ownedAnnexSubclause->exists(e| e.oclIsTypeOf(AADLBA!BehaviorAnnex)))
	{
		implImg.ownedAnnexSubclause.add
		(
--			thisModule.copyBehaviorAnnex(c, impl.ownedAnnexSubclause->any(e| e.oclIsTypeOf(AADLBA!BehaviorAnnex)) )
		);	
	}
 	implImg;
 }
}

--@extends m_Component_Implementation
rule m_Subprogram_Implementation {
 from
 	impl : AADLI!SubprogramImplementation 
 to 
 	implImg : AADLBA!SubprogramImplementation (
		ownedPropertyAssociation    <- impl.mapOwnedPropertyAssociationList(),
		ownedSubprogramCallSequence <- thisModule.copyCallSequence(OclUndefined, impl,implImg),
		ownedAccessConnection		<- impl.ownedAccessConnection->collect(co|thisModule.AccessConnection(co, implImg))
	)
 do
 {
 	if(not impl.ownedAnnexSubclause->any(e| e.oclIsTypeOf(AADLBA!BehaviorAnnex)).oclIsUndefined())
	{
		implImg.ownedAnnexSubclause.add
		(
			thisModule.copyBehaviorAnnex(OclUndefined, impl.ownedAnnexSubclause->any(e| e.oclIsTypeOf(AADLBA!BehaviorAnnex)) )
		);
	}
 }
}

helper def : copyCallSequence(c : AADLI!ComponentInstance, impl : AADLI!ComponentImplementation, implImg : AADLBA!ComponentImplementation) : AADLBA!SubprogramCallSequence =
	if( impl.behaviorFromImpl().oclIsUndefined() ) then
		if(impl.behaviorFromComputeEntryPoint().oclIsUndefined()) then
			OclUndefined
		else
			thisModule.mapComputeEntrypoint(implImg, c, impl)
		endif
	else
		thisModule.mapCallSequence(implImg, c, impl)
	endif
;


----@extends m_Component_Implementation
--rule m_Data_Implementation {
--  from
-- 	impl : AADLI!DataImplementation 
-- to 
-- 	implImg : AADLBA!DataImplementation (
--		ownedPropertyAssociation 	<- impl.mapOwnedPropertyAssociationList(),
--		ownedDataSubcomponent 		<- impl.getSubcomponentsInstances('data')
--	)
--}

