-- @nsURI AADLI=http:///AADL2/instance

module Misc;

create 
	OUT 			: AADLBA
from 
	IN 				: AADLI;

uses AADLCopyHelpers;
uses AADLICopyHelpers;

-------------------------------------------------------------------------------------
--  RULES FOR SUBPROGRAM CALLS
-------------------------------------------------------------------------------------

rule CallSequence (impl : AADLI!ComponentImplementation, implImg : AABDLBA!ComponentImplementation) {
	using
	{
		callImg : AADLBA!SubprogramCall = OclUndefined;
	}
	to
		s2 : AADLBA!SubprogramCallSequence (name <- impl.callSequenceFromImpl().name)
	do
	{
		impl.callSequenceFromImpl().debug('  copy call sequence');
		
		for(call in impl.callSequenceFromImpl().ownedCallSpecification)
		{
			callImg <- thisModule.SubprogramCall(call,impl, implImg);
			s2.getOwnedCallSpecifications().add(callImg);
			callImg.debug('  copy subprogram call');
		}
		
		-- ownedSubprogramCallSequence <- Sequence{impl.callSequenceFromImpl().ownedCallSpecification->collect(call | thisModule.SubprogramCall(call) )}
		
		s2;
	}
}
	
rule SubprogramCall (s : AADLI!SubprogramCall, 
					 impl : AADLI!ComponentImplementation, 
					 implImg : AADLBA!ComponentImplementation) {
	to
		s2 : AADLBA!SubprogramCall (
			name <- s.name,
			calledSubprogram <- if (s.calledSubprogram.oclIsKindOf(AADLI!SubprogramType)) then
									thisModule.Type(s.calledSubprogram)
								else
									thisModule.Implementation(OclUndefined,s.calledSubprogram, thisModule.Type(s.calledSubprogram.getOwnedRealization().implemented))
								endif
		)
	do { s2; }
}

rule Comment {
	from
		c : AADLI!Comment
	to
		c2 : AADLBA!Comment(body <- c.body, ownedComment <- c.ownedComment)
}