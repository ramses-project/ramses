--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLI=http:///AADL2/instance

module Features;

-- TODO
--  ClassifierValue property kind

create 
	OUT 			: AADLBA
from 
	IN 				: AADLI;

uses AADLCopyHelpers;
uses AADLICopyHelpers;
-------------------------------------------------------------------------------------
--  RULES FOR KINDS OF FEATURES
-------------------------------------------------------------------------------------

rule Feature (f: AADLI!Feature, featureImg : AADLBA!Feature) {
	do
	{
		if (f.oclIsKindOf(AADLI!DataPort)) { featureImg <- thisModule.DataPort(f); }
		else if(f.oclIsKindOf(AADLI!EventDataPort)) { featureImg <- thisModule.EventDataPort(f); }
		else if(f.oclIsKindOf(AADLI!EventPort)) { featureImg <- thisModule.EventPort(f); }
		else if(f.oclIsKindOf(AADLI!DataAccess)) { featureImg <- thisModule.DataAccess(f); }
		else if(f.oclIsKindOf(AADLI!Parameter)) { featureImg <- thisModule.Parameter(f); }
		featureImg;
	}
}

lazy abstract rule Port {
	from
		f : AADLI!Port
	to
		f2 : AADLBA!Port
}

lazy rule DataPort extends Port {
	from
		f : AADLI!DataPort
	to
		f2 : AADLBA!DataPort
		(
			name <- f.name.debug('  copy data port'),
			direction <- f.direction,
			dataFeatureClassifier <- f.dataFeatureClassifier.mapDataClassifier(),
			ownedPropertyAssociation <- f.mapOwnedPropertyAssociationList()
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().copyLocationReference(f2, f);
		f2;
	}
}

lazy rule EventDataPort extends Port {
	from
		f : AADLI!EventDataPort
	to
		f2 : AADLBA!EventDataPort
		(
			name <- f.name.debug('  copy event data port'),
			direction <- f.direction,
			dataFeatureClassifier <- f.mapDataClassifier(),
			ownedPropertyAssociation <- f.mapOwnedPropertyAssociationList()
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().copyLocationReference(f2, f);
		f2;
	}
}

lazy rule EventPort extends Port{
	from
		f : AADLI!EventPort
	to
		f2 : AADLBA!EventPort
		(
			name <- f.name.debug('  copy event port'),
			direction <- f.direction,
			ownedPropertyAssociation <- f.mapOwnedPropertyAssociationList()
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().copyLocationReference(f2, f);
		f2;
	}
}

lazy rule DataAccess {
	from
		f : AADLI!DataAccess
	to
		f2 : AADLBA!DataAccess
		(
			name <- f.name.debug('  copy data access'),
			dataFeatureClassifier <- f.mapDataClassifier(),
			kind <- f.kind,
			ownedPropertyAssociation <- f.mapOwnedPropertyAssociationList()
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().copyLocationReference(f2, f);
		f2;
	}
}

lazy rule Parameter {
	from
		f : AADLI!Parameter
	to
		f2 : AADLBA!Parameter
		(
			name <- f.name.debug('  copy parameter'),
			direction <- f.direction,
			dataFeatureClassifier <- f.mapDataClassifier(),
			ownedPropertyAssociation <- f.mapOwnedPropertyAssociationList()
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().copyLocationReference(f2, f);
		f2;
	}
}



-------------------------------------------------------------------------------------
--  RULES FOR KINDS OF CONNECTIONS
-------------------------------------------------------------------------------------
rule AccessConnectionInstance (co: AADLI!Connection,
					   source : AADLI!AccessConnectionEnd,
					   destination : AADLI!AccessConnectionEnd,
					   ownerImplImg : AADLBA!ComponentImplementation){
  to
    co2 : AADLBA!AccessConnection(
		name <- co.name,
		source <- co2source,
		destination <- co2destination,
		accessCategory <- co.accessCategory
	),
	co2source : AADLBA!ConnectedElement(
		connectionEnd <- source,
		context <- co.source.getConnContextImg(ownerImplImg)
	),
	co2destination : AADLBA!ConnectedElement(
		connectionEnd <- destination,
		context <- co.destination.getConnContextImg(ownerImplImg)
	)
	do { co2; }
}

rule AccessConnection (co : AADLI!AccessConnection,
					 ownerImplImg : AADLBA!ComponentImplementation){
  to
    co2 : AADLBA!AccessConnection(
		name <- co.name,
		source <- co2source,
		destination <- co2destination,
		accessCategory <- co.accessCategory
	),
	co2source : AADLBA!ConnectedElement(
		connectionEnd <- co.source.getConnFeatureImg(ownerImplImg).debug('Source Access Connection End'),
		context <- co.source.getConnContextImg(ownerImplImg)
	),
	co2destination : AADLBA!ConnectedElement(
		connectionEnd <- co.destination.getConnFeatureImg(ownerImplImg).debug('Destination Access Connection End'),
		context <- co.destination.getConnContextImg(ownerImplImg)
	)
	do { co2; }
}

rule ParameterConnection (co : AADLI!ParameterConnection,
							   ownerImplImg : AADLBA!ComponentImplementation){
  to
    co2 : AADLBA!ParameterConnection(
		name <- co.name,
		source <- co2source,
		destination <- co2destination
	),
	co2source : AADLBA!ConnectedElement(
		connectionEnd <- co.source.getConnFeatureImg(ownerImplImg).debug('Parameter Connection End 1'),
		context <- co.source.getConnContextImg(ownerImplImg)
	),
	co2destination : AADLBA!ConnectedElement(
		connectionEnd <- co.destination.getConnFeatureImg(ownerImplImg).debug('Parameter Connection End 2'),
		context <- co.destination.getConnContextImg(ownerImplImg)
	)
	do { co2; }
}

rule PortConnection (co : AADLI!PortConnection,
					 ownerImplImg : AADLBA!ComponentImplementation){
  to
    co2 : AADLBA!PortConnection(
		name <- co.name,
		source <- co2source,
		destination <- co2destination
	),
	co2source : AADLBA!ConnectedElement(
		connectionEnd <- co.source.getConnFeatureImg(ownerImplImg),
		context <- co.source.getConnContextImg(ownerImplImg)
	),
	co2destination : AADLBA!ConnectedElement(
		connectionEnd <- co.destination.getConnFeatureImg(ownerImplImg),
		context <- co.destination.getConnContextImg(ownerImplImg)
	)
	do { co2; }
}

rule addDataAccessConnection(implImg: AADLBA!ComponentImplementation, name: String, param: AADLBA!DataAccess, ctx:AADLBA!Context, variable: AADLBA!DataSubcomponent)
{
  to
	connectedParam: AADLBA!ConnectedElement
	(
		connectionEnd<-param
	),
	connectedSubcomponent: AADLBA!ConnectedElement
	(
		connectionEnd<-variable
	),
	accessConnection: AADLBA!AccessConnection
	(
		name<-name,
		source<-connectedParam,
		accessCategory<-#data,
		destination<-connectedSubcomponent
	)
  do
  {
  	if(not ctx.oclIsUndefined())
  	{
  		connectedParam.setContext(ctx);
  	}
  	implImg.ownedAccessConnection.add(accessConnection);
  }
}

