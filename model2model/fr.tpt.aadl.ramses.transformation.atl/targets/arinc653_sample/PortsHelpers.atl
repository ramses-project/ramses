--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

library PortHelpers;

-------------------------------------------------------------------------------------------
----		ADDED HELPERS
-------------------------------------------------------------------------------------------

helper context AADLI!Port def : retreiveMessageAddress(threadImplImg: AADLBA!ThreadImplementation) : AADLBA!DataSubcomponent =
	threadImplImg.ownedDataSubcomponent->any(e| e.name=self.name+'_MsgAddr')
;

helper context AADLI!Port def : retreiveLengthValue(threadImplImg: AADLBA!ThreadImplementation) : AADLBA!DataSubcomponent =
	threadImplImg.ownedDataSubcomponent->any(e| e.name=self.name+'_Length')
;

helper def : retreiveReturnCodeValue(threadImplImg: AADLBA!ThreadImplementation) : AADLBA!DataSubcomponent =
	if(threadImplImg.ownedDataSubcomponent->any(e| e.name='runtime_call_ret').oclIsUndefined() )
	then
		thisModule.addReturnCodeDataSubcomponent(threadImplImg)
	else
		threadImplImg.ownedDataSubcomponent->any(e| e.name='runtime_call_ret')
	endif
;

helper context AADLI!Port def : retreiveTimeOutValue(threadImplImg: AADLBA!ThreadImplementation) : AADLBA!DataSubcomponent =
	threadImplImg.ownedDataSubcomponent->any(e| e.name=self.name+'_TimeOut')
;

helper context AADLI!Port def : retreiveValidityValue(threadImplImg: AADLBA!ThreadImplementation) : AADLBA!DataSubcomponent =
	threadImplImg.ownedDataSubcomponent->any(e| e.name=self.name+'_Validity')
;

helper context AADLI!Port def : retreiveIdAccess(threadImplImg: AADLBA!ThreadImplementation) : AADLBA!DataAccess =
	threadImplImg.type.ownedDataAccess->any(e| e.name=self.name+thisModule.dataAccessSuffix()+self.direction)
;

helper context AADLI!Port def : retreiveIdValue(processImplImg: AADLBA!ProcessImplementation) : AADLBA!DataAccess =
	processImplImg.ownedDataSubcomponent->any(e| e.name=self.name+thisModule.dataSubcomponentSuffix())
;

helper def: dataSubcomponentSuffix(): String = '_Instance';
helper def: dataAccessSuffix(): String ='_PortIdAccess_';
helper def: callPrefix(): String ='call_';


helper context AADLI!ConnectionInstanceEnd def : getDestinations() : Sequence(AADLI!ConnectionInstanceEnd) =
    AADLI!ConnectionInstance->allInstancesFrom('IN')->select(c|c.source=self)
                            ->collect(c|c.destination)
;

helper context AADLI!ConnectionInstanceEnd def : getSources() : Sequence(AADLI!ConnectionInstanceEnd) =
    AADLI!ConnectionInstance->allInstancesFrom('IN')->select(c|c.destination=self)
                            ->collect(c|c.source)
; 

helper context AADLI!ComponentInstance def : getProcessorBinding() : AADLI!SubcomponentImplementation =
	self.ownedPropertyAssociation->any(e | e.property = AADLBA!Property->allInstancesFrom('DEPLOYMENT_PROPERTIES')->any(f|f.name = 'Actual_Processor_Binding')).appliesTo
;

helper def : getTimeOutInitValue(port : AADLBA!Feature) : AADLBA!PropertyExpression =
	if(port.getModalPropertyValue('Timeout').oclIsUndefined())
	then
		OclUndefined
	else
		if(port.getModalPropertyValue('Timeout').ownedValue.value.oclIsUndefined())
		then
			OclUndefined
		else
			thisModule.toStringLiteral(port.getModalPropertyValue('Timeout').ownedValue.value.toString())
		endif
	endif
;



