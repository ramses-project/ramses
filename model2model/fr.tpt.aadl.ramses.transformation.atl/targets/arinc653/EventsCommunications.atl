--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore

module EventsCommunications;
create OUT : AADLBA 	from 		IN : AADLI,
									AADL_RUNTIME: AADLBA,
									DATA_MODEL: AADLBA,
									PROGRAMMING_PROPERTIES: AADLBA,
									HOOKS: ATLHOOKS,

									ARINC653_RUNTIME: AADLBA;


uses Services;
uses AADLCopyHelpers;
uses AADLICopyHelpers;
uses Uninstanciate;
uses PropertiesTools;


--------------------------------------------
---                EVENT                 ---
--------------------------------------------


rule addWaitEvent(seq : AADLBA!SubprogramCallSequence,
				  fi: AADLI!FeatureInstance,
				  impl:  AADLI!ComponentImplementation,
				  implImg: AADLBA!ComponentImplementation)
{
	do
	{
		thisModule.addTimeOutSubcomponent(fi,implImg);
		-- add call to Wait_Event
		thisModule.addWaitEventCallSpecification
		(
			seq,
			'Wait_Event'.asSubprogramType('ARINC653_RUNTIME'),
			fi,
			implImg
		);
	}
}

rule addSetEvent(seq : AADLBA!SubprogramCallSequence,
				 fi: AADLI!FeatureInstance,
				 impl:  AADLI!ComponentImplementation,
				 implImg: AADLBA!ComponentImplementation)
{
	do
	{
		for(dest in fi.getDestinations())
		{
			if(dest.eContainer().eContainer() = fi.eContainer().eContainer())
			{
				-- add call to Set_Event
				thisModule.addSetEventCallSpecification
				(
					seq,
					'Set_Event'.asSubprogramType('ARINC653_RUNTIME'),
					fi,
					implImg
				);
				
			}
		}
	}
}


rule addWaitEventCallSpecification(seq : AADLBA!SubprogramCallSequence,
								   spg: AADLBA!SubprogramType,
								   p: AADLI!FeatureInstance,
								   implImg: AADLBA!ThreadImplementation)
{
	using
	{
		TIME_OUT: AADLBA!DataSubcomponent = p.retreiveTimeOutValue(implImg);
	}
	to
		call: AADLBA!SubprogramCall
		(
			name<-thisModule.callPrefix()+spg.name+p.name,
			calledSubprogram<-spg
		),
		connectedParam_TIME_OUT: AADLBA!ConnectedElement
		(
			connectionEnd<-spg.ownedParameter->first().debug('TimeOut Parameter Connection End')
		),
		connectedSubcomponent_TIME_OUT: AADLBA!ConnectedElement
		(
			connectionEnd<-TIME_OUT.debug('TimeOut Subcomponent Connection End')
		),
		paramConnection_TIME_OUT: AADLBA!ParameterConnection
		(
			name<-p.name+'_to_TimeOut',
			source<-connectedParam_TIME_OUT,
			destination<-connectedSubcomponent_TIME_OUT
		)
	do
	{
		seq.getOwnedCallSpecifications().add(call);
		thisModule.addEventCallSpecification(call, spg, p, implImg);
		connectedParam_TIME_OUT.setContext(call);
		implImg.getOwnedParameterConnections().add(paramConnection_TIME_OUT);
	}
}

rule addSetEventCallSpecification(seq : AADLBA!SubprogramCallSequence,
								  spg: AADLBA!SubprogramType,
								  p: AADLI!FeatureInstance,
								  implImg: AADLBA!ThreadImplementation)
{
	to
		call: AADLBA!SubprogramCall
		(
			name<-thisModule.callPrefix()+spg.name+p.name,
			calledSubprogram<-spg
		)
	do
	{
		thisModule.addEventCallSpecification(call, spg, p, implImg);
		seq.getOwnedCallSpecifications().add(call);
	}
}

rule addEventCallSpecification(call: AADLBA!SubprogramCall, spg: AADLBA!SubprogramType, p: AADLI!FeatureInstance, implImg: AADLBA!ThreadImplementation)
{
	using
	{
		EVENT_ID: AADLBA!DataAccess = p.getFeatureImg(); 
		RETURN_CODE: AADLBA!DataSubcomponent = thisModule.retreiveReturnCodeValue(implImg);
	}
	to
		connected_EVENT_ID_Access: AADLBA!ConnectedElement
		(
			connectionEnd<-spg.ownedDataAccess->first().debug('Id Data Access Connection End')
		),
		connected_EVENT_ID: AADLBA!ConnectedElement
		(
			connectionEnd<-EVENT_ID.debug('Id Subcomponent Connection End')
		),
		accessIDConnection: AADLBA!AccessConnection
		(
			name<-p.name+'_to_ID',
			accessCategory<-#data,
			source<-connected_EVENT_ID_Access,
			destination<-connected_EVENT_ID
		),
		
		connectedParam_RETURN_CODE: AADLBA!ConnectedElement
		(
			connectionEnd<-spg.ownedParameter->any(e|e.name='RETURN_CODE').debug('Subprogram Parameter Connection End')
		),
		connectedSubcomponent_RETURN_CODE: AADLBA!ConnectedElement
		(
			connectionEnd<-RETURN_CODE.debug('Subprogram Subcomponent Connection End')
		),
		paramConnection_RETURN_CODE: AADLBA!ParameterConnection
		(
			name<-p.name+'_to_ReturnCode',
			source<-connectedParam_RETURN_CODE,
			destination<-connectedSubcomponent_RETURN_CODE
		)
		
	do
	{
		
		connected_EVENT_ID_Access.setContext(call);
		connectedParam_RETURN_CODE.setContext(call);
		
		implImg.getOwnedAccessConnections().add(accessIDConnection);
		implImg.getOwnedParameterConnections().add(paramConnection_RETURN_CODE);

		
		call.debug('Created Call Sequence');
		call;
	}
}

