--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

-- @nsURI AADLI=http:///AADL2/instance
-- @atlcompiler emftvm

module BehaviorAnnexTools;

create 
	OUT 				   : AADLBA
from 
	IN 					   : AADLI;


helper context String def : asLiteral() : AADLBA!StringLiteral =
	thisModule.CreateStringLiteral(self)
;

helper context AADLBA!BehaviorVariable def : getName() : String =
	self.LocalVariableDeclarators->first().identifierOwned.id
;

helper context AADLBA!BehaviorAnnex def : getBehaviorVariableForParameter(
	owner : AADLBA!ComponentImplementation, 
	call : AADLBA!SubprogramCall,
	p : AADLI!Parameter) : AADLBA!BehaviorVariable =
		
	if (p.direction=#out) then
		thisModule.CreateVariableForParameter(p)
	else
		-- data access or "out port" of a previous called subprogram
		self.behaviorVariables->any(v | v.getName() = owner.getOwnedConnections()
							  ->any(co|co.destination.context=call 
							  	       and co.destination.connectionEnd = p).source.connectionEnd.asBehaviorName())
	endif
;

helper context AADLBA!Element def : asBehaviorExpression(index : AADLBA!IntegerValue) : AADLBA!SimpleExpression = 
	thisModule.ReferenceAsExpression(self,index)
;

helper context Integer def : asBehaviorExpression() : AADLBA!SimpleExpression =
	thisModule.IntegerAsBehaviorExpression(self)
;

helper context AADLBA!Feature def : asBehaviorName() : String =
	self.eContainer().name.concat('_').concat(self.name)
;


helper context AADLBA!AbstractNamedValue def : asNamedValue() : AADLBA!NamedValue =
	thisModule.CreateNamedValue (self)
;

rule ReferenceAsExpression (c : AADLBA!Element, index : AADLBA!IntegerValue) {
 to
  expr					: AADLBA!SimpleExpression(terms <- Sequence {thisModule.ReferenceAsTerm(c,index)})
 do { expr; }
}

rule ReferenceAsTerm (c : AADLBA!Element, index : AADLBA!IntegerValue) {
 to
  term					: AADLBA!Term (factors <- Sequence {
  								if (c.oclIsKindOf(AADLBA!BehaviorVariable)) then
									thisModule.BehaviorVariableAsFactor(c)
								else
									if (c.oclIsKindOf(AADLBA!DataSubcomponent)) then
										thisModule.DataSubcomponentAsFactor(c,index)
									else
										thisModule.PropertyConstantAsFactor(c,index)
									endif
								endif
						  })
 do { term; }
}

rule BehaviorVariableAsFactor (c : AADLBA!BehaviorVariable) {
 to
  factor				: AADLBA!Factor (firstValue <- value),
  value					: AADLBA!BehaviorVariable (dataClassifier <- c)
 do { factor; }
}

rule DataSubcomponentAsFactor (c : AADLBA!DataSubcomponent, index : AADLBA!IntegerValue) {
 to
  factor				: AADLBA!Factor (firstValue <- value),
  value					: AADLBA!DataSubcomponentHolder (element <- c)						
 do { factor; }
}

rule DataSubcomponentAsValueExpression (c : AADLBA!DataSubcomponent, index : AADLBA!IntegerValue) {
	using
	{
		factor : AADLBA!Factor = thisModule.DataSubcomponentAsFactor(c, index);
	}
	to
		r: AADLBA!Relation (firstExpression<-se),
		se: AADLBA!SimpleExpression(terms<-Sequence{t}),
		t: AADLBA!Term(factors<-Sequence{factor}),
		valueExpression: AADLBA!ValueExpression(relations<-Sequence{r})
	
	do
	{
		valueExpression;
	}
}

rule PropertyConstantAsFactor (c : AADLBA!PropertyConstant, index : AADLBA!IntegerValue) {
 to
  factor				: AADLBA!Factor (valueOwned <- value),
  value					: AADLBA!BehaviorPropertyConstant (aadlRef <- c)
 do { factor; }
}

rule IntegerAsBehaviorExpression (i : Integer) {
 to
  expr					: AADLBA!SimpleExpression(terms <- Sequence {thisModule.IntegerAsTerm(i)})
 do { expr; }
}

rule IntegerAsTerm (i : Integer) {
 to
  term					: AADLBA!Term (factors <- Sequence {thisModule.IntegerAsFactor(i)})
 do { term; }
}

rule IntegerAsFactor (i : Integer) {
 to
  factor				: AADLBA!Factor (valueOwned <- value),
  value					: AADLBA!BehaviorIntegerLiteral (value <- i.longValue())
 do { factor; }
}

rule CreateNamedValue (value : AADLBA!AbstractNamedValue) {
	to
		v : AADLBA!NamedValue(namedValue <- value)
	do { v; }
}

rule CreateStringLiteral (val : String) {
 to
   s : AADLBA!StringLiteral (value <- val)
 do {s;}
}

lazy rule CreateIntegerVariable {
 from
 	s : String
 to
 	v : AADLBA!BehaviorVariable (
		dataClassifier <- 'Integer'.asBaseType()
	)
 do { v; }
}

lazy rule generateCalledSubprogramHolder
{
	from
		elt: AADLBA!Subprogram
	to
	  result: AADLBA!CalledSubprogramHolder
	  (
	  	element<-elt 
	  )
}
