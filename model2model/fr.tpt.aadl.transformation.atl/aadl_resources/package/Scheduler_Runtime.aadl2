package Scheduler_Runtime
public

with Base_Types;
with Data_Model;

with Scheduler_Constants;

subprogram Initialize_Scheduler
end Initialize_Scheduler;

subprogram Context_Switch
features
  PreviousTask : in parameter Base_Types::Integer;
  CurrentTask  : in parameter Base_Types::Integer;
end Context_Switch;

subprogram Replenish_Task
features
  Task         : in parameter Base_Types::Integer;
  TasksInfo	   : in out parameter Scheduling_Struct.impl;
end Replenish_Task;

subprogram Busy_Wait
features
  WaitingTime  : in parameter Base_Types::Integer;
end Busy_Wait;

subprogram Current_Time
features
  TimeValue    : out parameter Base_Types::Integer;
end Current_Time;



data Scheduling_Struct
properties
  Data_Model::Data_Representation => Struct;
end Scheduling_Struct;

data IntPropertyArray
properties
  Data_Model::Data_Representation => Array;
  Data_Model::Dimension => (1);
  Data_Model::Base_Type => (classifier (Base_Types::Integer));
end IntPropertyArray;

data implementation Scheduling_Struct.impl
subcomponents
  Priority     				: data IntPropertyArray;
  Period     	  			: data IntPropertyArray;
  Deadline     				: data IntPropertyArray;
  Capacity     				: data IntPropertyArray; -- used only for scheduler capacity
  IOTime  					: data IntPropertyArray;
  TimeBeforeInterruption 	: data IntPropertyArray;
end Scheduling_Struct.impl;

data Scheduler_Internal_Control
properties
  Data_Model::Data_Representation => Struct;
end Scheduler_Internal_Control;

data implementation Scheduler_Internal_Control.impl
subcomponents
  Elected							 : data Base_Types::Integer;
  UsedCapacity						 : data Base_Types::Integer { Data_Model::Initial_Value => ("0"); };
end Scheduler_Internal_Control.impl;



subprogram Compute_Available_Time
features
  t0 			 : in parameter Base_Types::Integer;
  t1 			 : in out parameter Base_Types::Integer;
  available_time : in out parameter Base_Types::Integer;
annex behavior_specification {**
  states
    s0 : initial state;
    s1 : final state;
  transitions
    s0-[]->s1 {
        Scheduler_Runtime::Current_Time!(t1);
        available_time := available_time - (t1-t0)
    };
**};
end Compute_Available_Time;

end Scheduler_Runtime;