-- @nsURI AADLI=http:///AADL2/instance

module Features;

-- TODO
--  ClassifierValue property kind

create 
	OUT 			: AADLBA
from 
	IN 				: AADLI;

uses AADLCopyHelpers;
uses AADLICopyHelpers;
-------------------------------------------------------------------------------------
--  RULES FOR KINDS OF FEATURES
-------------------------------------------------------------------------------------


lazy rule DataPort {
	from
		f : AADLI!DataPort
	to
		f2 : AADLBA!DataPort
		(
			name <- f.name.debug('  copy data port'),
			direction <- f.direction,
			dataFeatureClassifier <- f.dataFeatureClassifier.mapClassifier(),
			ownedPropertyAssociation <- f.mapOwnedPropertyAssociationList()
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().copyLocationReference(f2, f);
		f2;
	}
}

lazy rule EventDataPort {
	from
		f : AADLI!EventDataPort
	to
		f2 : AADLBA!EventDataPort
		(
			name <- f.name.debug('  copy event data port'),
			direction <- f.direction,
			dataFeatureClassifier <- f.mapClassifier(),
			ownedPropertyAssociation <- f.mapOwnedPropertyAssociationList()
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().copyLocationReference(f2, f);
		f2;
	}
}

lazy rule EventPort {
	from
		f : AADLI!EventPort
	to
		f2 : AADLBA!EventPort
		(
			name <- f.name.debug('  copy event port'),
			direction <- f.direction,
			ownedPropertyAssociation <- f.mapOwnedPropertyAssociationList()
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().copyLocationReference(f2, f);
		f2;
	}
}

lazy rule DataAccess {
	from
		f : AADLI!DataAccess
	to
		f2 : AADLBA!DataAccess
		(
			name <- f.name.debug('  copy data access'),
			dataFeatureClassifier <- f.mapClassifier(),
			kind <- f.kind,
			ownedPropertyAssociation <- f.mapOwnedPropertyAssociationList()
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().copyLocationReference(f2, f);
		f2;
	}
}

lazy rule Parameter {
	from
		f : AADLI!Parameter
	to
		f2 : AADLBA!Parameter
		(
			name <- f.name.debug('  copy parameter'),
			direction <- f.direction,
			dataFeatureClassifier <- f.mapClassifier(),
			ownedPropertyAssociation <- f.mapOwnedPropertyAssociationList()
		)
	do
	{
		ATLHOOKS!HookAccess.allInstancesFrom('HOOKS')->first().copyLocationReference(f2, f);
		f2;
	}
}









-------------------------------------------------------------------------------------
--  RULES FOR KINDS OF CONNECTIONS
-------------------------------------------------------------------------------------
lazy rule AccessConnection {
  from
	co : AADLI!AccessConnection
  using
  {
	ownerImplImg : AADLBA!ComponentImplementation = AADLBA!ComponentImplementation->allInstancesFrom('OUT')->any(i|i.name=co.eContainer().name);
  }
  to
    co2 : AADLBA!AccessConnection(
		name <- co.name,
		accessCategory <- co.accessCategory,
		source <- co2source,
		destination <- co2destination
	),
	co2source : AADLBA!ConnectedElement(
		connectionEnd <- co.source.getConnFeatureImg(ownerImplImg),
		context <- co.source.getConnContextImg(ownerImplImg)
	),
	co2destination : AADLBA!ConnectedElement(
		connectionEnd <- co.destination.getConnFeatureImg(ownerImplImg),
		context <- co.destination.getConnContextImg(ownerImplImg)
	)
	do { co2; }
}

rule ParameterConnection (co : AADLI!ParameterConnection,
							   ownerImplImg : AADLBA!ComponentImplementation){
  to
    co2 : AADLBA!ParameterConnection(
		name <- co.name,
		source <- co2source,
		destination <- co2destination
	),
	co2source : AADLBA!ConnectedElement(
		connectionEnd <- co.source.getConnFeatureImg(ownerImplImg),
		context <- co.source.getConnContextImg(ownerImplImg)
	),
	co2destination : AADLBA!ConnectedElement(
		connectionEnd <- co.destination.getConnFeatureImg(ownerImplImg),
		context <- co.destination.getConnContextImg(ownerImplImg)
	)
	do { co2; }
}

rule PortConnection (co : AADLI!PortConnection,
					 ownerImplImg : AADLBA!ComponentImplementation){
  to
    co2 : AADLBA!PortConnection(
		name <- co.name,
		source <- co2source,
		destination <- co2destination
	),
	co2source : AADLBA!ConnectedElement(
		connectionEnd <- co.source.getConnFeatureImg(ownerImplImg),
		context <- co.source.getConnContextImg(ownerImplImg)
	),
	co2destination : AADLBA!ConnectedElement(
		connectionEnd <- co.destination.getConnFeatureImg(ownerImplImg),
		context <- co.destination.getConnContextImg(ownerImplImg)
	)
	do { co2; }
}