module Atl2Trc4Rule;

create OUT : MM_TRC from IN : MM_ATL;

helper def : inElements : Set(MM_ATL!LocatedElement) = MM_ATL!LocatedElement.allInstancesFrom('IN');

--returns module name of the IN model
helper def : getModuleName : String = MM_ATL!Module.allInstancesFrom('IN')->first().name;

helper def : getTransformationId(transformationName : String) : String =
	thisModule.getModuleName+'.'+transformationName;

--gets the output module object
helper def : getOutputModule() : MM_ATL!Module = 
thisModule.resolveTemp(MM_TRC!Module.allInstancesFrom('IN')->first(), 't')
;

rule Module {
    from s : MM_ATL!"ATL::Module" (thisModule.inElements->includes(s))
    to t : MM_TRC!"trc::Module" (    		
    	name  <- s.name,
		path  <- s.location,
		rules <- s.elements -> collect(e | e.name)),

	   t2 :MM_TRC!"TrcSpecification" 
		(
			moduleList <- t3
		),
	   t3 :MM_TRC!"ModuleList" 
	   (
	   		modules <- t
	   )
}


rule ModuleMatchedRule {
    from 
		s : MM_ATL!"ATL::MatchedRule" in IN
	to
		t : MM_ATL!"trc::trcRule" (
			ruleName <- s.name,
			superRule <- s.superRule,
			isAbstract <- s.isAbstract
		)	
}


