module Atl2Trc4Rule;

create OUT : MM_TRC from IN : MM_ATL;

helper def : inElements : Set(MM_ATL!LocatedElement) = MM_ATL!LocatedElement.allInstancesFrom('IN');

--returns module name of the IN model
helper def : getModuleName : String = MM_ATL!Module.allInstancesFrom('IN')->first().name;

helper def : getTransformationId(transformationName : String) : String =
	thisModule.getModuleName+'.'+transformationName;

--gets the output module object
helper def : getOutputModule() : MM_ATL!Module = 
thisModule.resolveTemp(MM_TRC!Module.allInstancesFrom('IN')->first(), 't')
;

--rule Module {
--    from s : MM_ATL!"ATL::Module" (thisModule.inElements->includes(s))
--    to t : MM_TRC!"dsl::Module" 
--		(    		
--    	name  <- s.name,
--		path  <- s.name+'_Module_path',
--		ruleName <- thisModule.resolveTemp(s.name, 't') -- location dont give the path
--		),
--
--	   t2 :MM_TRC!"TrcSpecification" 
--		(
--			moduleList <- t3
--		),
--	   t3 :MM_TRC!"ModuleList"
--	   (
--	   		modules <- t
--	   )
--}

rule ModuleList {
	from
		modL : MM_ATL!Module,
		matchR : MM_ATL!MatchedRule
    to t : MM_TRC!"dsl::Module" 
		(    		
    	name  <- modL.name,
--		path  <- modL.name+'_Module_path',
		rules <- t4 -- location dont give the path
		),
	   t2 :MM_TRC!"TrcSpecification" 
		(
			moduleList <- t3
		),
	   t3 :MM_TRC!"ModuleList"
	   (
	   		modules <- t
	   ),
	   t4 :MM_TRC!"trcRule"
	   (
	   		name <- matchR.name
	   )
}

--rule ModuleMatchedRule {
--    from 
--		s : MM_ATL!"ATL::MatchedRule" in IN
--	to
--		t : MM_TRC!"dsl::trcRule" (
--			ruleName <- s.name
----			superRule <- s.superRule,
----			isAbstract <- s.isAbstract
--		)	
--}


--module Atl2Trc4Rule;
--
--create OUT : MM_TRC from IN : MM_ATL;
--
--helper def : inElements : Set(MM_ATL!LocatedElement) = MM_ATL!LocatedElement.allInstancesFrom('IN');
--
----returns module name of the IN model
--helper def : getModuleName : String = MM_ATL!Module.allInstancesFrom('IN')->first().name;
--
--helper def : getTransformationId(transformationName : String) : String =
--	thisModule.getModuleName+'.'+transformationName;
--
----gets the output module object
--helper def : getOutputModule() : MM_ATL!Module = 
--thisModule.resolveTemp(MM_TRC!Module.allInstancesFrom('IN')->first(), 't')
--;
--
--rule Module {
--    from s : MM_ATL!"ATL::Module" (thisModule.inElements->includes(s))
--    to t : MM_TRC!"trc::Module" 
--		(    		
--    	name  <- s.name,
--		path  <- s.name+'_Module_path' -- location dont give the path
--		),
--
--	   t2 :MM_TRC!"TrcSpecification" 
--		(
--			moduleList <- t3
--		),
--	   t3 :MM_TRC!"ModuleList"
--	   (
--	   		modules <- t
--	   )
--}
--
--
--rule ModuleMatchedRule {
--    from 
--		s : MM_ATL!"ATL::MatchedRule" in IN
--	to
--		t : MM_TRC!"trc::trcRule" (
--			ruleName <- s.name,
--			superRule <- s.superRule,
--			isAbstract <- s.isAbstract
--		)	
--}
--
--
----		t :MM_TRC!"trcRule"
----	    (
----	   	ruleName <- s.elements -> collect(e | e.Module.name)
----  	    )
--
