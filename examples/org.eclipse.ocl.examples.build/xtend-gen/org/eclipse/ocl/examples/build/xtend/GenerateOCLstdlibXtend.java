/**
 * Copyright (c) 2013,2014 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     E.D.Willink - initial API and implementation
 */
package org.eclipse.ocl.examples.build.xtend;

import java.util.List;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.ocl.examples.build.xtend.GenerateOCLstdlib;
import org.eclipse.ocl.examples.domain.utilities.DomainUtil;
import org.eclipse.ocl.examples.pivot.DataType;
import org.eclipse.ocl.examples.pivot.Enumeration;
import org.eclipse.ocl.examples.pivot.Library;
import org.eclipse.ocl.examples.pivot.Root;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class GenerateOCLstdlibXtend extends GenerateOCLstdlib {
  protected String defineConstantType(final DataType type) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _name = type.getName();
      boolean _equals = "Boolean".equals(_name);
      if (_equals) {
        _builder.append("protected final PrimitiveType ");
        String _partialName = this.partialName(type);
        String _plus = ("_" + _partialName);
        String _prefixedSymbolName = this.getPrefixedSymbolName(type, _plus);
        _builder.append(_prefixedSymbolName, "");
        _builder.append(" = OCLstdlib._Boolean;");
      } else {
        String _name_1 = type.getName();
        boolean _equals_1 = "Classifier".equals(_name_1);
        if (_equals_1) {
          _builder.newLineIfNotEmpty();
          _builder.append("protected final PrimitiveType ");
          String _partialName_1 = this.partialName(type);
          String _plus_1 = ("_" + _partialName_1);
          String _prefixedSymbolName_1 = this.getPrefixedSymbolName(type, _plus_1);
          _builder.append(_prefixedSymbolName_1, "");
          _builder.append(" = OCLstdlib._Classifier;");
        } else {
          String _name_2 = type.getName();
          boolean _equals_2 = "Integer".equals(_name_2);
          if (_equals_2) {
            _builder.newLineIfNotEmpty();
            _builder.append("protected final PrimitiveType ");
            String _partialName_2 = this.partialName(type);
            String _plus_2 = ("_" + _partialName_2);
            String _prefixedSymbolName_2 = this.getPrefixedSymbolName(type, _plus_2);
            _builder.append(_prefixedSymbolName_2, "");
            _builder.append(" = OCLstdlib._Integer;");
          } else {
            String _name_3 = type.getName();
            boolean _equals_3 = "Real".equals(_name_3);
            if (_equals_3) {
              _builder.newLineIfNotEmpty();
              _builder.append("protected final PrimitiveType ");
              String _partialName_3 = this.partialName(type);
              String _plus_3 = ("_" + _partialName_3);
              String _prefixedSymbolName_3 = this.getPrefixedSymbolName(type, _plus_3);
              _builder.append(_prefixedSymbolName_3, "");
              _builder.append(" = OCLstdlib._Real;");
            } else {
              String _name_4 = type.getName();
              boolean _equals_4 = "String".equals(_name_4);
              if (_equals_4) {
                _builder.newLineIfNotEmpty();
                _builder.append("protected final PrimitiveType ");
                String _partialName_4 = this.partialName(type);
                String _plus_4 = ("_" + _partialName_4);
                String _prefixedSymbolName_4 = this.getPrefixedSymbolName(type, _plus_4);
                _builder.append(_prefixedSymbolName_4, "");
                _builder.append(" = OCLstdlib._String;");
              } else {
                String _name_5 = type.getName();
                boolean _equals_5 = "UnlimitedNatural".equals(_name_5);
                if (_equals_5) {
                  _builder.newLineIfNotEmpty();
                  _builder.append("protected final PrimitiveType ");
                  String _partialName_5 = this.partialName(type);
                  String _plus_5 = ("_" + _partialName_5);
                  String _prefixedSymbolName_5 = this.getPrefixedSymbolName(type, _plus_5);
                  _builder.append(_prefixedSymbolName_5, "");
                  _builder.append(" = OCLstdlib._UnlimitedNatural;");
                } else {
                  _builder.newLineIfNotEmpty();
                  _builder.append("protected final DataType ");
                  String _partialName_6 = this.partialName(type);
                  String _plus_6 = ("_" + _partialName_6);
                  String _prefixedSymbolName_6 = this.getPrefixedSymbolName(type, _plus_6);
                  _builder.append(_prefixedSymbolName_6, "");
                  _builder.append(" = createDataType(\"");
                  String _name_6 = type.getName();
                  _builder.append(_name_6, "");
                  _builder.append("\");");
                }
              }
            }
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  @NonNull
  protected String generateMetamodel(@NonNull final Root root) {
    String _xblockexpression = null;
    {
      Library _library = this.getLibrary(root);
      Library lib = DomainUtil.<Library>nonNullState(_library);
      List<Enumeration> allEnumerations = this.getSortedEnumerations(root);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*******************************************************************************");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Copyright (c) 2010,2014 E.D.Willink and others.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* All rights reserved. This program and the accompanying materials");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* are made available under the terms of the Eclipse Public License v1.0");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* which accompanies this distribution, and is available at");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* http://www.eclipse.org/legal/epl-v10.html");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Contributors:");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*     E.D.Willink - initial API and implementation");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*******************************************************************************");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* This code is 100% auto-generated");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* from: ");
      _builder.append(this.sourceFile, " ");
      _builder.newLineIfNotEmpty();
      _builder.append(" ");
      _builder.append("* by: org.eclipse.ocl.examples.build.xtend.generateOCLstdlib.xtend");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* and: org.eclipse.ocl.examples.build.GenerateOCLstdlibModel.mwe2");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Do not edit it.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*******************************************************************************/");
      _builder.newLine();
      _builder.append("package\t");
      _builder.append(this.javaPackageName, "");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("import java.io.IOException;");
      _builder.newLine();
      _builder.append("import java.util.ArrayList;");
      _builder.newLine();
      _builder.append("import java.util.List;");
      _builder.newLine();
      _builder.append("import java.util.Map;");
      _builder.newLine();
      _builder.append("import java.util.Set;");
      _builder.newLine();
      _builder.append("import java.util.WeakHashMap;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import org.eclipse.emf.common.notify.Notification;");
      _builder.newLine();
      _builder.append("import org.eclipse.emf.common.notify.NotificationChain;");
      _builder.newLine();
      _builder.append("import org.eclipse.emf.common.util.TreeIterator;");
      _builder.newLine();
      _builder.append("import org.eclipse.emf.common.util.URI;");
      _builder.newLine();
      _builder.append("import org.eclipse.emf.ecore.EObject;");
      _builder.newLine();
      _builder.append("import org.eclipse.emf.ecore.EReference;");
      _builder.newLine();
      _builder.append("import org.eclipse.emf.ecore.impl.BasicEObjectImpl;");
      _builder.newLine();
      _builder.append("import org.eclipse.emf.ecore.resource.Resource;");
      _builder.newLine();
      _builder.append("import org.eclipse.emf.ecore.resource.ResourceSet;");
      _builder.newLine();
      _builder.append("import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;");
      _builder.newLine();
      _builder.append("import org.eclipse.jdt.annotation.NonNull;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.domain.ids.IdManager;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.domain.ids.PackageId;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.domain.utilities.DomainUtil;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.pivot.*;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.pivot.Class;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.pivot.Package;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.pivot.library.StandardLibraryContribution;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.pivot.manager.MetaModelManager;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.pivot.resource.ASResourceImpl;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.pivot.resource.OCLASResourceFactory;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.pivot.utilities.AS2XMIid;");
      _builder.newLine();
      _builder.append("import org.eclipse.ocl.examples.pivot.utilities.PivotUtil;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/**");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* This is the ");
      _builder.append(this.uri, " ");
      _builder.append(" Standard Library");
      _builder.newLineIfNotEmpty();
      _builder.append(" ");
      _builder.append("* auto-generated from ");
      _builder.append(this.sourceFile, " ");
      _builder.append(".");
      _builder.newLineIfNotEmpty();
      _builder.append(" ");
      _builder.append("* It facilitates efficient library loading without the overheads of model reading.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* <p>");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* This Standard Library may be registered as the definition of a Standard Library for");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* the OCL evaluation framework by invoking {@link #install}.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* <p>");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* The Standard Library is normally activated when the MetaModelManager attempts");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* to locate a library type when its default Standard Library URI is the same");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* as this Standard Library.");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("@SuppressWarnings({\"nls\", \"unused\"})");
      _builder.newLine();
      _builder.append("public class ");
      _builder.append(this.javaClassName, "");
      _builder.append(" extends ASResourceImpl");
      _builder.newLineIfNotEmpty();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*\tThe static package-of-types pivot model of the Standard Library.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private static ");
      _builder.append(this.javaClassName, "\t");
      _builder.append(" INSTANCE = null;");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*\tThe URI of this Standard Library.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static final @NonNull String STDLIB_URI = \"");
      _builder.append(this.uri, "\t");
      _builder.append("\";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Return the default OCL standard Library. ");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*  This static definition auto-generated from ");
      _builder.append(this.sourceFile, "\t ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t ");
      _builder.append("*  is used as the default when no overriding copy is registered. ");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static @NonNull OCLstdlib getDefault() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("OCLstdlib oclstdlib = INSTANCE;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (oclstdlib == null) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Contents contents = new Contents();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Root libraryModel = contents.create(\"");
      String _nsURI = lib.getNsURI();
      _builder.append(_nsURI, "\t\t\t");
      _builder.append("\", \"");
      String _name = lib.getName();
      _builder.append(_name, "\t\t\t");
      _builder.append("\", \"");
      String _nsPrefix = lib.getNsPrefix();
      _builder.append(_nsPrefix, "\t\t\t");
      _builder.append("\", \"");
      String _nsURI_1 = lib.getNsURI();
      _builder.append(_nsURI_1, "\t\t\t");
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("oclstdlib = INSTANCE = new OCLstdlib(STDLIB_URI + PivotConstants.DOT_OCL_AS_FILE_EXTENSION, libraryModel);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return oclstdlib;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Return true if the default OCL standard Library has been created. ");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("//\tpublic static boolean hasDefault() {");
      _builder.newLine();
      _builder.append("//\t\treturn INSTANCE != null;");
      _builder.newLine();
      _builder.append("//\t}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Install this library in the {@link StandardLibraryContribution#REGISTRY}.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* This method may be invoked by standalone applications to replicate");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* the registration that should appear as a standard_library plugin");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* extension when running within Eclipse. ");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static void install() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("StandardLibraryContribution.REGISTRY.put(STDLIB_URI, new Loader());");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Install this library in the {@link StandardLibraryContribution#REGISTRY}");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* unless some other library contribution has already been installed.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static void lazyInstall() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (StandardLibraryContribution.REGISTRY.size() == 0) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("install();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Unnstall this library from the {@link StandardLibraryContribution#REGISTRY}.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* This method may be invoked by standalone applications to release the library");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* resources for garbage collection and memory leakage detection. ");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static void uninstall() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("StandardLibraryContribution.REGISTRY.remove(STDLIB_URI);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("INSTANCE = null;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* The Loader shares the Standard Library instance whenever this default library");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* is loaded from the registry of Standard Libraries populated by the standard_library ");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* extension point.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static class Loader implements StandardLibraryContribution");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public @NonNull StandardLibraryContribution getContribution() {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return this;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public @NonNull Resource getResource() {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return getDefault();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*\tDefine an OCL Standard Library contribution that renames the standard contribution");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*  to extend a given actual metamodel NsURI. For UML, this ensures that the self-defining");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*  OCL meta-namespaces and the self-defining UML meta-namespaces are the same.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static class RenamingLoader implements StandardLibraryContribution");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("protected final @NonNull String metamodelNsUri;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public RenamingLoader(@NonNull String metamodelNsUri) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("this.metamodelNsUri = metamodelNsUri;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public @NonNull StandardLibraryContribution getContribution() {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return this;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("public @NonNull Resource getResource() {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Contents contents = new Contents();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Root libraryModel = contents.create(\"http://www.eclipse.org/ocl/3.1.0/OCL.oclstdlib\", \"ocl\", \"ocl\", metamodelNsUri);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Resource resource = new OCLstdlib(STDLIB_URI + PivotConstants.DOT_OCL_AS_FILE_EXTENSION, libraryModel);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return resource;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*\tConstruct a copy of the OCL Standard Library with specified resource URI,");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*  and package name, prefix and namespace URI.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static @NonNull ");
      _builder.append(this.javaClassName, "\t");
      _builder.append(" create(@NonNull String asURI, @NonNull String name, @NonNull String nsPrefix, @NonNull String nsURI) {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("Contents contents = new Contents();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Root libraryModel = contents.create(asURI, name, nsPrefix, nsURI);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return new ");
      _builder.append(this.javaClassName, "\t\t");
      _builder.append("(asURI, libraryModel);");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*\tConstruct an OCL Standard Library with specified resource URI and library content.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public ");
      _builder.append(this.javaClassName, "\t");
      _builder.append("(@NonNull String asURI, @NonNull Root libraryModel) {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("super(DomainUtil.nonNullState(URI.createURI(asURI)), OCLASResourceFactory.INSTANCE);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("assert PivotUtil.isASURI(asURI);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("getContents().add(libraryModel);");
      _builder.newLine();
      _builder.append("//\t\tSystem.out.println(Thread.currentThread().getName() + \" Create \" + debugSimpleName(this));\t\t");
      _builder.newLine();
      _builder.append("//\t\tliveOCLstdlibs.put(this, null);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Overridden to inhibit entry of the static shared instance in any ResourceSet.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public NotificationChain basicSetResourceSet(ResourceSet resourceSet, NotificationChain notifications) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (this != INSTANCE) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return super.basicSetResourceSet(resourceSet, notifications);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("else {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return notifications;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Overridden to inhibit unloading of the static shared instance.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protected void doUnload() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (this != INSTANCE) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("super.doUnload();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Ensure xmi:ids are auto-generated before reference.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public EObject getEObject(String uriFragment) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (getEObjectToIDMap().isEmpty()) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("new AS2XMIid().assignIds(this, null);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return super.getEObject(uriFragment);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Overridden to trivialise loading of the static shared instance.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void load(Map<?, ?> options) throws IOException {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (this != INSTANCE) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("super.load(options);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("else {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("setLoaded(true);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Overridden to inhibit unloading of the static shared instance.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protected Notification setLoaded(boolean isLoaded) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (isLoaded || (this != INSTANCE)) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return super.setLoaded(isLoaded);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("else {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return null;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protected static class Contents extends AbstractContents");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("protected Root ");
      String _prefixedSymbolName = this.getPrefixedSymbolName(root, "root");
      _builder.append(_prefixedSymbolName, "\t\t");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("protected Library ");
      String _prefixedSymbolName_1 = this.getPrefixedSymbolName(lib, "library");
      _builder.append(_prefixedSymbolName_1, "\t\t");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("// protected Package ");
      org.eclipse.ocl.examples.pivot.Package _orphanPackage = this.getOrphanPackage(root);
      String _prefixedSymbolName_2 = this.getPrefixedSymbolName(_orphanPackage, "orphans");
      _builder.append(_prefixedSymbolName_2, "\t\t");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("protected @NonNull Root create(@NonNull String asURI, @NonNull String name, @NonNull String nsPrefix, @NonNull String nsURI)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Root theRoot = ");
      String _symbolName = this.getSymbolName(root);
      _builder.append(_symbolName, "\t\t\t");
      _builder.append(" = createRoot(asURI);");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      String _symbolName_1 = this.getSymbolName(lib);
      _builder.append(_symbolName_1, "\t\t\t");
      _builder.append(" = createLibrary(name, nsPrefix, nsURI, IdManager.METAMODEL);");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("installPackages();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installOclTypes();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installPrimitiveTypes();");
      _builder.newLine();
      {
        int _size = allEnumerations.size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          _builder.append("installEnumerations();");
          _builder.newLine();
        }
      }
      _builder.append("\t\t\t");
      _builder.append("installParameterTypes();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installCollectionTypes();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installMetaclasses();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installLambdaTypes();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installTupleTypes();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installOperations();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installIterations();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installProperties();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installTemplateSignatures();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installTemplateBindings();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installPrecedences();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("installComments();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return theRoot;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t");
      String _definePackages = this.definePackages(lib);
      _builder.append(_definePackages, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _declareOclTypes = this.declareOclTypes(lib);
      _builder.append(_declareOclTypes, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _declarePrimitiveTypes = this.declarePrimitiveTypes(lib);
      _builder.append(_declarePrimitiveTypes, "\t\t");
      _builder.newLineIfNotEmpty();
      {
        int _size_1 = allEnumerations.size();
        boolean _greaterThan_1 = (_size_1 > 0);
        if (_greaterThan_1) {
          _builder.newLine();
          _builder.append("\t\t");
          String _declareEnumerations = this.declareEnumerations(lib);
          _builder.append(_declareEnumerations, "\t\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("\t\t");
      String _declareParameterTypes = this.declareParameterTypes(lib);
      _builder.append(_declareParameterTypes, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _declareCollectionTypes = this.declareCollectionTypes(lib);
      _builder.append(_declareCollectionTypes, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _declareMetaclasses = this.declareMetaclasses(lib);
      _builder.append(_declareMetaclasses, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _declareTupleTypes = this.declareTupleTypes(lib);
      _builder.append(_declareTupleTypes, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _defineOclTypes = this.defineOclTypes(lib);
      _builder.append(_defineOclTypes, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _definePrimitiveTypes = this.definePrimitiveTypes(lib);
      _builder.append(_definePrimitiveTypes, "\t\t");
      _builder.newLineIfNotEmpty();
      {
        int _size_2 = allEnumerations.size();
        boolean _greaterThan_2 = (_size_2 > 0);
        if (_greaterThan_2) {
          _builder.newLine();
          _builder.append("\t\t");
          String _defineEnumerations = this.defineEnumerations(lib);
          _builder.append(_defineEnumerations, "\t\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("\t\t");
      String _defineParameterTypes = this.defineParameterTypes(lib);
      _builder.append(_defineParameterTypes, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _defineCollectionTypes = this.defineCollectionTypes(lib);
      _builder.append(_defineCollectionTypes, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _defineMetaclasses = this.defineMetaclasses(lib);
      _builder.append(_defineMetaclasses, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _defineTupleTypes = this.defineTupleTypes(lib);
      _builder.append(_defineTupleTypes, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _defineLambdaTypes = this.defineLambdaTypes(lib);
      _builder.append(_defineLambdaTypes, "\t\t");
      _builder.append("\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _defineOperations = this.defineOperations(lib);
      _builder.append(_defineOperations, "\t\t");
      _builder.append("\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _defineIterations = this.defineIterations(lib);
      _builder.append(_defineIterations, "\t\t");
      _builder.append("\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _declareProperties = this.declareProperties(lib);
      _builder.append(_declareProperties, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _defineProperties = this.defineProperties(lib);
      _builder.append(_defineProperties, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _defineTemplateSignatures = this.defineTemplateSignatures(lib);
      _builder.append(_defineTemplateSignatures, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _defineTemplateBindings = this.defineTemplateBindings(lib);
      _builder.append(_defineTemplateBindings, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _definePrecedences = this.definePrecedences(lib);
      _builder.append(_definePrecedences, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      String _defineComments = this.defineComments(lib);
      _builder.append(_defineComments, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*\tprivate static WeakHashMap<OCLstdlib,Object> liveOCLstdlibs = new WeakHashMap<OCLstdlib,Object>();");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static String debugSimpleName(Object object) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (object == null) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return \"null\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("else {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return object.getClass().getSimpleName() + \"@\" + Integer.toHexString(object.hashCode());");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protected void finalize() throws Throwable {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("System.out.println(\"Finalize \" + debugSimpleName(this));\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("super.finalize();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Set<OCLstdlib> keySet = liveOCLstdlibs.keySet();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (!keySet.isEmpty()) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("StringBuilder s = new StringBuilder();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("s.append(\" live\");");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("for (OCLstdlib stdlib : keySet) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("s.append(\" @\" + Integer.toHexString(stdlib.hashCode()));\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("System.out.println(s);\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("} */");
      _builder.newLine();
      _builder.newLine();
      _builder.append("/*\tpublic static void decontain() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Map<EObject, Object> allContents = new WeakHashMap<EObject,Object>(1000);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for (OCLstdlib oclstdlib : liveOCLstdlibs.keySet()) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("for (TreeIterator<EObject> tit = oclstdlib.getAllContents(); tit.hasNext(); ) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("allContents.put(tit.next(), null);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for (EObject eObject : allContents.keySet()) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("for (EReference eReference : eObject.eClass().getEAllReferences()) {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("boolean isUnsettable = eReference.isUnsettable();");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("boolean isChangeable = eReference.isChangeable();");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if (isChangeable) {");
      _builder.newLine();
      _builder.append("//\t\t\t\t\tSystem.out.println(\"unset : \" + debugSimpleName(eObject) + \" \" + eReference.getName());");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("try {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("eObject.eUnset(eReference);");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("catch (Exception e) {}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("System.gc();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("System.runFinalization();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for (EObject eObject : allContents.keySet()) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("System.out.println(\"   still live : \" + debugSimpleName(eObject));");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("} */");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }
}
