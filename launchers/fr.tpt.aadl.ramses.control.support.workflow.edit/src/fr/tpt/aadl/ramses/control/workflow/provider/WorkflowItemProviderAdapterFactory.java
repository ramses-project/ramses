/**
 * AADL-RAMSES
 * 
 * Copyright Â© 2012 TELECOM ParisTech and CNRS
 * 
 * TELECOM ParisTech/LTCI
 * 
 * Authors: see AUTHORS
 * 
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the Eclipse Public License as published by Eclipse, either
 * version 1.0 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the Eclipse Public License for
 * more details. You should have received a copy of the Eclipse Public License
 * along with this program. If not, see
 * http://www.eclipse.org/org/documents/epl-v10.php
 */
package fr.tpt.aadl.ramses.control.workflow.provider;

import java.util.ArrayList ;
import java.util.Collection ;

import org.eclipse.emf.common.notify.Adapter ;
import org.eclipse.emf.common.notify.Notification ;
import org.eclipse.emf.common.notify.Notifier ;
import org.eclipse.emf.edit.provider.ChangeNotifier ;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory ;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory ;
import org.eclipse.emf.edit.provider.IChangeNotifier ;
import org.eclipse.emf.edit.provider.IDisposable ;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider ;
import org.eclipse.emf.edit.provider.IItemLabelProvider ;
import org.eclipse.emf.edit.provider.IItemPropertySource ;
import org.eclipse.emf.edit.provider.INotifyChangedListener ;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider ;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider ;

import fr.tpt.aadl.ramses.control.workflow.util.WorkflowAdapterFactory ;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WorkflowItemProviderAdapterFactory extends WorkflowAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkflowItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.Workflow} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkflowItemProvider workflowItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.Workflow}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createWorkflowAdapter()
  {
    if (workflowItemProvider == null)
    {
      workflowItemProvider = new WorkflowItemProvider(this);
    }

    return workflowItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.Transformation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransformationItemProvider transformationItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.Transformation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTransformationAdapter()
  {
    if (transformationItemProvider == null)
    {
      transformationItemProvider = new TransformationItemProvider(this);
    }

    return transformationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.Generation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GenerationItemProvider generationItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.Generation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGenerationAdapter()
  {
    if (generationItemProvider == null)
    {
      generationItemProvider = new GenerationItemProvider(this);
    }

    return generationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.Conjunction} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConjunctionItemProvider conjunctionItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.Conjunction}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConjunctionAdapter()
  {
    if (conjunctionItemProvider == null)
    {
      conjunctionItemProvider = new ConjunctionItemProvider(this);
    }

    return conjunctionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.Disjunction} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DisjunctionItemProvider disjunctionItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.Disjunction}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDisjunctionAdapter()
  {
    if (disjunctionItemProvider == null)
    {
      disjunctionItemProvider = new DisjunctionItemProvider(this);
    }

    return disjunctionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.Analysis} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnalysisItemProvider analysisItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.Analysis}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAnalysisAdapter()
  {
    if (analysisItemProvider == null)
    {
      analysisItemProvider = new AnalysisItemProvider(this);
    }

    return analysisItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.ErrorState} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ErrorStateItemProvider errorStateItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.ErrorState}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createErrorStateAdapter()
  {
    if (errorStateItemProvider == null)
    {
      errorStateItemProvider = new ErrorStateItemProvider(this);
    }

    return errorStateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.List} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ListItemProvider listItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.List}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createListAdapter()
  {
    if (listItemProvider == null)
    {
      listItemProvider = new ListItemProvider(this);
    }

    return listItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.File} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FileItemProvider fileItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.File}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFileAdapter()
  {
    if (fileItemProvider == null)
    {
      fileItemProvider = new FileItemProvider(this);
    }

    return fileItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.AnalysisOption} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnalysisOptionItemProvider analysisOptionItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.AnalysisOption}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAnalysisOptionAdapter()
  {
    if (analysisOptionItemProvider == null)
    {
      analysisOptionItemProvider = new AnalysisOptionItemProvider(this);
    }

    return analysisOptionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.ModelIdentifier} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelIdentifierItemProvider modelIdentifierItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.ModelIdentifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createModelIdentifierAdapter()
  {
    if (modelIdentifierItemProvider == null)
    {
      modelIdentifierItemProvider = new ModelIdentifierItemProvider(this);
    }

    return modelIdentifierItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.Unparse} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UnparseItemProvider unparseItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.Unparse}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createUnparseAdapter()
  {
    if (unparseItemProvider == null)
    {
      unparseItemProvider = new UnparseItemProvider(this);
    }

    return unparseItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.tpt.aadl.ramses.control.workflow.Loop} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LoopItemProvider loopItemProvider;

  /**
   * This creates an adapter for a {@link fr.tpt.aadl.ramses.control.workflow.Loop}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLoopAdapter()
  {
    if (loopItemProvider == null)
    {
      loopItemProvider = new LoopItemProvider(this);
    }

    return loopItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (workflowItemProvider != null) workflowItemProvider.dispose();
    if (transformationItemProvider != null) transformationItemProvider.dispose();
    if (generationItemProvider != null) generationItemProvider.dispose();
    if (conjunctionItemProvider != null) conjunctionItemProvider.dispose();
    if (disjunctionItemProvider != null) disjunctionItemProvider.dispose();
    if (analysisItemProvider != null) analysisItemProvider.dispose();
    if (errorStateItemProvider != null) errorStateItemProvider.dispose();
    if (listItemProvider != null) listItemProvider.dispose();
    if (fileItemProvider != null) fileItemProvider.dispose();
    if (analysisOptionItemProvider != null) analysisOptionItemProvider.dispose();
    if (modelIdentifierItemProvider != null) modelIdentifierItemProvider.dispose();
    if (unparseItemProvider != null) unparseItemProvider.dispose();
    if (loopItemProvider != null) loopItemProvider.dispose();
  }

}
