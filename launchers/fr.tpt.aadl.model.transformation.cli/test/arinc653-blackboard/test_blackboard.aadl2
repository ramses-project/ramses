package test_blackboard
public

with Data_Model;
with POK;

data myint
properties
  Data_Model::Data_Representation => integer;
end myint;

virtual processor partition
end partition;

virtual processor implementation partition.impl
properties
  POK::Scheduler => RR;
  POK::Additional_Features => (libc_stdio, console);
end partition.impl;

processor ppc
end ppc;

processor implementation ppc.impl
subcomponents
   part1 : virtual processor partition.impl;
properties
   POK::Architecture => x86;
   POK::BSP => x86_qemu;
   POK::Major_Frame => 1000 ms;
   POK::Scheduler => static;
   POK::Slots => (1000 ms);
   POK::Slots_Allocation => (reference (part1));
end ppc.impl;

process myprocess1
end myprocess1;

process implementation myprocess1.impl
subcomponents
   thr1 : thread mythread1.impl;
   thr2 : thread mythread2.impl;
connections
   cnx1: port thr1.output -> thr2.input;
properties
   POK::Needed_Memory_Size => 200 kbyte;
end myprocess1.impl;

thread mythread1
features
   output : out data port myint;
end mythread1;

thread mythread2
features
   input : in data port myint;
end mythread2;

thread implementation mythread1.impl
calls
   call1 : { pspg : subprogram hello_part1;};
connections
   cnx2: parameter pspg.output -> output;
properties
   Dispatch_protocol      => Periodic;
   Period                 => 1000ms;
   Deadline               => 900ms;
   Compute_Execution_Time => 300 ms .. 400 ms;
end mythread1.impl;

thread implementation mythread2.impl
calls
   call1 : { pspg : subprogram hello_part2;
             pspg2: subprogram hello_part1;};
connections
   cnx3: parameter input -> pspg.input;
   cnx4: parameter pspg2.output -> pspg.input;
properties
   Dispatch_protocol      => Periodic;
   Period                 => 500ms;
   Deadline               => 450ms;
   Compute_Execution_Time => 200 ms .. 300 ms;
end mythread2.impl;

subprogram hello_part1
features
   output : out parameter myint;
properties
   source_name => "user_send";
   Source_Text => ("../../../send.h");
   source_language => (C);
   POK::Source_Location => "../../../send.o";
end hello_part1;

subprogram hello_part2
features
   input : in parameter myint;
properties
   POK::Source_Location => "../../../receive.o";
   source_language => (C);
   source_name => "user_receive";
   Source_Text => ("../../../receive.h");
end hello_part2;


system node
end node;

system implementation node.impl
subcomponents
   cpu   : processor ppc.impl;
   part1 : process myprocess1.impl;
properties
   Actual_Processor_Binding => (reference (cpu.part1)) applies to part1;
end node.impl;
end test_blackboard;

