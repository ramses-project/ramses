--
-- AADL-RAMSES
-- 
-- Copyright Â¬Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

package test_osek_dataports
public
with OSEK,Data_Model;
  system root
  end root;

  system implementation root.impl
  subcomponents
    the_cpu: processor cpu.impl;
    the_proc: process proc.impl;
    the_mem: memory mem.impl;
  properties
    actual_processor_binding => (reference (the_cpu)) applies to the_proc;
    actual_memory_binding => (reference (the_mem)) applies to the_proc;
  end root.impl;

  processor cpu
  end cpu;

  processor implementation cpu.impl
  properties
      Scheduling_Protocol => (Rate_Monotonic_Protocol) ;
      OSEK::SystemCounter_MaxAllowedValue => 2000;
      OSEK::SystemCounter_TicksPerBase => 1;
      OSEK::SystemCounter_MinCycle => 1;
  end cpu.impl;


  process proc
  end proc;

  process implementation proc.impl
  subcomponents
    the_sender: thread sender.impl;
    the_receiver: thread receiver.impl;
  connections
    cnx: port the_sender.p -> the_receiver.p;
  end proc.impl;

  memory mem
  end mem;

  memory implementation mem.impl
  properties
    Byte_Count => 200000;
  end mem.impl;

  thread sender
  features
    p: out data port Integer;
  properties
    Dispatch_Protocol => Periodic;
    Compute_Execution_Time => 0 ms .. 1 ms;
    Period => 2000 Ms;
    Priority => 5;
    Data_Size => 40000 bytes;
    Stack_Size => 512 bytes;
    Code_Size => 40 bytes;
  end sender;

  thread implementation sender.impl
  calls
    call : { c : subprogram sender_spg;};
  connections
    cnx: parameter c.result -> p;
  properties
    Compute_Entrypoint_Call_Sequence => reference (call);
  end sender.impl;

  subprogram sender_spg
  features
    result : out parameter Integer;
  properties
    source_name => "send";
    source_language => (C);
    source_text => ("user_code.h","user_code.c");
  end sender_spg;

  thread receiver
  features
    p: in data port Integer;
  properties
    Dispatch_Protocol => Periodic;
    Compute_Execution_Time => 0 ms .. 1 ms;
    Period => 1000 Ms;
    Priority => 10;
    Data_Size => 40000 bytes;
    Stack_Size => 512 bytes;
    Code_Size => 40 bytes;
  end receiver;

  thread implementation receiver.impl
  calls
    call : { c : subprogram receiver_spg;};
  connections
    cnx: parameter p -> c.input;
  properties
    Compute_Entrypoint_Call_Sequence => reference (call);
  end receiver.impl;

  subprogram receiver_spg
  features
    input : in parameter Integer;
  properties
    source_name => "receive";
    source_language => (C);
    source_text => ("user_code.h","user_code.c");
  end receiver_spg;

  data Integer
  properties
    Data_Model::Data_Representation => integer;
  end Integer;

end test_osek_dataports;