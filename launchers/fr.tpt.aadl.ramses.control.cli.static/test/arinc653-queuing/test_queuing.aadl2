--
-- AADL-RAMSES
-- 
-- Copyright Â¬Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--

package test_queuing
public
with POK, Data_Model;
  system root
  end root;

  system implementation root.impl
  subcomponents
    the_cpu: processor cpu.impl;
    the_proc1: process proc1.impl;
    the_proc2: process proc2.impl;
  connections
    cnx: port the_proc1.p -> the_proc2.p;
  properties
    actual_processor_binding => (reference (the_cpu.the_part1)) applies to the_proc1;
    actual_processor_binding => (reference (the_cpu.the_part2)) applies to the_proc2;
  end root.impl;

  processor cpu
  properties
    POK::Architecture => x86;
    POK::BSP => x86_qemu;
  end cpu;

  processor implementation cpu.impl
  subcomponents
    the_part1:  virtual processor part.impl;
    the_part2:  virtual processor part.impl;
  properties
    POK::Module_Major_Frame => 1000 ms;
    POK::Scheduler => static;
    POK::Partition_Slots => (500 ms, 500 ms);
    POK::Slots_Allocation => (reference (the_part1), reference (the_part2));
  end cpu.impl;

  virtual processor part
  properties
    POK::Additional_Features => (libc_stdio, console);
  end part;

  virtual processor implementation part.impl
  properties
    POK::Scheduler => RR;
  end part.impl;

  process proc1
  features
    p: out event data port Integer {Queue_Size => 5; 
    							    Queue_Processing_Protocol => FIFO;};
  properties
    POK::Needed_Memory_Size => 200 kbyte;
  end proc1;

  process implementation proc1.impl
  subcomponents
    the_sender: thread sender.impl;
  connections
    cnx: port the_sender.p -> p;
  end proc1.impl;

  process proc2
  features
    p: in event data port Integer{Queue_Size => 10; 
    							  Queue_Processing_Protocol => FIFO;};
  properties
    POK::Needed_Memory_Size => 200 kbyte;
  end proc2;

  process implementation proc2.impl
  subcomponents
    the_receiver: thread receiver.impl;
  connections
    cnx: port p -> the_receiver.p;
  end proc2.impl;

  thread sender
  features
    p: out event data port Integer;
  properties
    Dispatch_Protocol => Periodic;
    Compute_Execution_Time => 0 ms .. 1 ms;
    Period => 200 Ms;
    Priority => 10;
    Source_Data_Size => 40000 bytes;
    Source_Stack_Size => 40000 bytes;
    Source_Code_Size => 40 bytes;
  end sender;

  thread implementation sender.impl
  calls
    call : { c : subprogram sender_spg;};
  connections
    cnx: parameter c.result -> p;
  end sender.impl;

  subprogram sender_spg
  features
    result : out parameter Integer;
  properties
    source_name => "send";
    source_language => (C);
    source_text => ("../../../user_send.h");
    POK::source_location => ("../../../user_send.o");
  end sender_spg;

  thread receiver
  features
    p: in event data port Integer;
  properties
    Dispatch_Protocol => Periodic;
    Compute_Execution_Time => 0 ms .. 1 ms;
    Period => 1000 Ms;
    Priority => 5;
    Source_Data_Size => 40000 bytes;
    Source_Stack_Size => 40000 bytes;
    Source_Code_Size => 40 bytes;
  end receiver;

  thread implementation receiver.impl
  calls
    call : { 
    	c1 : subprogram receiver_spg;
    	c2 : subprogram receiver_spg;
    	c3 : subprogram receiver_spg;
    };
  connections
    cnx1: parameter p -> c1.input;
    cnx2: parameter p -> c2.input;
    cnx3: parameter p -> c3.input;
  end receiver.impl;

  subprogram receiver_spg
  features
    input : in parameter Integer;
  properties
    source_name => "receive";
    source_language => (C);
    source_text => ("../../../user_receive.h");
    POK::source_location => ("../../../user_receive.o");
  end receiver_spg;

  data Integer
  properties
    Data_Model::Data_Representation => integer;
  end Integer;

end test_queuing;