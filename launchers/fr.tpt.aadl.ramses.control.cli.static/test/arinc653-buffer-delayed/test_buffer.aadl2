--
--                              POK header
-- 
--  The following file is a part of the POK project. Any modification should
--  be made according to the POK licence. You CANNOT use this file or a part 
--  of a file for your own project.
-- 
--  For more information on the POK licence, please see our LICENCE FILE
--
--  Please follow the coding guidelines described in doc/CODING_GUIDELINES
--
--                                      Copyright (c) 2007-2009 POK team 
--
--  Created by julien on Thu Jan 15 23:34:13 2009 
--


package test_buffer

public

with Data_Model;
with POK;

data myint
properties
   Data_Model::Data_Representation => integer;
   Source_Data_Size => 4 Bytes;
end myint;

virtual processor partition
properties
   POK::Scheduler => RR;
   POK::Additional_Features => (libc_stdio, libc_stdlib, console);
end partition;

virtual processor implementation partition.impl

end partition.impl;

processor ppc
end ppc;

processor implementation ppc.impl
subcomponents
   part1 : virtual processor partition.impl;
properties
   POK::Architecture => x86;
   POK::BSP => x86_qemu;
   POK::Scheduler => Static;
   POK::Module_Major_Frame => 1000 ms;
   POK::Partition_Slots => (500 ms);
   POK::Slots_Allocation => (reference (part1));
end ppc.impl;

memory partitionmemory
properties
   Byte_Count => 80000;
   ARINC653::Memory_Kind => memory_code;
   ARINC653::Access_Type => read;
end partitionmemory;

memory mainmemory
end mainmemory;

memory implementation mainmemory.impl
subcomponents
   part1: memory partitionmemory
               {ARINC653::Memory_Kind => memory_code;
                ARINC653::Access_Type => read;
                Read_Time => (Fixed => 0.005 ms; PerByte => 0.005 ms;);
                Write_Time => (Fixed => 0.005 ms; PerByte => 0.005 ms;);};
end mainmemory.impl;

process myprocess1
end myprocess1;

process implementation myprocess1.impl
subcomponents
   thr1 : thread mythread1.impl;
   thr2 : thread mythread2.impl;
connections
   cnx1: port thr1.output -> thr2.input { Timing => Delayed; };
properties
   POK::Needed_Memory_Size => 200 Kbyte;
end myprocess1.impl;

thread mythread1
features
   output : out event data port myint 
   {
   	Compute_Deadline => 10ms;
   	Output_Rate => (Value_Range => 2.0;);
   };
end mythread1;

thread mythread2
features
   input : in event data port myint {
   	Compute_Deadline => 20ms;
   	Input_Rate => (Value_Range => 2.0;);
   };
end mythread2;

thread implementation mythread1.impl
calls 
   call1 : {pspg : subprogram hello_part1;};
connections
   cnx2: parameter pspg.output -> output;
properties
   dispatch_protocol => periodic;
   period            => 1000 ms;
end mythread1.impl;

thread implementation mythread2.impl
calls 
   call1 : {pspg : subprogram hello_part2;};
connections
   cnx3: parameter input -> pspg.input;
properties
   dispatch_protocol => periodic;
   period            => 1000 ms;
end mythread2.impl;

subprogram hello_part1
features
   output : out parameter myint;
properties
   source_name => "user_send";
   source_language => (C);
   Source_Text => ("../../../send.h");
   POK::Source_Location => "../../../send.o";
end hello_part1;

subprogram hello_part2
features
   input : in parameter myint;
properties
   POK::Source_Location => "../../../receive.o";
   Source_Text => ("../../../receive.h");
   source_language => (C);
   source_name => "user_receive";
end hello_part2;


system node
end node;

system implementation node.impl
subcomponents
   cpu   : processor ppc.impl;
   mem   : memory mainmemory.impl;
   p1 : process myprocess1.impl;
properties
   Actual_Processor_Binding => (reference (cpu.part1)) applies to p1;
   Actual_Memory_Binding => (reference (mem.part1)) applies to p1;
end node.impl;
end test_buffer;
