Package Minimal_Example

public

with Data_Model, Base_types ;


processor Processor1
end Processor1 ;


memory Memory1
end Memory1 ;


system Transmitters_Receiver
end Transmitters_Receiver ;


system implementation Transmitters_Receiver.impl

   subcomponents
   
   U_Process : process Unique_Process.impl ;
   Mem       : memory Memory1 ;
   CPU       : processor Processor1 ;

end Transmitters_Receiver.impl ;


process Unique_Process
end Unique_Process ;


process implementation Unique_Process.impl

   subcomponents
   
   Transmitter1 : thread Transmitter1_Thread ;
   Transmitter2 : thread Transmitter2_Thread ;
   Receiver     : thread Receiver_Thread     ;
   
   connections
   
   cnx1: port Transmitter1.P1 -> Receiver.P1 ;
   cnx2: port Transmitter2.P2 -> Receiver.P2 ;

end Unique_Process.impl ;


thread Transmitter1_Thread

   features
            
   P1 : out event data port Base_Types::Integer {Output_Time => ([Time=>Completion; Offset => 0 ns .. 0 ns;]);} ;
   
   properties

   Dispatch_Protocol => Periodic ;
   Period => 100 ms ;
   
   Synchronized_Component => FALSE ;
    
   Initialize_Entrypoint => classifier (Transmitter1_Init_Subprog) ;
   Compute_Entrypoint => classifier (Transmitter1_Compute_Subprog) ;
   Finalize_Entrypoint => classifier (Transmitter1_Finalization_Subprog) ;
   
end Transmitter1_Thread ;

thread implementation Transmitter1_Thread.impl

   calls
   
   call_seq :
   {
      call1 : subprogram Transmitter1_Compute_Subprog ;
   } ;
  
   connections
   
   cnx1 : parameter call1.Transmitted_Count -> P1 ;

end Transmitter1_Thread.impl;

thread Transmitter2_Thread

   features
            
   P2 : out event data port Base_Types::Integer {Output_Time => ([Time=>Completion;Offset => 0 ns .. 0 ns;]);} ;
   
   properties

   Dispatch_Protocol => Periodic ;
   Period => 150 ms ;
   
   Synchronized_Component => FALSE ;
    
   Initialize_Entrypoint => classifier (Transmitter2_Init_Subprog) ;
   Compute_Entrypoint => classifier (Transmitter2_Compute_Subprog) ;
   Finalize_Entrypoint => classifier (Transmitter2_Finalization_Subprog) ;
   
end Transmitter2_Thread ;

thread implementation Transmitter2_Thread.impl

   calls
   
   call_seq :
   {
      call1: subprogram Transmitter2_Compute_Subprog  ;
   } ;
  
   connections
   
   cnx1 : parameter call1.Transmitted_Count -> P2 ;
   
end Transmitter2_Thread.impl;


thread Receiver_Thread

   features
  
   P1 : in event data port Base_Types::Integer {Queue_Size => 100 ;
                                                Overflow_Handling_Protocol => DropOldest ;
                                                Dequeue_Protocol => AllItems ;
                                                Input_Time => ([Time=>Dispatch; Offset => 0 ns .. 0 ns;]);
                                                Data_Model::Initial_Value => ("0");
                                               } ;
                                               
   P2 : in event data port Base_Types::Integer {Queue_Size => 100 ;
                                                Overflow_Handling_Protocol => DropOldest ;
                                                Dequeue_Protocol => AllItems ;
                                                Input_Time => ([Time=>Dispatch; Offset => 0 ns .. 0 ns;]);
                                                Data_Model::Initial_Value => ("0");
                                               } ;
   properties

   Dispatch_Protocol => Aperiodic ;
   Synchronized_Component => FALSE ;
    
   Initialize_Entrypoint => classifier (Receiver_Init_Subprog) ;
   Compute_Entrypoint => classifier (Receiver_Compute_Subprog) ;
   Finalize_Entrypoint => classifier (Receiver_Finalization_Subprog) ;
   
end Receiver_Thread ;

thread implementation Receiver_Thread.impl

   calls
   
   call_seq :
   {
      call1 : subprogram Receiver_Compute_Subprog ;
   } ;
  
   connections
   
   cnx1 : parameter call1.Received_Count -> P1 ;
   cnx2 : parameter call1.Received_Count -> P2 ;

end Receiver_Thread.impl;

subprogram Transmitter1_Compute_Subprog

   features
   
   Transmitted_Count : out parameter Base_Types::Integer ;
   
   properties
   
   Source_Name => "transmitter1_compute";
   Source_Language => (C);
   Source_Text => ("../transmitter1_compute.h","../transmitter1_compute.o");

end Transmitter1_Compute_Subprog ;


subprogram Transmitter2_Compute_Subprog

   features
   
   Transmitted_Count : out parameter Base_Types::Integer ;
   
   properties
   
   Source_Name => "transmitter2_compute";
   Source_Language => (C);
   Source_Text => ("../transmitter2_compute.h","../transmitter2_compute.o");

end Transmitter2_Compute_Subprog ;


subprogram Receiver_Compute_Subprog

   features
   
   Received_Count : in parameter Base_Types::Integer ;
   
   properties
   
   Source_Name => "receiver_compute";
   Source_Language => (C);
   Source_Text => ("../receiver_compute.h","../receiver_compute.o");

end Receiver_Compute_Subprog ;


subprogram Transmitter1_Init_Subprog

   properties
   
   Source_Name => "transmitter1_init";
   Source_Language => (C);
   Source_Text => ("../transmitter1_init.h","../transmitter1_init.o");

end Transmitter1_Init_Subprog ;


subprogram Transmitter1_Finalization_Subprog

   properties
   
   Source_Name => "transmitter1_final";
   Source_Language => (C);
   Source_Text => ("../transmitter1_final.h","../transmitter1_final.o");

end Transmitter1_Finalization_Subprog ;


subprogram Transmitter2_Init_Subprog

   properties
   
   Source_Name => "transmitter2_init";
   Source_Language => (C);
   Source_Text => ("../transmitter2_init.h","../transmitter2_init.o");

end Transmitter2_Init_Subprog ;


subprogram Transmitter2_Finalization_Subprog

   properties
   
   Source_Name => "transmitter2_final";
   Source_Language => (C);
   Source_Text => ("../transmitter2_final.h","../transmitter2_final.o");

end Transmitter2_Finalization_Subprog ;


subprogram Receiver_Init_Subprog

   properties
   
   Source_Name => "receiver_init";
   Source_Language => (C);
   Source_Text => ("../receiver_init.h","../receiver_init.o");

end Receiver_Init_Subprog ;


subprogram Receiver_Finalization_Subprog

   properties
   
   Source_Name => "receiver_final";
   Source_Language => (C);
   Source_Text => ("../receiver_final.h","../receiver_final.o");

end Receiver_Finalization_Subprog ;


end Minimal_Example ;
