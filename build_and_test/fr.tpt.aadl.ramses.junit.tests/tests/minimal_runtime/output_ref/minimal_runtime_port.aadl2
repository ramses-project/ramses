package Minimal_Runtime_Port
public
with Timing_Properties,Data_Model,Base_Types,Minimal_Runtime_Types,Minimal_Runtime_Sync;
  subprogram Remove_Pending_Event
    features
      Link: requires data access Minimal_Runtime_Types::Pending_Event_Link.impl;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Link.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Previous.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Next := Link.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Next ;
Link.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Next.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Previous := Link.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Previous ;
Link.Is_Connected := false} ;
**};
  end Remove_Pending_Event;
  
  subprogram Add_Pending_Event
    features
      Pending_Events: requires data access Minimal_Runtime_Types::Pending_Event_Chain.impl;
      Link: requires data access Minimal_Runtime_Types::Pending_Event_Link.impl;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {if (Link.Is_Connected) Remove_Pending_Event ! (Link) end if
   ;
Link.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Next := Pending_Events.Last ;
Pending_Events.Last.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Previous.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Next := Link ;
Link.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Previous := Pending_Events.Last.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Previous ;
Link.Is_Connected := true} ;
**};
  end Add_Pending_Event;
  
  subprogram Get_Updated_Port
    prototypes
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      Pending_Events: requires data access Minimal_Runtime_Types::Pending_Event_Chain.impl;
      UpdatedPort: requires data access Minimal_Runtime_Types::Natural_List.impl;
      Mutex: requires data access ;
    annex behavior_specification {**
      variables
  it_index : Base_Types::Natural ;
  add_index : Base_Types::Natural ;
  current_link : Minimal_Runtime_Types::Pending_Event_Link.impl ;
  add : Base_Types::Boolean ;
  continue : Base_Types::Boolean ;
states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
current_link := Pending_Events.First.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Next ;
add_index := 0 ;
while (add_index < UpdatedPort.Length and current_link.Port_Id != -1)
  {
    add := true ;
continue := true ;
it_index := 0 ;
while (continue and it_index < UpdatedPort.Nb_Items)
    {
      if (current_link.Port_Id = UpdatedPort[it_index]) {continue := false ;
add := false} end if
       ;
it_index := it_index + 1
    }
     ;
if (add) {UpdatedPort[add_index] := current_link.Port_Id ;
add_index := add_index + 1} end if
     ;
current_link := current_link.Minimal_Runtime_Types::Minimal_Runtime_Types::Cpt_Access.Next
  }
   ;
UpdatedPort.Nb_Items := add_index ;
Unlock ! (Mutex)} ;
**};
  end Get_Updated_Port;
  
  subprogram Write_In
    prototypes
      Minimal_Runtime_Types::Queue.impl 
      ;
      Minimal_Runtime_Types::Item.impl 
      ;
      Overflow_Handling_Protocol: subprogramOverflow_Handling_Protocol 
      ;
    features
      Queue: requires data access ;
      Item: provides data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      variables
  last : Base_Types::Natural ;
states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {last := Queue.Last ;
if ((Queue.Is_Empty = false) and ((last = Queue.First - 1) or (Queue.First = 0 and last = Queue.Length - 1))) Overflow_Handling_Protocol ! (Queue, Item) else {if (last = Queue.Length - 1) last := 0 else last := last + 1 end if
   ;
Item := Queue.Array[last]} end if
  } ;
**};
  end Write_In;
  
  subprogram Overflow_Handling_Protocol
    prototypes
      Minimal_Runtime_Types::Queue.impl 
      ;
      Minimal_Runtime_Types::Item.impl 
      ;
    features
      Queue: requires data access ;
      Item: provides data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
  end Overflow_Handling_Protocol;
  
  subprogram Drop_Oldest_Protocol
    extends Overflow_Handling_Protocol
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Item := Queue.Array[Queue.First]} ;
**};
  end Drop_Oldest_Protocol;
  
  subprogram Read_In
    prototypes
      Minimal_Runtime_Types::Queue.impl 
      ;
      Minimal_Runtime_Types::Item.impl 
      ;
    features
      Queue: requires data access ;
      Item: provides data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      variables
  first : Base_Types::Natural ;
  last : Base_Types::Natural ;
states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {first := Queue.First ;
last := Queue.Last ;
if (Queue.Is_Empty = true) Item := Queue.Last_Value else Item := Queue.Array[first] end if
  } ;
**};
  end Read_In;
  
  subprogram Dequeue
    prototypes
      Minimal_Runtime_Types::Queue.impl 
      ;
      Payload_Copy: subprogramPayload_Copy 
      ;
    features
      Queue: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {if (Queue.First = Queue.Last) Queue.Is_Empty := true end if
   ;
Payload_Copy ! (Queue.Array[Queue.First].Payload, Queue.Last_Value.Payload) ;
Queue.Last_Value.Link.Timestamp := Queue.Array[Queue.First].Link.Timestamp ;
Remove_Pending_Event ! (Queue.Array[Queue.First].Link) ;
if (Queue.First = Queue.Length - 1) Queue.First := 0 else Queue.First := Queue.First + 1 end if
  } ;
**};
  end Dequeue;
  
  subprogram Event_Port_Dequeue
    prototypes
      Minimal_Runtime_Types::Event_Port_Variable.impl 
      ;
      Dequeue: subprogramDequeue 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      Port_Variable: requires data access ;
      Pending_Events: requires data access Minimal_Runtime_Types::Pending_Event_Chain;
      Mutex: requires data access ;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
Dequeue ! (Port_Variable.Queue) ;
Unlock ! (Mutex)} ;
**};
  end Event_Port_Dequeue;
  
  subprogram Payload_Copy
    prototypes
       
      ;
    features
      Original: requires data access ;
      Copy: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
  end Payload_Copy;
  
  subprogram Basic_Payload_Copy
    extends Payload_Copy
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Copy := Original} ;
**};
  end Basic_Payload_Copy;
  
  subprogram Event_Port_Put_Value
    prototypes
      Minimal_Runtime_Types::Queue.impl 
      ;
      Minimal_Runtime_Types::Item.impl 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
       
      ;
      Payload_Copy: subprogramPayload_Copy 
      ;
      Write_In: subprogramWrite_In 
      ;
    features
      Queue: requires data access ;
      Value: requires data access ;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
  end Event_Port_Put_Value;
  
  subprogram implementation Event_Port_Put_Value.impl
    subcomponents
      item: data ;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
Write_In ! (Queue, item) ;
Payload_Copy ! (Value, item.Payload) ;
Unlock ! (Mutex)} ;
**};
  end Event_Port_Put_Value.impl;
  
  subprogram Enqueue
    prototypes
       
      ;
      Minimal_Runtime_Types::Queue.impl 
      ;
      Signal: subprogramMinimal_Runtime_Sync::Signal 
      ;
    features
      Timestamp: in parameter Minimal_Runtime_Types::Date;
      Queue: requires data access ;
      Monitor: requires data access ;
      Pending_Events: requires data access Minimal_Runtime_Types::Pending_Event_Chain;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {if (Queue.Last = Queue.Length - 1) Queue.Last := 0 else Queue.Last := Queue.Last + 1 end if
   ;
Queue.Is_Empty := false ;
Queue.Array[Queue.Last].Link.Timestamp := Timestamp ;
Add_Pending_Event ! (Pending_Events, Queue.Array[Queue.Last].Link) ;
Signal ! (Monitor)} ;
**};
  end Enqueue;
  
  subprogram Event_Port_Discard_Events
    prototypes
      Minimal_Runtime_Types::Event_Port_Variable.impl 
      ;
      Dequeue: subprogramDequeue 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      Port_Variable: requires data access ;
      Pending_Events: requires data access Minimal_Runtime_Types::Pending_Event_Chain;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
while (Port_Variable.Dequeuable_Items > 0 and Port_Variable.Queue.Is_Empty = false)
  {
    Dequeue ! (Port_Variable.Queue) ;
Port_Variable.Dequeuable_Items := Port_Variable.Dequeuable_Items - 1
  }
   ;
Unlock ! (Mutex)} ;
**};
  end Event_Port_Discard_Events;
  
  subprogram Data_Port_Discard_Pending_Event
    prototypes
      Minimal_Runtime_Types::Data_Port_Variable.impl 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      Port_Variable: requires data access ;
      Pending_Events: requires data access Minimal_Runtime_Types::Pending_Event_Chain;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
Remove_Pending_Event ! (Port_Variable.Array[Port_Variable.Snapshot_Index].Link) ;
Unlock ! (Mutex)} ;
**};
  end Data_Port_Discard_Pending_Event;
  
  subprogram Event_Port_Get_Count
    prototypes
      Minimal_Runtime_Types::Event_Port_Variable.impl 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      Count_Value: out parameter Base_Types::Natural;
      Port_Variable: requires data access ;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
Count_Value := Port_Variable.Dequeuable_Items ;
Unlock ! (Mutex)} ;
**};
  end Event_Port_Get_Count;
  
  subprogram Data_Port_Get_Count
    prototypes
      Minimal_Runtime_Types::Data_Port_Variable.impl 
      ;
    features
      CountValue: out parameter Base_Types::Natural;
      Portvariable: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {if (Portvariable.Is_Fresh) CountValue := 1 else CountValue := 0 end if
  } ;
**};
  end Data_Port_Get_Count;
  
  subprogram Event_Port_Updated
    prototypes
      Minimal_Runtime_Types::Event_Port_Variable.impl 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      Fresh_Flag: out parameter Base_Types::Boolean;
      Port_Variable: requires data access ;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
Fresh_Flag := false ;
if (! Port_Variable.Queue.Is_Empty or Port_Variable.Dequeuable_Items > 0) Fresh_Flag := true end if
   ;
Unlock ! (Mutex)} ;
**};
  end Event_Port_Updated;
  
  subprogram Data_Port_Updated
    prototypes
      Minimal_Runtime_Types::Data_Port_Variable.impl 
      ;
    features
      FreshFlag: out parameter Base_Types::Boolean;
      Portvariable: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {FreshFlag := Portvariable.Is_Fresh} ;
**};
  end Data_Port_Updated;
  
  subprogram Next_Value
    prototypes
       
      ;
      Minimal_Runtime_Types::Event_Port_Variable.impl 
      ;
      Dequeue: subprogramDequeue 
      ;
      Get_Value: subprogramEvent_Port_Get_Value 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      No_Value: out parameter Base_Types::Boolean;
      Port_Variable: requires data access Minimal_Common_Example::P1_Port_Variable.impl;
      Value: requires data access Base_Types::Integer;
      Pending_Events: requires data access Minimal_Runtime_Types::Pending_Event_Chain;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
if (Port_Variable.Dequeuable_Items > 0 and Port_Variable.Queue.Is_Empty = false) {Dequeue ! (Port_Variable.Queue) ;
Get_Value ! (Port_Variable, Value, Mutex) ;
Port_Variable.Dequeuable_Items := Port_Variable.Dequeuable_Items - 1 ;
No_Value := false} else {No_Value := true ;
Port_Variable.Dequeuable_Items := 0} end if
   ;
Unlock ! (Mutex)} ;
**};
  end Next_Value;
  
  subprogram Event_Port_Freeze
    prototypes
      Minimal_Runtime_Types::Event_Port_Variable.impl 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      Port_Variable: requires data access Minimal_Common_Example::P1_Port_Variable.impl;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
if (! Port_Variable.Queue.Is_Empty) {if (Port_Variable.Queue.First > Port_Variable.Queue.Last) Port_Variable.Dequeuable_Items := 1 + Port_Variable.Queue.Length - Port_Variable.Queue.First + Port_Variable.Queue.Last else Port_Variable.Dequeuable_Items := 1 + Port_Variable.Queue.Last - Port_Variable.Queue.First end if
   ;
if (Port_Variable.Dequeuable_Items > Port_Variable.Readable_Items) Port_Variable.Dequeuable_Items := Port_Variable.Readable_Items end if
  } else Port_Variable.Dequeuable_Items := 0 end if
   ;
Unlock ! (Mutex)} ;
**};
  end Event_Port_Freeze;
  
  subprogram Data_Port_Freeze
    prototypes
      Minimal_Runtime_Types::Data_Port_Variable.impl 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      Portvariable: requires data access ;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      variables
  tmp_index : Base_Types::Natural ;
states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
if (Portvariable.Array[Portvariable.Stream_Index].Link.Timestamp != Portvariable.Array[Portvariable.Snapshot_Index].Link.Timestamp) {tmp_index := Portvariable.Snapshot_Index ;
Portvariable.Snapshot_Index := Portvariable.Stream_Index ;
Portvariable.Stream_Index := tmp_index ;
Portvariable.Is_Fresh := true} else {Portvariable.Is_Fresh := false} end if
   ;
Unlock ! (Mutex)} ;
**};
  end Data_Port_Freeze;
  
  subprogram Data_Port_Put_Value
    prototypes
      Minimal_Runtime_Types::Data_Port_Variable.impl 
      ;
       
      ;
      Payload_Copy: subprogramPayload_Copy 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      Portvariable: requires data access ;
      Value: requires data access ;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
Payload_Copy ! (Value, Portvariable.Array[Portvariable.Stream_Index].Payload) ;
Unlock ! (Mutex)} ;
**};
  end Data_Port_Put_Value;
  
  subprogram Event_Port_Get_Value
    prototypes
      Minimal_Runtime_Types::Event_Port_Variable.impl 
      ;
      Minimal_Runtime_Types::Item.impl 
      ;
      Read_In: subprogramRead_In 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
       
      ;
      Payload_Copy: subprogramPayload_Copy 
      ;
    features
      Port_Variable: requires data access ;
      Value: requires data access ;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
  end Event_Port_Get_Value;
  
  subprogram implementation Event_Port_Get_Value.impl
    subcomponents
      item: data ;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
Read_In ! (Port_Variable.Queue, item) ;
Payload_Copy ! (item.Payload, Value) ;
Unlock ! (Mutex)} ;
**};
  end Event_Port_Get_Value.impl;
  
  subprogram Data_Port_Get_Value
    prototypes
      Minimal_Runtime_Types::Data_Port_Variable.impl 
      ;
       
      ;
      Payload_Copy: subprogramPayload_Copy 
      ;
    features
      Portvariable: requires data access ;
      Value: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Payload_Copy ! (Portvariable.Array[Portvariable.Snapshot_Index].Payload, Value)} ;
**};
  end Data_Port_Get_Value;
  
  subprogram Event_Port_Send_Output
    prototypes
       
      ;
      Minimal_Runtime_Types::Queue.impl 
      ;
      Enqueue: subprogramEnqueue 
      ;
      Get_Current_Date: subprogramMinimal_Runtime_Sync::Get_Current_Date 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      Queue: requires data access Minimal_Common_Example::P1_Queue.impl;
      Monitor: requires data access ;
      Pending_Events: requires data access Minimal_Runtime_Types::Pending_Event_Chain;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      variables
  timestamp : Minimal_Runtime_Types::Date ;
states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
Get_Current_Date ! (timestamp) ;
Enqueue ! (Queue, Monitor, Pending_Events, timestamp) ;
Unlock ! (Mutex)} ;
**};
  end Event_Port_Send_Output;
  
  subprogram Data_Port_Send_Output
    prototypes
      Minimal_Runtime_Types::Data_Port_Variable.impl 
      ;
       
      ;
      Signal: subprogramMinimal_Runtime_Sync::Signal 
      ;
      Get_Current_Date: subprogramMinimal_Runtime_Sync::Get_Current_Date 
      ;
       
      ;
      Lock: subprogramMinimal_Runtime_Sync::Lock 
      ;
      Unlock: subprogramMinimal_Runtime_Sync::Unlock 
      ;
    features
      Monitor: requires data access ;
      Portvariable: requires data access ;
      Pending_Events: requires data access Minimal_Runtime_Types::Pending_Event_Chain.impl;
      Mutex: requires data access ;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      variables
  timestamp : Minimal_Runtime_Types::Date ;
states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Lock ! (Mutex) ;
Get_Current_Date ! (timestamp) ;
Portvariable.Array[Portvariable.Stream_Index].Link.Timestamp := timestamp ;
Add_Pending_Event ! (Pending_Events, Portvariable.Array[Portvariable.Stream_Index].Link) ;
Signal ! (Monitor) ;
Unlock ! (Mutex)} ;
**};
  end Data_Port_Send_Output;
end Minimal_Runtime_Port;
