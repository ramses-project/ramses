package Minimal_Aperiodic_Example
public
with Timing_Properties,Data_Model,Base_Types,Minimal_Runtime_Dispatch,Minimal_Common_Example,Minimal_Example,Minimal_Runtime_Types;
  subprogram P1_P2_DispatchConditionFunction
    extends Minimal_Runtime_Dispatch::Dispatch_Condition_Function
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {Minimal_Runtime_Dispatch::Is_Dispatched := false ;
for (i : Unsigned_8 in Minimal_Runtime_Dispatch::DispatchedPort)
  {
    for (j : Unsigned_8 in Minimal_Runtime_Dispatch::DispatchPorts)
    {
      if (i = j) Minimal_Runtime_Dispatch::Is_Dispatched := true end if
    
    }
  
  }
  } ;
**};
  end P1_P2_DispatchConditionFunction;
  
  subprogram P1_P2_Await_Dispatch
    extends Minimal_Runtime_Dispatch::Await_Dispatch
    (Ports_Type => data Minimal_Common_Example::Ports_Type.impl,Dispatch_Condition_Function => subprogram P1_P2_DispatchConditionFunction,Wrapper_Freeze => subprogram Minimal_Common_Example::Wrapper_Freeze)
  end P1_P2_Await_Dispatch;
  
  subprogram Receiver_Thread_Routine
    prototypes
       
      ;
       
      ;
    features
      Ports: requires data access Minimal_Common_Example::Ports_Type.impl;
      Monitor: requires data access ;
      Mutex: requires data access ;
      Pending_Event_Chain: requires data access Minimal_Runtime_Types::Pending_Event_Chain.impl;
      DispatchPorts: requires data access Minimal_Runtime_Types::Natural_List.impl;
      UpdatedPort: requires data access Minimal_Runtime_Types::Natural_List.impl;
      DispatchedPort: requires data access Minimal_Runtime_Types::Natural_List.impl;
      Is_Alive: requires data access Base_Types::Boolean;
    properties
      Prototype_Substitution_Rule => Type_Extension;
    annex behavior_specification {**
      variables
  payload : Base_Types::Integer ;
  has_no_value : Base_Types::Boolean ;
states
  init_state : initial state ;
  final_state : final state ;
transitions
  init_state -[true]-> final_state {has_no_value := false ;
while (Is_Alive)
  {
    P1_P2_Await_Dispatch ! (Ports, Monitor, Mutex, Pending_Event_Chain, DispatchPorts, UpdatedPort, DispatchedPort) ;
if (DispatchedPort.Nb_Items = 1) {if (DispatchedPort[0] = Ports.P1_Portvariable.Id) {Minimal_Common_Example::P1_Next_Value ! (Ports.P1_Portvariable, payload, Pending_Event_Chain, Mutex, has_no_value) ;
while (! has_no_value)
    {
      Minimal_Example::Receiver_Compute_Subprog ! (payload) ;
Minimal_Common_Example::P1_Next_Value ! (Ports.P1_Portvariable, payload, Pending_Event_Chain, Mutex, has_no_value)
    }
    } else {Minimal_Common_Example::P2_Next_Value ! (Ports.P2_Portvariable, payload, Pending_Event_Chain, Mutex, has_no_value) ;
while (! has_no_value)
    {
      Minimal_Example::Receiver_Compute_Subprog ! (payload) ;
Minimal_Common_Example::P2_Next_Value ! (Ports.P2_Portvariable, payload, Pending_Event_Chain, Mutex, has_no_value)
    }
    } end if
    } end if
  
  }
  } ;
**};
  end Receiver_Thread_Routine;
  
  thread Receiver_Thread
    prototypes
       
      ;
       
      ;
    features
      Ports: requires data access Minimal_Common_Example::Ports_Type.impl;
      Monitor: requires data access ;
      Mutex: requires data access ;
      Pending_Event_Chain: requires data access Minimal_Runtime_Types::Pending_Event_Chain.impl;
      DispatchPorts: requires data access Minimal_Runtime_Types::Natural_List.impl;
      UpdatedPort: requires data access Minimal_Runtime_Types::Natural_List.impl;
      DispatchedPort: requires data access Minimal_Runtime_Types::Natural_List.impl;
    properties
      Prototype_Substitution_Rule => Type_Extension;
      Dispatch_Protocol => Aperiodic;
      Synchronized_Component => false;
  end Receiver_Thread;
  
  thread implementation Receiver_Thread.impl
    subcomponents
      Is_Alive: data Base_Types::Boolean {
        Data_Model::Initial_Value => ("TRUE");
        };
    annex behavior_specification {**
      states
  init_state : initial state ;
  final_state : complete final state ;
transitions
  init_state -[true]-> final_state {Minimal_Example::Receiver_Init_Subprog ! ;
Receiver_Thread_Routine ! (Ports, Monitor, Mutex, Pending_Event_Chain, DispatchPorts, UpdatedPort, DispatchedPort, Is_Alive) ;
Minimal_Example::Receiver_Finalization_Subprog !} ;
**};
  end Receiver_Thread.impl;
end Minimal_Aperiodic_Example;
