package exemple_lr_D6_L3_D6_L4
public
with Base_Types;
  data dummyData1
  end dummyData1;
  
  data implementation dummyData1.impl
    subcomponents
      a: data Base_Types::Integer[100];
      b: data Base_Types::Integer;
  end dummyData1.impl;
  
  thread th
    features
      outportC: out data port Base_Types::Integer;
      outportA: out event data port Base_Types::Integer;
      outportB: out event data port Base_Types::Integer;
      inportD: in event data port Base_Types::Integer;
      fakeData: requires data access dummyData1.impl;
  end th;
  
  thread implementation th.good
    subcomponents
      x: data Base_Types::Integer[100];
      y: data Base_Types::Integer;
    annex behavior_specification {**
      variables
  a : Base_Types::Integer ;
  b : Base_Types::Integer ;
  c : Base_Types::Integer ;
  d : Base_Types::Integer ;
  e : Base_Types::Integer ;
  f : Base_Types::Integer ;
states
  s1 : initial state ;
  s2 : complete state ;
  s3 : final state ;
transitions
  s1 -[]-> s2 ;
  s1 -[]-> s2 {a := 1} ;
  s1 -[]-> s2 {{a := 1}} ;
  s1 -[]-> s2 {a := 1 &
b := 2} ;
  s1 -[]-> s2 {outportA := 1 &
outportB := 2} ;
  s1 -[]-> s2 {x[a] := 1 &
y := 2} ;
  s1 -[]-> s2 {fakeData.a[a] := 1 &
fakeData.b := 2} ;
  s1 -[]-> s2 {while (true)
  {
    for (i : Integer in 0 .. 9)
    {
      if (true) {a := 1 &
b := 1} elsif (true) {a := 1 &
{if (true) {b := 1} else {fakeData.a[a] := 2} end if
      }} else {for (j : Integer in 0 .. 9)
      {
        do
        {c := i + j}
        until (true)
      
      }
      } end if
    
    }
  
  }
   &
do
  {if (true) {d := 1} else {d := 0} end if
  }
  until (true)
   &
fakeData.b := 1} ;
**};
  end th.good;
  
  thread implementation th.error
    subcomponents
      x: data Base_Types::Integer[100];
      y: data Base_Types::Integer;
    annex behavior_specification {**
      variables
  a : Base_Types::Integer ;
  b : Base_Types::Integer ;
  c : Base_Types::Integer ;
  d : Base_Types::Integer ;
  e : Base_Types::Integer ;
  f : Base_Types::Integer ;
states
  s1 : initial state ;
  s2 : complete state ;
  s3 : final state ;
transitions
  s1 -[]-> s2 {while (true)
  {
    for (i : Integer in 0 .. 9)
    {
      if (true) {a := 1 &
b := 1} elsif (true) {a := 1 &
{if (true) {b := 1} else {fakeData.b := 2} end if
      }} else {for (j : Integer in 0 .. 9)
      {
        do
        {c := i + j}
        until (true)
      
      }
      } end if
    
    }
  
  }
   &
do
  {if (true) {d := 1} else {d := 0} end if
  }
  until (true)
   &
fakeData.b := 1} ;
**};
  end th.error;
end exemple_lr_D6_L3_D6_L4;