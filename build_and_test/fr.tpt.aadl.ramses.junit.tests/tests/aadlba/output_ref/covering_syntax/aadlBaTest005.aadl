package GroupTest
public
with Data_Model,Base_Types,AadlBaTestPropertySet,AadlBaTest::Types,AadlBaTestSubprogram;
  subprogram procedure
  end procedure;
  
  subprogram multiplication
    prototypes
      proto: subprogram 
      ;
    features
      x: in parameter Base_Types::Integer;
      y: in parameter MyInteger;
      z: out parameter MyInteger;
  end multiplication;
  
  subprogram implementation multiplication.impl
  end multiplication.impl;
  
  subprogram implementation multiplication.impl2
    extends multiplication.impl
    (proto => subprogram multiplication)
  end multiplication.impl2;
  
  data MyInteger
    features
      multiplicationAccess: provides subprogram access multiplication;
    properties
      Data_Model::Data_Representation => Integer;
      Data_Model::Integer_Range => 0 .. Max_Target_Integer;
  end MyInteger;
  
  data implementation MyInteger.impl
    subcomponents
      length: data Base_Types::Integer;
  end MyInteger.impl;
  
  data implementation MyInteger.impl2
    extends MyInteger.impl
    subcomponents
      max: data Base_Types::Integer;
  end MyInteger.impl2;
  
  data Struct
  end Struct;
  
  data implementation Struct.impl
    subcomponents
      int: data Base_Types::Integer;
      intArray: data Base_Types::Integer[10][10];
  end Struct.impl;
  
  feature group MyPortGroup
    features
      outPort: out event data port Base_Types::Integer;
      inPort: in event data port Base_Types::Integer;
      recursiveGrp: feature group MyPortGroup;
    inverse of
  end MyPortGroup;
  
  feature group MyDataAccessGroup
    features
      dataAccess: requires data access Struct.impl;
      recursiveGrp: feature group MyDataAccessGroup;
    inverse of
  end MyDataAccessGroup;
  
  subprogram group MySubprogramGroup
    features
      prototypeGrp: feature group MyPrototGroupConcrete;
      subprog: requires subprogram access multiplication;
      recursiveGrpAccess: requires subprogram group access MySubprogramGroup;
  end MySubprogramGroup;
  
  subprogram group implementation MySubprogramGroup.impl
    subcomponents
      spg1: subprogram procedure[10];
      spg2: subprogram multiplication;
      recursiveGrp: subprogram group MySubprogramGroup.impl;
  end MySubprogramGroup.impl;
  
  feature group MyPrototypeGroup
    prototypes
      outPort: feature 
      ;
      inPort: feature 
      ;
      dataAccess: feature 
      ;
      subprog: subprogram 
      ;
      definedOutPort: featureBase_Types::Integer 
      ;
      definedInPort: featureBase_Types::Integer 
      ;
      Struct.impl[] ;
      definedSubprog: subprogrammultiplication[] ;
      recursiveGrp: feature group 
      ;
      subprogGrp: subprogram group[] ;
      threadGrp: thread group[] ;
    inverse of
  end MyPrototypeGroup;
  
  feature group MyPrototGroupConcrete
     extends MyPrototypeGroupinverse of
  end MyPrototGroupConcrete;
  
  thread group MyThreadGroup
    features
      portGrp: feature group MyPortGroup;
      dataAccessGrp: feature group MyDataAccessGroup;
      prototypeGrp: feature group MyPrototypeGroup;
      outPort: out event data port Base_Types::Integer;
      inPort: in event data port Base_Types::Integer;
      dataAccess: requires data access Struct.impl;
      subprog: requires subprogram access multiplication;
      subprogGrpAccess: requires subprogram group access MySubprogramGroup.impl;
  end MyThreadGroup;
  
  thread group implementation MyThreadGroup.impl
    subcomponents
      int: data Base_Types::Integer;
      intArray: data Base_Types::Integer[10][10];
      myStruct: data Struct.impl[10];
      recursiveGrp: thread group MyThreadGroup.impl;
      spg1: subprogram procedure[10];
      spg2: subprogram multiplication;
      subprogGrp: subprogram group MySubprogramGroup.impl;
  end MyThreadGroup.impl;
  
  thread thread1
    prototypes
      subprogProt: subprogrammultiplication 
      ;
      threadGrpProt: thread group 
      ;
    features
      portGrp: feature group MyPortGroup;
      dataAccessGrp: feature group MyDataAccessGroup;
      protoGrp: feature group MyPrototGroupConcrete;
      fakePort: out data port AadlBaTest::Types::Opaque;
      inPortA: in event data port Base_Types::Integer;
      inPortB: in event data port Base_Types::Integer;
      inPortC: in event data port Base_Types::Integer;
      inPortD: in event data port Base_Types::Integer;
      outPortA: out event data port MyInteger;
      outPortB: out event data port Base_Types::Boolean;
      inPortArrayA: in event port [10];
      outPortArrayA: out event port [10];
      dataAccess: requires data access Struct.impl;
      dataAccessArray: requires data access Struct.impl;
      mul: requires subprogram access multiplication;
      mulProvided: provides subprogram access multiplication;
      subprogGrpAccess: requires subprogram group access MySubprogramGroup.impl;
  end thread1;
  
  thread thread2
    extends thread1
    (threadGrpProt => thread group MyThreadGroup.impl)
  end thread2;
  
  thread implementation thread2.impl
    subcomponents
      subprogGrp: subprogram group MySubprogramGroup.impl;
      spg1: subprogram procedure;
      spg2: subprogram multiplication;
      subData1: data MyInteger.impl;
      float: data Base_Types::Float;
    properties
      Dispatch_Protocol => Timed;
      Period => 1 sec;
    annex behavior_specification {**
      variables
  x : Base_Types::Integer ;
  y : GroupTest::MyInteger ;
  bool1 : Base_Types::Boolean ;
states
  a : state ;
  dummy : initial complete final state ;
transitions
  a -[]-> a {outPortA := 0} ;
  a -[]-> a {portGrp.outPort := 0} ;
  a -[]-> a {portGrp.recursiveGrp.outPort := 0} ;
  a -[]-> a {dataAccess.int := 0} ;
  a -[]-> a {dataAccessArray[0].int := 0} ;
  a -[]-> a {dataAccess.intArray[0][0] := 0} ;
  a -[]-> a {dataAccessArray[0].intArray[0][0] := 0} ;
  a -[]-> a {dataAccessGrp.dataAccess.int := 0} ;
  a -[]-> a {dataAccessGrp.dataAccess.intArray[0][0] := 0} ;
  a -[]-> a {x := inPortA' count} ;
  a -[]-> a {bool1 := inPortA' fresh} ;
  a -[]-> a {x := inPortA ?} ;
  a -[]-> a {x := portGrp.inPort ?} ;
  a -[]-> a {x := portGrp.inPort' count} ;
  a -[]-> a {bool1 := portGrp.inPort' fresh} ;
  a -[]-> a {x := portGrp.inPort} ;
  a -[]-> a {x := portGrp.recursiveGrp.inPort} ;
  a -[]-> a {x := dataAccess.int} ;
  a -[]-> a {x := dataAccessArray[0].int} ;
  a -[]-> a {x := dataAccess.intArray[0][0]} ;
  a -[]-> a {x := dataAccessArray[0].intArray[0][0]} ;
  a -[]-> a {x := dataAccessGrp.dataAccess.int} ;
  a -[]-> a {x := dataAccessGrp.dataAccess.intArray[0][0]} ;
  a -[]-> a {subprogGrp.spg1[0] !} ;
  a -[]-> a {subprogGrp.spg2 ! (x, 0, y)} ;
  a -[]-> a {subprogGrp.subprog ! (x, 0, y)} ;
  a -[]-> a {subprogGrpAccess.spg1[0] !} ;
  a -[]-> a {subprogGrpAccess.spg2 ! (x, 0, y)} ;
  a -[]-> a {subprogGrpAccess.subprog ! (x, 0, y)} ;
  a -[]-> a {subprogGrpAccess.recursiveGrp.recursiveGrpAccess.subprog ! (x, 0, y)} ;
  a -[]-> a {subprogGrp.prototypeGrp.definedSubprog[0] ! (x, 0, y)} ;
  a -[]-> a {subprogGrp.recursiveGrp.recursiveGrpAccess.prototypeGrp.definedSubprog[0] ! (x, 0, y)} ;
  a -[]-> a {subprogGrp.prototypeGrp.subprog ! (x, 0, y)} ;
  a -[]-> a {subprogGrp.recursiveGrp.recursiveGrpAccess.subprog ! (x, 0, y)} ;
  a -[]-> a {threadGrpProt.subprog ! (x, 0, y)} ;
  a -[]-> a {portGrp.outPort ! (x)} ;
  a -[]-> a {portGrp.inPort >>} ;
  a -[]-> a {portGrp.inPort ? (x)} ;
  a -[]-> a {dataAccessGrp.dataAccess !<} ;
  a -[]-> a {dataAccessGrp.dataAccess !>} ;
  a -[]-> a {dataAccessGrp.recursiveGrp.dataAccess !<} ;
  a -[]-> a {dataAccessGrp.recursiveGrp.dataAccess !>} ;
**};
  end thread2.impl;
  
  process process1
  end process1;
  
  process implementation process1.impl
    subcomponents
      threadGrp: thread group MyThreadGroup.impl;
    annex behavior_specification {**
      variables
  x : Base_Types::Integer ;
  y : GroupTest::MyInteger ;
  bool1 : Base_Types::Boolean ;
states
  a : state ;
transitions
  a -[]-> a {threadGrp.outPort := 0} ;
  a -[]-> a {threadGrp.portGrp.outPort := 0} ;
  a -[]-> a {threadGrp.recursiveGrp.portGrp.outPort := 0} ;
  a -[]-> a {threadGrp.dataAccessGrp.dataAccess.intArray[0][0] := 0} ;
  a -[]-> a {threadGrp.recursiveGrp.dataAccessGrp.dataAccess.intArray[0][0] := 0} ;
  a -[]-> a {threadGrp.recursiveGrp.myStruct[0].intArray[0][0] := 0} ;
  a -[]-> a {x := threadGrp.inPort' count} ;
  a -[]-> a {bool1 := threadGrp.inPort' fresh} ;
  a -[]-> a {x := threadGrp.inPort ?} ;
  a -[]-> a {x := threadGrp.portGrp.inPort ?} ;
  a -[]-> a {x := threadGrp.portGrp.inPort' count} ;
  a -[]-> a {bool1 := threadGrp.portGrp.inPort' fresh} ;
  a -[]-> a {x := threadGrp.portGrp.inPort} ;
  a -[]-> a {x := threadGrp.portGrp.recursiveGrp.inPort} ;
  a -[]-> a {x := threadGrp.recursiveGrp.portGrp.recursiveGrp.inPort} ;
  a -[]-> a {x := threadGrp.dataAccessGrp.dataAccess.intArray[0][0]} ;
  a -[]-> a {x := threadGrp.myStruct[0].int} ;
  a -[]-> a {x := threadGrp.myStruct[0].intArray[0][0]} ;
  a -[]-> a {x := threadGrp.recursiveGrp.myStruct[0].intArray[0][0]} ;
  a -[]-> a {threadGrp.subprogGrp.spg1[0] !} ;
  a -[]-> a {threadGrp.subprogGrp.spg2 ! (x, 0, y)} ;
  a -[]-> a {threadGrp.subprogGrp.subprog ! (x, 0, y)} ;
  a -[]-> a {threadGrp.subprogGrp.recursiveGrp.recursiveGrpAccess.subprog ! (x, 0, y)} ;
  a -[]-> a {threadGrp.subprogGrpAccess.spg1[0] !} ;
  a -[]-> a {threadGrp.subprogGrpAccess.spg2 ! (x, 0, y)} ;
  a -[]-> a {threadGrp.subprogGrpAccess.subprog ! (x, 0, y)} ;
  a -[]-> a {threadGrp.subprogGrpAccess.recursiveGrp.recursiveGrpAccess.subprog ! (x, 0, y)} ;
  a -[]-> a {threadGrp.subprogGrp.prototypeGrp.definedSubprog[0] ! (x, 0, y)} ;
  a -[]-> a {threadGrp.subprogGrp.recursiveGrp.recursiveGrpAccess.prototypeGrp.definedSubprog[0] ! (x, 0, y)} ;
  a -[]-> a {threadGrp.subprogGrp.prototypeGrp.subprog ! (x, 0, y)} ;
  a -[]-> a {threadGrp.portGrp.outPort ! (x)} ;
  a -[]-> a {threadGrp.portGrp.inPort >>} ;
  a -[]-> a {threadGrp.portGrp.inPort ? (x)} ;
  a -[]-> a {threadGrp.dataAccessGrp.dataAccess !<} ;
  a -[]-> a {threadGrp.dataAccessGrp.dataAccess !>} ;
  a -[]-> a {threadGrp.dataAccessGrp.recursiveGrp.dataAccess !<} ;
  a -[]-> a {threadGrp.dataAccessGrp.recursiveGrp.dataAccess !>} ;
**};
  end process1.impl;
end GroupTest;