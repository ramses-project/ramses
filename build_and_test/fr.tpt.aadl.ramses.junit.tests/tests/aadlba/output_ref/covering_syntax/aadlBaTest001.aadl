package NamesResolutionTest
public
with AADL_Project,Data_Model,Base_Types,AadlBaTestPropertySet,AadlBaTest::Types,AadlBaTestSubprogram;
  abstract MyAbstractComponent
  end MyAbstractComponent;
  
  processor p
  end p;
  
  subprogram procedure
  end procedure;
  
  subprogram multiplication
    prototypes
      proto: subprogram 
      ;
    features
      x: in parameter Base_Types::Integer;
      y: in parameter MyInteger;
      z: out parameter MyInteger;
  end multiplication;
  
  subprogram implementation multiplication.impl
  end multiplication.impl;
  
  subprogram implementation multiplication.impl2
    extends multiplication.impl
    (proto => subprogram multiplication)
  end multiplication.impl2;
  
  data MyInteger
    features
      multiplicationAccess: provides subprogram access multiplication;
    properties
      Data_Model::Data_Representation => Integer;
      Data_Model::Integer_Range => 0 .. Max_Target_Integer;
  end MyInteger;
  
  data implementation MyInteger.impl
    subcomponents
      length: data Base_Types::Integer;
  end MyInteger.impl;
  
  data implementation MyInteger.impl2
    extends MyInteger.impl
    subcomponents
      max: data Base_Types::Integer;
  end MyInteger.impl2;
  
  process myprocess
    features
      A: in event data port MyInteger;
      B: in event data port MyInteger;
      C: in event data port MyInteger;
    annex behavior_specification {**
      states
  m1 : complete state ;
  f1 : final state ;
transitions
  m1 -[on dispatch A and B or C and A]-> f1 ;
**};
  end myprocess;
  
  thread thread1
    prototypes
      proto: subprogrammultiplication 
      ;
    features
      fakePort: out data port AadlBaTest::Types::Opaque;
      abstractPort: in event data port MyAbstractComponent;
      inPortA: in event data port Base_Types::Integer;
      inPortB: in event data port Base_Types::Integer;
      inPortC: in event data port Base_Types::Integer;
      inPortD: in event data port Base_Types::Integer;
      outPortA: out event data port MyInteger;
      outPortB: out event data port Base_Types::Boolean;
      inPortArrayA: in event port [10];
      outPortArrayA: out event port [10];
      dataAccess: requires data access MyInteger.impl;
      dataAccess2: requires data access MyInteger.impl2;
      dataAccessArray: requires data access MyInteger.impl2;
      mul: requires subprogram access multiplication;
      mulProvided: provides subprogram access multiplication;
  end thread1;
  
  thread implementation thread1.impl
    subcomponents
      spg1: subprogram procedure;
      spg2: subprogram multiplication;
      subData1: data MyInteger.impl;
      float: data Base_Types::Float;
    properties
      Dispatch_Protocol => Timed;
      Period => 1 sec;
    annex behavior_specification {**
      variables
  x : Base_Types::Integer ;
  y : Base_Types::Integer ;
  tmp : NamesResolutionTest::MyInteger ;
  tmp0 : NamesResolutionTest::MyInteger ;
  tab[10] : NamesResolutionTest::MyInteger ;
  squareTab[10][10] : NamesResolutionTest::MyInteger ;
  tab2[28] : NamesResolutionTest::MyInteger ;
  tmp1 : Base_Types::Integer ;
  tmp2 : AadlBaTest::Types::Opaque ;
  tmp3 : AadlBaTest::Types::Opaque.v1 ;
  tmp4 : NamesResolutionTest::MyInteger.impl ;
  bool1 : Base_Types::Boolean ;
  bool2 : Base_Types::Boolean ;
states
  a : state ;
  b : state ;
  c : state ;
  a2 : complete state ;
  a3 : complete state ;
  a4 : final state ;
  a5 : initial final state ;
  a6 : initial complete final state ;
transitions
  a -[]-> a ;
  a -[]-> a {tmp := 1 timeout 20 ms} ;
  a -[]-> a {tmp := 1 timeout x ms} ;
  a -[]-> a {tmp := 1 timeout #AadlBaTestPropertySet::aConstant ms} ;
  regular1 : a -[]-> a ;
  regular2 [1] : a -[]-> a ;
  regular3 [12] : a -[]-> a ;
  a -[]-> c ;
  b -[]-> c ;
  a -[]-> a ;
  a2 -[on dispatch]-> a ;
  a2 -[on dispatch frozen inPortA]-> a ;
  a2 -[on dispatch frozen inPortA, inPortB]-> a ;
  a2 -[on dispatch stop]-> a4 ;
  a2 -[on dispatch inPortA]-> a ;
  a2 -[on dispatch inPortA frozen inPortB]-> a ;
  a2 -[on dispatch mulProvided]-> a ;
  a2 -[on dispatch abstractPort]-> a ;
  a2 -[on dispatch inPortA or inPortB]-> a ;
  a2 -[on dispatch inPortA and inPortB]-> a ;
  a2 -[on dispatch inPortA or inPortB and inPortC or inPortD]-> a ;
  a2 -[on dispatch timeout ]-> a ;
  a2 -[on dispatch timeout 10 min]-> a ;
  a2 -[on dispatch timeout tab[x] min]-> a ;
  a2 -[on dispatch timeout #AadlBaTestPropertySet::aConstant min]-> a ;
  a -[timeout]-> a ;
  a -[otherwise]-> a ;
  a -[2 > 1]-> a ;
  a -[x < y]-> a ;
  a -[x <= y]-> a ;
  a -[x >= y]-> a ;
  a -[tmp4 = subData1]-> a ;
  a -[1 != y]-> a ;
  a -[bool1 and bool2]-> a ;
  a -[2 > 1 xor x = y]-> a ;
  a -[! bool1 or x = y]-> a ;
  a -[bool1]-> a ;
  a -[! bool2]-> a ;
  a -[true]-> a ;
  a -[false]-> a ;
  a -[-x > 0]-> a ;
  a -[1 + x > 0]-> a ;
  a -[+x * 0 = 0]-> a ;
  a -[1 / x > 0]-> a ;
  a -[#AadlBaTestPropertySet::aConstant mod x > 0 or true]-> a ;
  a -[#AadlBaTestPropertySet::aValue > 0 or bool1]-> a ;
  a -[+y rem x > 0]-> a ;
  a -[x < -y + 3 and bool1 or bool2]-> a ;
  a -[abs x > 2]-> a ;
  a -[-1 > 0]-> a ;
  a -[1 + 1 > 0]-> a ;
  a -[+1 * 0 = 0]-> a ;
  a -[1 / 2 > 0]-> a ;
  a -[2 mod x > 0 or true]-> a ;
  a -[inPortA' fresh != true]-> a ;
  a -[abs (-inPortA' count) + 1 > 0]-> a ;
  a -[inPortA ? = 0 and inPortB ? = 1]-> a ;
  a -[]-> a {tmp := 1 ;
x := 1 ;
y := 1} ;
  a -[]-> a {tmp := 1 ;
x := 1 ;
y := 1} ;
  a -[]-> a {tmp := 1 ;
x := 1 ;
y := 1 timeout 100 ms} ;
  a -[]-> a {tmp := 1 ;
x := 1 ;
y := 1 timeout x ms} ;
  a -[]-> c {tmp := 1 timeout #AadlBaTestPropertySet::aValue ms} ;
  a -[]-> a ;
  a -[]-> a {procedure !} ;
  a -[]-> a {mul ! (0, 0, tmp)} ;
  a -[]-> a {mul ! (x, tmp, outPortA)} ;
  a -[]-> a {spg1 !} ;
  a -[]-> a {spg2 ! (0, 1, tmp)} ;
  a -[]-> a {procedure !} ;
  a -[]-> a {multiplication ! (0, 0, tmp)} ;
  a -[]-> a {multiplication.impl ! (0, 0, tmp)} ;
  a -[]-> a {procedure !} ;
  a -[]-> a {multiplication ! (0, 0, tmp)} ;
  a -[]-> a {AadlBaTestSubprogram::parameterlessProcedure !} ;
  a -[]-> a {AadlBaTestSubprogram::addition ! (1, 2, x)} ;
  a -[]-> a {AadlBaTestSubprogram::addition.impl ! (0, 1, x)} ;
  a -[]-> a {dataAccessArray[x].multiplicationAccess ! (1, 2, tmp)} ;
  a -[]-> a {dataAccess.multiplicationAccess ! (1, 2, tmp)} ;
  a -[]-> a {proto ! (1, 2, tmp)} ;
  a -[]-> a {outPortA ! (1 + 1)} ;
  a -[]-> a {outPortA ! (-1 * tmp)} ;
  a -[]-> a {outPortB ! (! (x = y))} ;
  a -[]-> a {{outPortA ! (1 + 1) ;
outPortB ! (true)}} ;
  a -[]-> a {outPortA ! (1 + 1)} ;
  a -[]-> a { !} ;
  a -[]-> a {inPortA ? (y)} ;
  a -[]-> a {inPortA >>} ;
  a -[]-> a {inPortA ? (dataAccess.length)} ;
  a -[]-> a {inPortA ? (dataAccess2.length)} ;
  a -[]-> a {inPortA ? (subData1.length)} ;
  a -[]-> a {dataAccess !>} ;
  a -[]-> a {dataAccess !<} ;
  a -[]-> a {*!>} ;
  a -[]-> a {*!<} ;
  a -[]-> a {computation (2 hr)} ;
  a -[]-> a {computation (1 min .. 300 sec)} ;
  a -[]-> a {computation (100 ms)} ;
  a -[]-> a {{tmp := 1}} ;
  a -[]-> a {{tmp := 1 + 2}} ;
  a -[]-> a {{x := 1 + x}} ;
  a -[]-> a {{tmp := any}} ;
  a -[]-> a {{tmp4 := subData1}} ;
  a -[]-> a {tab[x] := 1} ;
  a -[]-> a {if (bool1) tmp := 1 end if
  } ;
  a -[]-> a {if (true) tmp := 1 ;
tmp := 1 end if
  } ;
  a -[]-> a {if (true) outPortA ! (1 + 1) ;
outPortB ! (true) end if
  } ;
  a -[]-> a {if (bool1) tmp := 1 else tmp := 2 end if
  } ;
  a -[]-> a {if (x > y or bool1) tmp := 1 end if
  } ;
  a -[]-> a {if (bool1) outPortA ! (1 + 1) elsif (bool2) tmp := 2 else outPortB ! (true) end if
  } ;
  a -[]-> a {for (i : Integer in 0 .. 9)
  {
    outPortA ! (1 + 1) ;
outPortB ! (true)
  }
  } ;
  a -[]-> a {for (i : Integer in 0 .. 9)
  {
    outPortA ! (1 + 1) ;
outPortB ! (true)
  }
  } ;
  a -[]-> a {for (i : Integer in y .. 9)
  {
    tmp := 1
  }
  } ;
  a -[]-> a {for (i : Integer in inPortA)
  {
    tmp := 1
  }
  } ;
  a -[]-> a {for (i : MyInteger in tmp .. tmp0)
  {
    tmp := tmp0
  }
  } ;
  a -[]-> a {for (i : Integer in 0 .. 9)
  {
    tmp := 1
  }
  } ;
  a -[]-> a {for (i : Integer.v1 in 0 .. 9)
  {
    tmp := 1
  }
  } ;
  a -[]-> a {forall (i : Integer in 1 .. 9)
  {
    tmp := 1
  }
  } ;
  a -[]-> a {forall (i : Integer in 0 .. 9)
  {
    tmp := 1 ;
tmp := 1
  }
  } ;
  a -[]-> a {forall (i : Integer in 0 .. 9)
  {
    tmp := 1 ;
x := 1
  }
  } ;
  a -[]-> a {forall (i : Integer in y .. 9)
  {
    tmp := 1
  }
  } ;
  a -[]-> a {forall (i : Integer in inPortA)
  {
    tmp := 1
  }
  } ;
  a -[]-> a {forall (i : Integer in 0 .. 9)
  {
    tmp := 1
  }
  } ;
  a -[]-> a {forall (i : Integer.v1 in 0 .. 9)
  {
    tmp := 1
  }
  } ;
  a -[]-> a {while (true)
  {
    tmp := 1
  }
  } ;
  a -[]-> a {while (bool1)
  {
    tmp := 1 ;
tmp := 1
  }
  } ;
  a -[]-> a {while (bool1)
  {
    tmp := 1 ;
x := 1
  }
  } ;
  a -[]-> a {while (bool1 and bool2)
  {
    tmp := 1
  }
  } ;
  a -[]-> a {do
  tmp := 1
  until (true)
  } ;
  a -[]-> a {do
  tmp := 1 ;
x := 1
  until (true)
  } ;
  a -[]-> a {do
  tmp := 1 ;
tmp := 1
  until (true)
  } ;
  a -[]-> a {do
  tmp := 1
  until (bool1)
  } ;
  a -[]-> a {do
  tmp := 1
  until (bool1 xor bool2)
  } ;
  a -[]-> a {do
  tmp := 1
  until (bool1 or x + 1 > -y)
  } ;
  a -[]-> a {for (i : MyInteger in 0 .. 9)
  {
    for (j : MyInteger in 0 .. 9)
    {
      tmp := i + j
    }
     ;
tmp := i
  }
  } ;
  a -[]-> a {while (true)
  {
    for (i : Integer in 0 .. 9)
    {
      if (true) {tmp := 1} elsif (true) {tmp := 1} else {for (j : Integer in 0 .. 9)
      {
        do
        {x := i + j}
        until (true)
      
      }
      } end if
    
    }
  
  }
  } ;
  a -[]-> a {bool1 := bool1 or bool1 or bool1} ;
  a -[]-> a {bool1 := bool1 and bool1 and bool1} ;
  a -[]-> a {bool1 := bool1 xor bool1 xor bool1} ;
  a -[]-> a {tmp := tmp0 ** 1} ;
  a -[]-> a {tmp := abs tmp0} ;
  a -[]-> a {bool2 := ! bool1} ;
  a -[]-> a {x := x * x * x} ;
  a -[]-> a {x := x / x / x} ;
  a -[]-> a {x := x mod x mod x} ;
  a -[]-> a {x := x rem x rem x} ;
  a -[]-> a {x := x * x / x mod x rem x} ;
  a -[]-> a {x := +x + x + x} ;
  a -[]-> a {x := -x - x - x} ;
  a -[]-> a {x := +x - x + x} ;
  a -[]-> a {bool1 := x = y} ;
  a -[]-> a {bool1 := bool2 = true} ;
  a -[]-> a {bool1 := x != y} ;
  a -[]-> a {bool1 := bool2 != true} ;
  a -[]-> a {bool1 := x > y} ;
  a -[]-> a {bool1 := x < y} ;
  a -[]-> a {bool1 := x >= y} ;
  a -[]-> a {bool1 := x <= y} ;
  a -[]-> a {bool1 := ! (abs x * x / y - x rem y <= 1) != (x ** (1 ** tmp) != ((abs x) + x - y))} ;
  a -[]-> a {tmp := 12 ;
tmp := 0 ;
tmp := 1000000 ;
tmp := 1000000 ;
tmp := 123456} ;
  a -[]-> a {float := 12.0 ;
float := 0.0 ;
float := 0.456 ;
float := 3.1415926 ;
float := 1.0E-6 ;
float := 1000000.0} ;
  a -[]-> a {tmp := 255 ;
tmp := 255 ;
tmp := 255 ;
tmp := 2560} ;
  a -[]-> a {tmp := 224 ;
tmp := 224 ;
tmp := 224} ;
**};
  end thread1.impl;
end NamesResolutionTest;