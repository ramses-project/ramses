package DataStructPrototypeTest
public
with Data_Model,Base_Types,AadlBaTestPropertySet,AadlBaTest::Types,AadlBaTestSubprogram;
  data MyInteger
    properties
      Data_Model::Data_Representation => Integer;
  end MyInteger;
  
  data MyFloat
    properties
      Data_Model::Data_Representation => Float;
  end MyFloat;
  
  data MyFixed
    properties
      Data_Model::Data_Representation => Fixed;
      Data_Model::Data_Digits => 10;
      Data_Model::Data_Scale => 5;
  end MyFixed;
  
  data MyEnum
    properties
      Data_Model::Data_Representation => Enum;
      Data_Model::Enumerators => ("unknown", "monday", "thuesday", "wednesday", "thrusday", "friday", "saturday", "sunday");
      Data_Model::Representation => ("0", "1", "2", "3", "4", "5", "6", "7");
  end MyEnum;
  
  data MyStruct_A
    properties
      Data_Model::Data_Representation => Struct;
      Data_Model::Base_Type => (classifier(Base_Types::Integer), classifier(Base_Types::Float));
      Data_Model::Element_Names => ("int", "float");
  end MyStruct_A;
  
  data MyStruct_B
    properties
      Data_Model::Data_Representation => Struct;
      Data_Model::Base_Type => (classifier(MyInteger), classifier(MyStruct_A));
      Data_Model::Element_Names => ("myInt", "myStruct_A");
  end MyStruct_B;
  
  data MyStruct_C
    properties
      Data_Model::Data_Representation => Struct;
      Data_Model::Base_Type => (classifier(Base_Types::Integer), classifier(MyArray_Integer));
      Data_Model::Element_Names => ("int", "myArrayInteger");
  end MyStruct_C;
  
  data MyUnion
    properties
      Data_Model::Data_Representation => Union;
      Data_Model::Base_Type => (classifier(Base_Types::Integer), classifier(Base_Types::Float));
      Data_Model::Element_Names => ("int", "float");
  end MyUnion;
  
  data MyIntegerArray_A
    properties
      Data_Model::Data_Representation => Array;
      Data_Model::Base_Type => (classifier(MyInteger));
      Data_Model::Dimension => (5, 10, 15);
  end MyIntegerArray_A;
  
  data MyIntegerArray_B
    properties
      Data_Model::Data_Representation => Array;
      Data_Model::Base_Type => (classifier(MyIntegerArray_A));
      Data_Model::Dimension => (5, 10, 15);
  end MyIntegerArray_B;
  
  data MyArray
    properties
      Data_Model::Data_Representation => Array;
      Data_Model::Dimension => (5);
  end MyArray;
  
  data MyArray_Float
    extends MyArray
    properties
      Data_Model::Base_Type => (classifier(Base_Types::Float));
  end MyArray_Float;
  
  data MyArray_Integer
    extends MyArray
    properties
      Data_Model::Base_Type => (classifier(Base_Types::Integer));
  end MyArray_Integer;
  
  data implementation MyArray.impl
    subcomponents
      length: data Base_Types::Integer;
  end MyArray.impl;
  
  data implementation MyArray_Integer.impl
    extends MyArray.impl
    properties
      Data_Model::Base_Type => (classifier(Base_Types::Integer_8));
  end MyArray_Integer.impl;
  
  data implementation MyArray_Float.impl
    extends MyArray.impl
    properties
      Data_Model::Base_Type => (classifier(Base_Types::Float_32));
  end MyArray_Float.impl;
  
  thread abstractThread
    prototypes
      MyStruct_B 
      ;
       
      ;
       
      ;
      definedInFeatProto: featureMyStruct_B 
      ;
      definedOutFeatProto: featureMyStruct_B 
      ;
      inPortFeatProto: feature 
      ;
      outPortFeatProto: feature 
      ;
      requiresAccessProto: feature 
      ;
      providesAccessProto: feature 
      ;
      undefinedFeatProto: feature 
      ;
    features
      inPortInteger: in event data port Base_Types::Integer;
      inPortMyIntegerArray_A: in event data port MyIntegerArray_A;
      outPortInteger: out event data port Base_Types::Integer;
      outPortMyIntegerArray_A: out event data port MyIntegerArray_A;
      dataAccessProtoA: requires data access ;
      dataAccessProtoB: requires data access ;
      dataAccess: requires data access MyStruct_B;
      undefinedDataAccess: requires data access ;
  end abstractThread;
  
  thread implementation abstractThread.impl
    subcomponents
      subMyStruct_B: data MyStruct_B;
      subDataProtoA: data ;
      subDataProtoB: data ;
      undefinedSubData: data ;
      subArrayMyArray_Integer: data MyArray_Integer[10];
      subMyEnum_A: data MyEnum;
      subMyEnum_B: data MyEnum {
        Data_Model::Initial_Value => ("monday");
        };
  end abstractThread.impl;
  
  thread concreteThread
    extends abstractThread
  end concreteThread;
  
  thread implementation concreteThread.impl
    extends abstractThread.impl
    (dataProto => data MyStruct_B,inPortFeatProto => in data port MyStruct_B,outPortFeatProto => out data port MyStruct_B,requiresAccessProto => requires data access MyStruct_B,providesAccessProto => provides data access MyStruct_B)
    properties
      Dispatch_Protocol => Periodic;
      Period => 1 sec;
    annex behavior_specification {**
      variables
  int : Base_Types::Integer ;
  localMyInteger : DataStructPrototypeTest::MyInteger ;
  localMyStruct_A : DataStructPrototypeTest::MyStruct_A ;
  localArrayMyStruct_A[10] : DataStructPrototypeTest::MyStruct_A ;
  localMyStruct_B : DataStructPrototypeTest::MyStruct_B ;
  localMyArray_Integer_A : DataStructPrototypeTest::MyArray_Integer ;
  localMyArray_Integer_B : DataStructPrototypeTest::MyArray_Integer ;
  localMyArray_IntegerImpl : DataStructPrototypeTest::MyArray_Integer.impl ;
  localMyStruct_C : DataStructPrototypeTest::MyStruct_C ;
  localMyIntegerArray_A : DataStructPrototypeTest::MyIntegerArray_A ;
  localMyIntegerArray_B : DataStructPrototypeTest::MyIntegerArray_B ;
  localMyIntegerArray_C[10][10] : DataStructPrototypeTest::MyIntegerArray_B ;
  localOtherMyIntegerArray_B[10][10][10] : DataStructPrototypeTest::MyIntegerArray_A ;
  localMyEnum : DataStructPrototypeTest::MyEnum ;
  localDay : AadlBaTest::Types::Days.v1 ;
  squareTab[130][28] : DataStructPrototypeTest::MyInteger ;
states
  uniqueState : initial complete final state ;
  a : state ;
transitions
  a -[]-> a {localMyStruct_B.myInt := any ;
localMyStruct_B.myStruct_A.int := any ;
subMyStruct_B.myInt := any ;
subMyStruct_B.myStruct_A.int := any ;
dataAccess.myInt := any ;
dataAccess.myStruct_A.int := any} ;
  a -[]-> a {dataAccessProtoA.myInt := any ;
dataAccessProtoA.myStruct_A.int := any ;
dataAccessProtoB.myInt := any ;
dataAccessProtoB.myStruct_A.int := any ;
subDataProtoA.myInt := any ;
subDataProtoA.myStruct_A.int := any ;
subDataProtoB.myInt := any ;
subDataProtoB.myStruct_A.int := any} ;
  a -[]-> a {requiresAccessProto.myInt := any ;
requiresAccessProto.myStruct_A.int := any ;
requiresAccessProto.myInt := providesAccessProto.myInt} ;
  a -[]-> a {outPortFeatProto := any} ;
  a -[]-> a {localMyStruct_B := inPortFeatProto} ;
  a -[]-> a {for (i : Integer in localMyArray_Integer_A)
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {for (i : Integer in localMyStruct_C.myArrayInteger)
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {for (i : Integer_8 in localMyArray_IntegerImpl)
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {for (i : MyInteger in localMyIntegerArray_A[0][0])
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {for (i : MyInteger in squareTab)
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {for (i : MyInteger in localMyIntegerArray_A)
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {for (i : MyInteger in localMyIntegerArray_A[0])
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {for (i : Integer in inPortInteger)
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {localMyArray_Integer_A[0] := 1} ;
  a -[]-> a {localMyArray_Integer_A := localMyArray_Integer_B} ;
  a -[]-> a {subArrayMyArray_Integer[0] := localMyArray_Integer_A} ;
  a -[]-> a {localMyIntegerArray_A[0] := localMyIntegerArray_A[0]} ;
  a -[]-> a {localMyIntegerArray_A[0][0][0] := localMyInteger} ;
  a -[]-> a {localMyIntegerArray_B[0][0][0] := localMyIntegerArray_A} ;
  a -[]-> a {localOtherMyIntegerArray_B[0][0][0] := localMyIntegerArray_A} ;
  a -[]-> a {localMyIntegerArray_A := localOtherMyIntegerArray_B[0][0][0]} ;
  a -[]-> a {localMyArray_Integer_A[localMyStruct_A.int] := 1} ;
  a -[]-> a {localMyArray_Integer_A[localMyStruct_B.myInt] := 1} ;
  a -[]-> a {localMyArray_Integer_A[subMyStruct_B.myInt] := 1} ;
  a -[]-> a {inPortInteger ? (localMyStruct_B.myStruct_A.int)} ;
  a -[]-> a {inPortMyIntegerArray_A ? (localMyIntegerArray_B[0][0][0])} ;
  a -[]-> a {outPortInteger ! (localMyStruct_B.myStruct_A.int)} ;
  a -[]-> a {outPortMyIntegerArray_A ! (localMyIntegerArray_B[0][0][0])} ;
  a -[]-> a {AnOtherSubprogConcrete ! (localMyStruct_A.int, localMyStruct_B, localMyIntegerArray_B[0][0][0])} ;
  a -[]-> a {subMyEnum_A := subMyEnum_B} ;
  a -[]-> a {subMyEnum_A := MyEnum#Enumerators.monday} ;
  a -[]-> a {for (i : MyStruct_A in localArrayMyStruct_A)
  {
    localMyStruct_A.float := i.float
  }
  } ;
  a -[]-> a {localMyEnum := AadlBaTest::Types::Days.v1#Enumerators.monday ;
localDay := MyEnum#Enumerators.monday ;
localMyEnum := localDay} ;
  a -[]-> a { := any} ;
  a -[]-> a { := any} ;
  a -[]-> a {localMyStruct_B := } ;
  a -[]-> a {for (i : Integer in localMyStruct_C.int)
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {for (i : Integer in localMyArray_Integer_A[0])
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {localMyIntegerArray_B[0][0][0][0] := localMyIntegerArray_A[0]} ;
  a -[]-> a {localMyIntegerArray_B[0][0][0][0][0][0] := localMyInteger} ;
  a -[]-> a {localMyIntegerArray_C[0][0][0][0][0][0][0][0] := localMyInteger} ;
  a -[]-> a {localMyIntegerArray_C[0][0][0][0][0] := localMyIntegerArray_A} ;
  a -[]-> a {subArrayMyArray_Integer[0][0] := int} ;
  a -[]-> a {for (i : Integer in localOtherMyIntegerArray_B[1][1][3])
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {for (i : MyIntegerArray_A in localOtherMyIntegerArray_B)
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {for (i : Integer in localMyArray_IntegerImpl)
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {for (i : MyInteger in inPortInteger)
  {
    computation (1 sec)
  }
  } ;
  a -[]-> a {localMyArray_Integer_A := 1} ;
  a -[]-> a {localOtherMyIntegerArray_B := localMyIntegerArray_B} ;
  a -[]-> a {localMyIntegerArray_A[0][0][0][0] := localMyInteger} ;
  a -[]-> a {inPortInteger ? (localMyStruct_B.myStruct_A.float)} ;
  a -[]-> a {inPortMyIntegerArray_A ? (localMyIntegerArray_B[0][0])} ;
  a -[]-> a {outPortInteger ! (localMyStruct_B.myStruct_A.float)} ;
  a -[]-> a {outPortMyIntegerArray_A ! (localMyIntegerArray_B[0][0])} ;
  a -[]-> a {AnOtherSubprogConcrete ! (localMyStruct_A.float, localMyStruct_B, localMyIntegerArray_B[0][0])} ;
**};
  end concreteThread.impl;
  
  subprogram AnOtherSubprogAbstract
    prototypes
       
      ;
      MyIntegerArray_A 
      ;
    features
      inParam1: in parameter Base_Types::Integer;
      inParam2: in parameter MyStruct_B;
      outParam3: out parameter ;
  end AnOtherSubprogAbstract;
  
  subprogram AnOtherSubprogConcrete
    extends AnOtherSubprogAbstract
    (dataProto => data MyStruct_B)
  end AnOtherSubprogConcrete;
  
  subprogram MySubProgAbstract
    prototypes
       
      ;
      MyStruct_B 
      ;
       
      ;
    features
      outParam1: out parameter MyStruct_B;
      outParam2: out parameter ;
      outParam3: out parameter ;
      outParam4: out parameter ;
      inParam1: in parameter MyStruct_B;
      inParam2: in parameter ;
      inParam3: in parameter ;
      inParam4: in parameter Base_Types::Integer;
  end MySubProgAbstract;
  
  subprogram MySubProgConcrete
    extends MySubProgAbstract
    (dataProto => data MyStruct_B)
    annex behavior_specification {**
      variables
  localMyStruct_B : DataStructPrototypeTest::MyStruct_B ;
  tab[10] : Base_Types::Integer ;
states
  uniqueState : initial final state ;
  a : state ;
transitions
  a -[]-> a {outParam1.myInt := any ;
outParam1.myStruct_A.int := any} ;
  a -[]-> a {outParam2.myInt := any ;
outParam2.myStruct_A.int := any ;
outParam3.myInt := any ;
outParam3.myStruct_A.int := any ;
localMyStruct_B := inParam1} ;
  a -[]-> a {tab[inParam1.myInt] := 1} ;
  a -[]-> a {tab[inParam1.myStruct_A.int] := 1} ;
  a -[]-> a {tab[inParam4] := 1} ;
  a -[]-> a { := any} ;
  a -[]-> a {localMyStruct_B := } ;
**};
  end MySubProgConcrete;
end DataStructPrototypeTest;