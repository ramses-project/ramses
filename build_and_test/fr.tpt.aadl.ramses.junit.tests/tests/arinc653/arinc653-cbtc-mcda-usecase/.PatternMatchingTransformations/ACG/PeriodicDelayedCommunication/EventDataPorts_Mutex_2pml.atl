--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--
-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm
module EventDataPorts_Mutex;
create OUT : MM_ATL2PM from IN : AADLI;

-- Following helper used by SubprogramCallsCommonRefinmentSteps module
helper def: Unique_Send_Output_Per_Thread : Boolean =
 true;

helper def: Send_Output_Name : String =
 'Send_Output';

helper def: PDC_MUTEX_RUNTIME_NAME : String =
 'PeriodicDelayedMutex_runtime';

helper def: PeriodicDelayedMutexRuntime_Name : String =
 thisModule.PDC_MUTEX_RUNTIME_NAME.toUpper(); -----------------------------------------------------------------------------------------------------
--- Platform-dependent resources (refine lock type on queues and lock/unlock suprograms)
--- Must be replaced in a superimposition module (ARINC653 module, POSIX module...)
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
--- Platform-dependent resources (refine lock type on queues and lock/unlock suprograms)
--- Must be replaced in a superimposition module (ARINC653 module, POSIX module...)
-----------------------------------------------------------------------------------------------------
helper def: Queue_Prototype : AADLBA!DataClassifier =
 'BufferPrototype'.asDataType(thisModule.PeriodicDelayedMutexRuntime_Name);

helper def: SharedStruct_Prototype_Impl : AADLBA!DataClassifier =
 'SharedStructure.impl'.asDataType(thisModule.PeriodicDelayedMutexRuntime_Name);

helper def: SharedStruct_Prototype : AADLBA!DataClassifier =
 'SharedStructure'.asDataType(thisModule.PeriodicDelayedMutexRuntime_Name); -----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
helper def: collectInitCallSubpgList(c : AADLI!ComponentInstance) : Sequence(ADLBA!SubprogramCall) =
 c.featureInstance->select(e |
  e.isInputFeature()
 )->collect(e |
  thisModule.resolveMatchedSingleIfExists(e, 'callInit')
 )->excluding(OclUndefined);

helper def: collectInitCallSequence(c : AADLI!ComponentInstance) : AADLBA!SubprogramCallSequence =
 let result : AADLBA!SubprogramCallSequence = if c.featureInstance->exists(e |
  e.isInputFeature() and e.isPeriodicDelayedPort()
 ) then
  thisModule.createInitializeEntrypointPropertyAssociation(c)
 else
  OclUndefined
 endif in
 let subpgList : Sequence(ADLBA!SubprogramCall) = thisModule.collectInitCallSubpgList(c) in
 if not result.oclIsUndefined() and not subpgList->isEmpty() then
  result
 else
  OclUndefined
 endif;

helper def: collectPeriodicDelayed_LocalVariablesConnections_Mutex(c : AADLI!ComponentInstance) : Sequence(AADLBA!AccessConnection) =
 c.featureInstance->select(e |
  e.isInputFeature()
 )->collect(e |
  Sequence {thisModule.resolveMatchedSingleIfExists(e, 'cnxBuffer'), thisModule.resolveMatchedSingleIfExists(e, 'cnxSize')}
 );

helper def: collectPeriodicDelayed_ThreadVariables_Mutex(c : AADLI!ComponentInstance) : Sequence(AADLBA!AccessConnection) =
 c.featureInstance->select(e |
  e.isInputFeature()
 )->collect(e |
  thisModule.resolveMatchedSingleIfExists(e, 'queueSizeVariable')
 );

helper def: collectPeriodicDelayed_LocalVariables_Mutex(c : AADLI!ComponentInstance, behavior : AADLI!Element) : Sequence(AADLBA!DataAccess) =
 Sequence {thisModule.resolveLazySingleIfExists(c, 'createPDPLocalVariables_Mutex', 'currentDeadlineSub'), thisModule.resolveLazySingleIfExists(c, 'createPDPLocalVariables_Mutex', 'deadlineSub'), thisModule.resolveLazySingleIfExists(c, 'createPDPLocalVariables_Mutex', 'periodSub'), thisModule.resolveLazySingleIfExists(c, 'createPDPLocalVariables_Mutex', 'currentPeriodSub')}->union(if c.featureInstance->exists(e |
  e.isOutputFeature() and e.isPeriodicDelayedPort()
 ) then
  Sequence {thisModule.resolveLazySingleIfExists(c, 'createMsgPrioritySub', 'msgPrioritySub')}
 else
  Sequence {}
 endif)->union(thisModule.collectPeriodicDelayed_LocalVariables_Mutex_PFSpec(c, behavior))->append(thisModule.resolveLazySingleIfExists(c, 'createIterationCounter', 'IterationCounter'))->union(c.featureInstance->select(e |
  e.isEventOrEventDataPort() and e.isPeriodicDelayedPort()
 )->collect(fi |
  thisModule.resolveMatchedSingleIfExists(fi, 'localVariable')
 ))->flatten();

helper def: collectPeriodicDelayed_LocalVariables_Mutex_PFSpec(c : AADLI!ComponentInstance, behavior : AADLI!Element) : Sequence(AADLBA!DataAccess) =
 Sequence {};

helper def: collectInitializationEntryPoint(c : AADLI!ComponentInstance) : AADLBA!PropertyAssociation =
 let result : AADLBA!SubprogramCallSequence = if c.featureInstance->exists(e |
  e.isInputFeature() and e.isPeriodicDelayedPort()
 ) then
  thisModule.createInitializeEntrypointPropertyAssociation(c)
 else
  OclUndefined
 endif in
 let subpgList : Sequence(ADLBA!SubprogramCall) = thisModule.collectInitCallSubpgList(c) in
 if not result.oclIsUndefined() and not subpgList->isEmpty() then
  thisModule.resolveLazySingleIfExists(c, 'createInitializeEntrypointPropertyAssociation', 'pa')
 else
  OclUndefined
 endif;

-- @extends m_Thread_Output_PeriodicDelayed_Port
rule m_Thread_Output_PeriodicDelayed_Port_Mutex {
 from
  fi : AADLI!FeatureInstance,
  cnxRef : AADLI!PortConnection
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {fi, cnxRef},
   value <- 'EventDataPorts_Mutex.m_Thread_Output_PeriodicDelayed_Port_Mutex'
  )
} -- @extends m_Thread_Output_PeriodicDelayed_IntraProcess_EventOrEventDataPort_Instance,m_Thread_Output_PeriodicDelayed_Port_Mutex
-- @extends m_Thread_Output_PeriodicDelayed_IntraProcess_EventOrEventDataPort_Instance,m_Thread_Output_PeriodicDelayed_Port_Mutex
rule m_Thread_Output_PeriodicDelayed_IntraProcess_EventOrEventDataPort_Instance_Mutex {
 from
  fi : AADLI!FeatureInstance,
  cnxRef : AADLI!PortConnection
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {fi, cnxRef},
   value <- 'EventDataPorts_Mutex.m_Thread_Output_PeriodicDelayed_IntraProcess_EventOrEventDataPort_Instance_Mutex'
  )
} -- @extends m_PeriodicDelayed_Port,m_Output_EventOrEventDataPort_ComputeEntrypointCallSequence
-- @extends m_PeriodicDelayed_Port,m_Output_EventOrEventDataPort_ComputeEntrypointCallSequence
rule m_Output_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_PutValue_Mutex {
 from
  fi : AADLI!FeatureInstance,
  behavior : AADLI!SubprogramCallSequence,
  paramCnx : AADLI!ParameterConnection,
  cnxRef : AADLI!PortConnection
  (
   fi.srcConnectionInstance->exists(e |
    e.connectionReference->first().connection = cnxRef
   )
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {fi, behavior, paramCnx, cnxRef},
   value <- 'EventDataPorts_Mutex.m_Output_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_PutValue_Mutex'
  )
} -- @extends m_Input_Port_ComputeEntrypointCallSequence,m_PeriodicDelayed_Port
-- @extends m_Input_Port_ComputeEntrypointCallSequence,m_PeriodicDelayed_Port
rule m_Input_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_ReceiveInputs_Mutex {
 from
  fi : AADLI!FeatureInstance,
  behavior : AADLI!SubprogramCallSequence
  (
   behavior.isComputeEntryPointOf(fi.getComponentInstance()) and fi.isInputFeature() and fi.isEventPort() or fi.isEventDataPort()
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {fi, behavior},
   value <- 'EventDataPorts_Mutex.m_Input_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_ReceiveInputs_Mutex'
  )
} -- @extends m_Thread_IntraProcess_Input_EventDataPort_PeriodicDelayed_Instance,m_Input_PeriodicDelayed_Port_Mutex
-- @extends m_Thread_IntraProcess_Input_EventDataPort_PeriodicDelayed_Instance,m_Input_PeriodicDelayed_Port_Mutex
rule m_Thread_IntraProcess_Input_EventDataPort_PeriodicDelayed_Instance_Mutex {
 from
  fi : AADLI!FeatureInstance
  (
   fi.isEventDataPort() and fi.isIntraProcessFeatureInstance()
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {fi},
   value <- 'EventDataPorts_Mutex.m_Thread_IntraProcess_Input_EventDataPort_PeriodicDelayed_Instance_Mutex'
  )
} -- @extends m_PeriodicDelayed_Port,m_Input_EventDataPort_ComputeEntrypointCallSequence
-- @extends m_PeriodicDelayed_Port,m_Input_EventDataPort_ComputeEntrypointCallSequence
rule m_Input_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_NextValue_Mutex {
 from
  fi : AADLI!FeatureInstance,
  behavior : AADLI!SubprogramCallSequence,
  paramCnx : AADLI!ParameterConnection
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {fi, behavior, paramCnx},
   value <- 'EventDataPorts_Mutex.m_Input_EventOrEventDataPort_PeriodicDelayed_ComputeEntrypointCallSequence_NextValue_Mutex'
  )
} -- @extends m_PeriodicDelayed_Port,m_Thread_Input_Port_Instance
-- @extends m_PeriodicDelayed_Port,m_Thread_Input_Port_Instance
rule m_Input_PeriodicDelayed_Port_Mutex {
 from
  fi : AADLI!FeatureInstance
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {fi},
   value <- 'EventDataPorts_Mutex.m_Input_PeriodicDelayed_Port_Mutex'
  )
} -- Queue as a linked list, its elements are links
----------------------------------------------------------------------------------------------------
--- PREVIOUS VERSION BELLOW
----------------------------------------------------------------------------------------------------
helper context AADLBA!ThreadImplementation def: getCall(name : String) : AADLBA!SubprogramCall =
 self.getOwnedSubprogramCallSequences()->first().ownedSubprogramCall->any(call |
  call.name = name
 );

helper context AADLI!FeatureInstance def: getAllInternalConnections() : Sequence(AADLI!Connection) =
 if self.direction = #out then
  self.getComponentInstance().subcomponent.classifier.getOwnedConnections()->select(c |
   c.destination.connectionEnd.name = self.feature.name
  )
 else
  self.getComponentInstance().subcomponent.classifier.getOwnedConnections()->select(c |
   c.source.connectionEnd.name = self.feature.name
  )
 endif;

helper context AADLBA!ComponentImplementation def: subprogramCalls() : Sequence(AADLBA!SubprogramCall) =
 if self.ownedSubprogramCallSequence->isEmpty() then
  0
 else
  self.getOwnedSubprogramCallSequences()->first().getOwnedSubprogramCalls()
 endif;

helper context AADLI!ComponentInstance def: getPriority() : Integer =
 self.getPropertyIntValue('Priority');

helper context AADLI!ComponentInstance def: getMsgPriority() : Integer =
 self.getPriority();

helper context AADLI!ComponentInstance def: getImgSubcomponent(name : String) : AADLBA!Subcomponent =
 thisModule.resolveMatchedSingleIfExists(self, 'sub').threadSubcomponentType.getAllSubcomponents()->any(s |
  s.name = name
 );

helper context AADLBA!Subcomponent def: getSubcomponent(name : String) : AADLBA!Subcomponent =
 self.getComponentImplementation().getSubcomponent(name);

helper context AADLBA!ComponentImplementation def: getSubcomponent(name : String) : AADLBA!Subcomponent =
 self.getOwnedSubcomponents()->any(s |
  s.name = name
 );
