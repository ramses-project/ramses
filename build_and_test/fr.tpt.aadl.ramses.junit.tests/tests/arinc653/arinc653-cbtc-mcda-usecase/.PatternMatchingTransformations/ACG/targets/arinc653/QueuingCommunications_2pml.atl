--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--
-- @nsURI AADLBA=/fr.tpt.aadl.annex.behavior/model/aadlba.ecore
-- @atlcompiler emftvm
module QueuingCommunications;
create OUT : MM_ATL2PM from IN : AADLI, AADL_RUNTIME : AADLBA, DATA_MODEL : AADLBA, PROGRAMMING_PROPERTIES : AADLBA, HOOKS : ATLHOOKS, ARINC653_RUNTIME : AADLBA;

--------------------------------------------
---               QUEUING                ---
--------------------------------------------
-- @extends m_EventOrEnvetDataPort_Filter,m_Not_PeriodicDelayed_Port
abstract rule m_QueueingSubprogramCall {
 from
  fi : AADLI!FeatureInstance,
  behavior : AADLI!SubprogramCallSequence,
  paramCnx : AADLI!ParameterConnection
  (
   behavior.isComputeEntryPointOf(fi.getComponentInstance()) and not fi.isIntraProcessFeatureInstance()
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {fi, behavior, paramCnx},
   value <- 'QueuingCommunications.m_QueueingSubprogramCall'
  )
} -- @extends m_QueueingSubprogramCall,m_Input_EventDataPort_ComputeEntrypointCallSequence,m_Parameter_to_PortInstance_Connection
-- @extends m_QueueingSubprogramCall,m_Input_EventDataPort_ComputeEntrypointCallSequence,m_Parameter_to_PortInstance_Connection
rule m_Input_Queuing_ComputeEntrypointCallSequence {
 from
  fi : AADLI!FeatureInstance,
  behavior : AADLI!SubprogramCallSequence,
  paramCnx : AADLI!ParameterConnection
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {fi, behavior, paramCnx},
   value <- 'QueuingCommunications.m_Input_Queuing_ComputeEntrypointCallSequence'
  )
} -- @extends m_QueueingSubprogramCall,m_Output_EventOrEventDataPort_ComputeEntrypointCallSequence
-- @extends m_QueueingSubprogramCall,m_Output_EventOrEventDataPort_ComputeEntrypointCallSequence
rule m_Output_Queuing_ComputeEntrypointCallSequence {
 from
  fi : AADLI!FeatureInstance,
  behavior : AADLI!SubprogramCallSequence,
  paramCnx : AADLI!ParameterConnection,
  cnxRef : AADLI!PortConnection
  (
   fi.srcConnectionInstance->exists(e |
    e.connectionReference->first().connection = cnxRef
   )
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {fi, behavior, paramCnx, cnxRef},
   value <- 'QueuingCommunications.m_Output_Queuing_ComputeEntrypointCallSequence'
  )
}
