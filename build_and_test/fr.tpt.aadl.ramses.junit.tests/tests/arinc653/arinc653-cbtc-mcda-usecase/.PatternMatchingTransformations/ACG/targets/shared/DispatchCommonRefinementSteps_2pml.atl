--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--
-- nsURI AADLBA=http:///AADLBA
-- @atlcompiler emftvm
module DispatchCommonRefinementSteps;
create OUT : MM_ATL2PM from IN : AADLI, AADL_RUNTIME : AADLBA, DATA_MODEL : AADLBA, PROGRAMMING_PROPERTIES : AADLBA, HOOKS : ATLHOOKS;

helper def: collectSporadicGlobalVariables(c : AADLI!ComponentInstance) : Sequence(AADLBA!DataSubcomponent) =
 Sequence {};

helper def: collectSporadicThreadVariables(c : AADLI!ComponentInstance) : Sequence(AADLBA!DataSubcomponent) =
 Sequence {};

helper def: collectTimedThreadVariables(c : AADLI!ComponentInstance) : Sequence(AADLBA!DataSubcomponent) =
 Sequence {};

helper def: collectSporadicGlobalVariablesAccesses(c : AADLI!ComponentInstance) : Sequence(AADLBA!DataAccess) =
 Sequence {};

helper def: collectSporadicGlobalVariablesAccessConnections(c : AADLI!ComponentInstance) : Sequence(AADLBA!AccessConnections) =
 Sequence {};

helper def: collectSporadicBehaviorActions(c : AADLI!ComponentInstance) : Sequence(AADLBA!BehaviorAction) =
 Sequence {};

helper def: collectSporadicThreadVariablesAccesses(c : AADLI!ComponentInstance) : Sequence(AADLBA!DataAccess) =
 Sequence {};

helper def: collectSporadicThreadVariablesAccessConnections(c : AADLI!ComponentInstance) : Sequence(AADLBA!AccessConnections) =
 Sequence {}; -- @extends m_ThreadEntrypoint
-- @extends m_ThreadEntrypoint
rule m_PeriodicThread {
 from
  c : AADLI!ComponentInstance
  (
   c.isPeriodicThread()
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {c},
   value <- 'DispatchCommonRefinementSteps.m_PeriodicThread'
  )
} -- @extends m_ThreadEntrypoint
-- @extends m_ThreadEntrypoint
rule m_SporadicThread {
 from
  c : AADLI!ComponentInstance
  (
   c.isSporadicThread()
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {c},
   value <- 'DispatchCommonRefinementSteps.m_SporadicThread'
  )
}
