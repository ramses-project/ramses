--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--
-- @nsURI AADLI=http:///AADL2/instance
-- @atlcompiler emftvm
module Connections;
create OUT : MM_ATL2PM from IN : AADLI;

helper context AADLI!ConnectionReference def: needsCopy() : Boolean =
 true;

helper context AADLI!Classifier def: getConnectionsInstancesImg(connectionKind : String) : Sequence(AADLBA!Connection) =
 let connectionReferenceList : Sequence(AADLI!ConnectionReference) = AADLI!ConnectionInstance->allInstancesFrom('IN')->select(e |
  e.kind.getName() = connectionKind and not(e.kind = #accessConnection and e.connectionReference->first().connection.accessCategory = #subprogram)
 )->collect(c |
  c.connectionReference->select(f |
   self.ownedConnection->includes(f.connection)
  )
 )->flatten() -->collect(e|e.connectionReference)
 -->collect(e|e.connectionReference)
 in
 connectionReferenceList->collect(e |
  e.getConnectionsReferencesImg()
 );

helper context AADLI!ConnectionReference def: getConnectionsReferencesImg() : AADLBA!Connection =
 thisModule.resolveMatchedSingleIfExists(self, 'cnxImg');

helper context Sequence(AADLI!ConnectionReference) def: getConnectionsReferencesImg() : Sequence(AADLBA!Connection) =
 self->collect(e |
  thisModule.resolveMatchedSingleIfExists(e, 'cnxImg')
 );

abstract rule m_Connection_Reference {
 from
  cnxRef : AADLI!ConnectionReference
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {cnxRef},
   value <- 'Connections.m_Connection_Reference'
  )
} -- @extends m_Connection_Reference
-- @extends m_Connection_Reference
rule m_PortConnection_Reference {
 from
  cnxRef : AADLI!ConnectionReference
  (
   cnxRef.eContainer().kind = #portConnection and cnxRef.needsCopy()
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {cnxRef},
   value <- 'Connections.m_PortConnection_Reference'
  )
} -- @extends m_Connection_Reference
-- @extends m_Connection_Reference
rule m_AccessConnection_Reference {
 from
  cnxRef : AADLI!ConnectionReference
  (
   cnxRef.eContainer().kind = #accessConnection
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {cnxRef},
   value <- 'Connections.m_AccessConnection_Reference'
  )
} -- @extends m_Connection_Reference
-- @extends m_Connection_Reference
rule m_ParameterConnection_Reference {
 from
  cnxRef : AADLI!ConnectionReference
  (
   cnxRef.eContainer().kind = #parameterConnection
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {cnxRef},
   value <- 'Connections.m_ParameterConnection_Reference'
  )
} -- @extends m_Connection_Reference
-- @extends m_Connection_Reference
rule m_FeatureGroupConnection_Reference {
 from
  cnxRef : AADLI!ConnectionReference
  (
   cnxRef.eContainer().kind = #featureGroupConnection
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {cnxRef},
   value <- 'Connections.m_FeatureGroupConnection_Reference'
  )
} -------------------------------------------------------------------------------------
---  LAZY RULES FOR KINDS OF CONNECTIONS
-------------------------------------------------------------------------------------

