--
-- AADL-RAMSES
-- 
-- Copyright Â© 2012 TELECOM ParisTech and CNRS
-- 
-- TELECOM ParisTech/LTCI
-- 
-- Authors: see AUTHORS
-- 
-- This program is free software: you can redistribute it and/or modify 
-- it under the terms of the Eclipse Public License as published by Eclipse,
-- either version 1.0 of the License, or (at your option) any later version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- Eclipse Public License for more details.
-- You should have received a copy of the Eclipse Public License
-- along with this program.  If not, see 
-- http://www.eclipse.org/org/documents/epl-v10.php
--
-- @nsURI AADLI=http:///AADL2/instance
-- @atlcompiler emftvm
module Types;
create OUT : MM_ATL2PM from IN : AADLI;

helper context AADLI!ComponentType def: needsCopy() : Boolean =
 true;

helper context AADLI!ComponentType def: defaultEventPortsMapping() : Sequence(AADLBA!EventPortType) =
 self.ownedEventPort->collect(e |
  thisModule.EventPort(e)
 );

helper context AADLI!ProcessorType def: eventPortsMapping() : Sequence(AADLBA!EventPortType) =
 self.defaultEventPortsMapping();

helper context AADLI!VirtualProcessorType def: eventPortsMapping() : Sequence(AADLBA!EventPortType) =
 self.defaultEventPortsMapping();

helper context AADLI!ProcessType def: eventPortsMapping() : Sequence(AADLBA!EventPortType) =
 self.defaultEventPortsMapping();

helper context AADLI!ThreadType def: eventPortsMapping() : Sequence(AADLBA!EventPortType) =
 self.defaultEventPortsMapping();

abstract rule m_Component_Type {
 from
  type : AADLI!ComponentType
  (
   type.needsCopy()
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_Component_Type'
  )
} -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_Bus_Type {
 from
  type : AADLI!BusType
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_Bus_Type'
  )
} -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_VirtualBus_Type {
 from
  type : AADLI!VirtualBusType
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_VirtualBus_Type'
  )
} -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_Device_Type {
 from
  type : AADLI!DeviceType
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_Device_Type'
  )
} -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_Processor_Type {
 from
  type : AADLI!ProcessorType
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_Processor_Type'
  )
} -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_VirtualProcessor_Type {
 from
  type : AADLI!VirtualProcessorType
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_VirtualProcessor_Type'
  )
} -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_Memory_Type {
 from
  type : AADLI!MemoryType
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_Memory_Type'
  )
} -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_Process_Type {
 from
  type : AADLI!ProcessType
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_Process_Type'
  )
} -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_ThreadGroup_Type {
 from
  type : AADLI!ThreadGroupType
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_ThreadGroup_Type'
  )
} -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_Thread_Type {
 from
  type : AADLI!ThreadType
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_Thread_Type'
  )
} -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_Subprogram_Type {
 from
  type : AADLI!SubprogramType
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_Subprogram_Type'
  )
}

helper context AADLI!SystemType def: isRoot() : Boolean =
 AADLI!ComponentInstance.allInstancesFrom('IN')->select(e |
  e.oclIsTypeOf(AADLI!SystemInstance)
 )->exists(e |
  e.componentImplementation.type = self
 ); -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_System_Type {
 from
  type : AADLI!SystemType
  (
   type.isRoot()
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_System_Type'
  )
}

rule m_System_Type_NotRoot {
 from
  type : AADLI!SystemType
  (
   not type.isRoot()
  )
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_System_Type_NotRoot'
  )
} -- @extends m_Component_Type
-- @extends m_Component_Type
rule m_Data_Type {
 from
  type : AADLI!DataType
 to
  t : MM_ATL2PM!ElementTransformationTuple (
   key <:= Sequence {type},
   value <- 'Types.m_Data_Type'
  )
}
