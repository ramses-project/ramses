package test_queuing_refined_model
public
with POK,Data_Model,ARINC653,common_pkg,PeriodicDelayed_runtime,arinc653_runtime;
  process implementation proc1.impl
    subcomponents
      the_proc1_p_out_globalVariable: data arinc653_runtime::Queuing_Port_Id_Type;
      the_sender: thread the_proc1_the_sender.impl {
        Data_Size => 40000 Bytes;
        Dispatch_Protocol => Periodic;
        Compute_Execution_Time => 0 ms .. 1 ms;
        Period => 2000 ms;
        Priority => 5;
        Stack_Size => 40000 Bytes;
        Code_Size => 40 Bytes;
        Compute_Entrypoint_Call_Sequence => reference(main_call);
        };
    connections
      cnx_p_out_to_globalVariable: data access the_proc1_p_out_globalVariable -> the_sender.cnx_p_out;
  end proc1.impl;
  
  process implementation proc2.impl
    subcomponents
      the_proc2_p_inglobalVariable: data arinc653_runtime::Queuing_Port_Id_Type;
      the_receiver: thread the_proc2_the_receiver.impl {
        Data_Size => 40000 Bytes;
        Dispatch_Protocol => Periodic;
        Compute_Execution_Time => 0 ms .. 1 ms;
        Period => 1000 ms;
        Priority => 10;
        Stack_Size => 40000 Bytes;
        Code_Size => 40 Bytes;
        Compute_Entrypoint_Call_Sequence => reference(main_call);
        };
    connections
      Id_instance_to_the_receiver_p_in: data access the_proc2_p_inglobalVariable -> the_receiver.p_in;
  end proc2.impl;
  
  processor implementation cpu.single_partition
  end cpu.single_partition;
  
  processor implementation cpu.two_partitions
    subcomponents
      the_part1: virtual processor part {
        POK::Scheduler => RR;
        ARINC653::HM_Errors => (Numeric_Error, Illegal_Request);
        ARINC653::HM_Partition_Recovery_Actions => (Partition_Stop, Warm_Restart);
        ARINC653::Entrypoint => "Initial";
        ARINC653::Partition_Identifier => "1";
        POK::Additional_Features => (libc_stdio, console);
        Scheduling_Protocol => (Rate_Monotonic_Protocol);
        };
      the_part2: virtual processor part {
        POK::Scheduler => RR;
        ARINC653::HM_Errors => (Numeric_Error, Illegal_Request);
        ARINC653::HM_Partition_Recovery_Actions => (Partition_Stop, Warm_Restart);
        ARINC653::Entrypoint => "Initial";
        ARINC653::Partition_Identifier => "1";
        POK::Additional_Features => (libc_stdio, console);
        Scheduling_Protocol => (Rate_Monotonic_Protocol);
        };
  end cpu.two_partitions;
  
  memory implementation mem.impl
  end mem.impl;
  
  memory implementation mem.two_partitions
  end mem.two_partitions;
  
  system implementation refined_model.impl
    subcomponents
      the_proc1: process proc1.impl {
        POK::Needed_Memory_Size => 200 KByte;
        };
      the_proc2: process proc2.impl {
        POK::Needed_Memory_Size => 200 KByte;
        };
      the_cpu: processor cpu.two_partitions {
        ARINC653::Module_Major_Frame => 4000 ms;
        POK::Scheduler => STATIC;
        ARINC653::Partition_Slots => (2000 ms, 1000 ms, 1000 ms);
        ARINC653::Slots_Allocation => (reference(the_part1), reference(the_part1), reference(the_part2));
        POK::Ports_Flush_Time => Partition_Slot_Switch;
        POK::Architecture => x86;
        POK::BSP => x86_qemu;
        Scheduling_Protocol => (ARINC653);
        };
    properties
      Actual_Processor_Binding => (reference(the_cpu.the_part1)) applies to the_proc1;
      Actual_Processor_Binding => (reference(the_cpu.the_part2)) applies to the_proc2;
      Actual_Processor_Binding => (reference(the_cpu.the_part1)) applies to the_proc1.the_sender;
      Actual_Processor_Binding => (reference(the_cpu.the_part2)) applies to the_proc2.the_receiver;
  end refined_model.impl;
  
  processor cpu_x86
  end cpu_x86;
  
  processor cpu
  end cpu;
  
  virtual processor part
  end part;
  
  memory mem
  end mem;
  
  memory part_mem
  end part_mem;
  
  process proc1
  end proc1;
  
  process proc2
  end proc2;
  
  system refined_model
  end refined_model;
  
  subprogram the_proc1_the_sender_entrypoint
    features
      cnx_p_out: requires data access arinc653_runtime::Queuing_Port_Id_Type;
  end the_proc1_the_sender_entrypoint;
  
  subprogram implementation the_proc1_the_sender_entrypoint.impl
    subcomponents
      the_proc1_the_sender_runtime_call_ret: data arinc653_runtime::Return_Code_Type;
      p_out_localVariable: data common_pkg::Integer;
      p_out_Length: data arinc653_runtime::Message_Size_Type {
        Data_Model::Initial_Value => ("sizeof(common_pkg__Integer)");
        };
      p_out_TimeOut: data arinc653_runtime::System_Time_Type {
        Data_Model::Initial_Value => ("0");
        };
    annex behavior_specification {**
      variables
  whichPortActivated : test_queuing_refined_model::the_proc1_the_sender_behaviorIdentifier_enum ;
states
  BA_entrypoint_init_state : initial state ;
  BA_entrypoint_wait_dispatch_state : state ;
  BA_entrypoint_exec_state : state ;
  BA_entrypoint_final_state : final state ;
transitions
  call [0] : BA_entrypoint_exec_state -[whichPortActivated = the_proc1_the_sender_behaviorIdentifier_enum#default_behavior]-> BA_entrypoint_wait_dispatch_state {common_pkg::sender_spg ! (p_out_localVariable) ;
Send_Queuing_Message_Integer ! (cnx_p_out, p_out_localVariable, p_out_Length, p_out_TimeOut, the_proc1_the_sender_runtime_call_ret)} ;
  which_behavior_default_mode : BA_entrypoint_init_state -[]-> BA_entrypoint_exec_state {whichPortActivated := the_proc1_the_sender_behaviorIdentifier_enum#default_behavior} ;
  dispatch_transition : BA_entrypoint_wait_dispatch_state -[]-> BA_entrypoint_exec_state {arinc653_runtime::Periodic_Wait ! (the_proc1_the_sender_runtime_call_ret)} ;
**};
  end the_proc1_the_sender_entrypoint.impl;
  
  data the_proc1_the_sender_behaviorIdentifier_enum
    properties
      Data_Model::Data_Representation => Enum;
      Data_Model::Enumerators => ("default_behavior");
      Data_Model::Initial_Value => ("test_queuing_refined_model__the_proc1_the_sender_behaviorIdentifier_enum_default_behavior");
  end the_proc1_the_sender_behaviorIdentifier_enum;
  
  thread implementation the_proc1_the_sender.impl
    calls
      main_call:  {
        call_entrypoint: subprogram the_proc1_the_sender_entrypoint.impl;
        } 
      ;
    connections
      p_out_accessCnx_call: data access cnx_p_out -> call_entrypoint.cnx_p_out;
  end the_proc1_the_sender.impl;
  
  thread the_proc1_the_sender
    features
      cnx_p_out: requires data access arinc653_runtime::Queuing_Port_Id_Type;
  end the_proc1_the_sender;
  
  subprogram the_proc2_the_receiver_entrypoint
    features
      p_in: requires data access arinc653_runtime::Queuing_Port_Id_Type;
  end the_proc2_the_receiver_entrypoint;
  
  subprogram implementation the_proc2_the_receiver_entrypoint.impl
    subcomponents
      the_proc2_the_receiver_runtime_call_ret: data arinc653_runtime::Return_Code_Type;
      p_in_localVariable: data common_pkg::Integer;
      p_in_Length: data arinc653_runtime::Message_Size_Type {
        Data_Model::Initial_Value => ("sizeof(common_pkg__Integer)");
        };
      p_in_ErrorCode: data arinc653_runtime::Return_Code_Type {
        Data_Model::Initial_Value => ("0");
        };
      p_in_TimeOut: data arinc653_runtime::System_Time_Type {
        Data_Model::Initial_Value => ("0");
        };
    annex behavior_specification {**
      variables
  whichPortActivated : test_queuing_refined_model::the_proc2_the_receiver_behaviorIdentifier_enum ;
states
  BA_entrypoint_init_state : initial state ;
  BA_entrypoint_wait_dispatch_state : state ;
  BA_entrypoint_exec_state : state ;
  BA_entrypoint_final_state : final state ;
transitions
  call [0] : BA_entrypoint_exec_state -[whichPortActivated = the_proc2_the_receiver_behaviorIdentifier_enum#default_behavior]-> BA_entrypoint_wait_dispatch_state {Receive_Queuing_Message_Integer ! (p_in, p_in_TimeOut, p_in_localVariable, p_in_Length, p_in_ErrorCode) ;
if (p_in_ErrorCode = 0) common_pkg::receiver_spg ! (p_in_localVariable) end if
  } ;
  which_behavior_default_mode : BA_entrypoint_init_state -[]-> BA_entrypoint_exec_state {whichPortActivated := the_proc2_the_receiver_behaviorIdentifier_enum#default_behavior} ;
  dispatch_transition : BA_entrypoint_wait_dispatch_state -[]-> BA_entrypoint_exec_state {arinc653_runtime::Periodic_Wait ! (the_proc2_the_receiver_runtime_call_ret)} ;
**};
  end the_proc2_the_receiver_entrypoint.impl;
  
  data the_proc2_the_receiver_behaviorIdentifier_enum
    properties
      Data_Model::Data_Representation => Enum;
      Data_Model::Enumerators => ("default_behavior", "p_in");
      Data_Model::Initial_Value => ("test_queuing_refined_model__the_proc2_the_receiver_behaviorIdentifier_enum_default_behavior");
  end the_proc2_the_receiver_behaviorIdentifier_enum;
  
  thread implementation the_proc2_the_receiver.impl
    calls
      main_call:  {
        call_entrypoint: subprogram the_proc2_the_receiver_entrypoint.impl;
        } 
      ;
    connections
      p_in_accessCnx_call: data access p_in -> call_entrypoint.p_in;
  end the_proc2_the_receiver.impl;
  
  thread the_proc2_the_receiver
    features
      p_in: requires data access arinc653_runtime::Queuing_Port_Id_Type;
  end the_proc2_the_receiver;
  
  subprogram Receive_Queuing_Message_Integer
    extends arinc653_runtime::Receive_Queuing_Message
    features
      MESSAGE_ADDR: refined to out parameter common_pkg::Integer;
  end Receive_Queuing_Message_Integer;
  
  subprogram Send_Queuing_Message_Integer
    extends arinc653_runtime::Send_Queuing_Message
    features
      MESSAGE_ADDR: refined to in out parameter common_pkg::Integer;
  end Send_Queuing_Message_Integer;
end test_queuing_refined_model;
