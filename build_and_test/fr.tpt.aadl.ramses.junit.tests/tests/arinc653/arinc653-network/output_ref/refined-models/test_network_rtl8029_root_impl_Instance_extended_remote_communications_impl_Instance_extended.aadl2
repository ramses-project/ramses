package test_network_rtl8029_remote_communications_refined_model
public
with Base_Types,RAMSES,POK,Data_Model,ARINC653,common_pkg,RAMSES_buses,rtl8029_driver,test_network_rtl8029_remote_communications,PeriodicDelayed_runtime,arinc653_runtime;
  process implementation the_cpu1_system_part_comProcess.impl
    subcomponents
      the_cpu1_system_part_comProcess_the_proc1_p_outglobalVariable: data arinc653_runtime::Queuing_Port_Id_Type;
      system_part_comm: thread the_cpu1_system_part_comProcess_system_part_comm.impl {
        Period => 1000 ms;
        Priority => 5;
        Initialize_Entrypoint_Call_Sequence => reference(the_cpu1_initCallSequence);
        Dispatch_Protocol => Periodic;
        Compute_Entrypoint_Call_Sequence => reference(main_call);
        };
      the_cpu1_system_part_comm: thread the_cpu1_system_part_comProcess_the_cpu1_system_part_comm.impl {
        Period => 1000 ms;
        Priority => 8;
        Initialize_Entrypoint_Call_Sequence => reference(system_part_initPollCallSequence);
        Dispatch_Protocol => Periodic;
        Compute_Entrypoint_Call_Sequence => reference(main_call);
        };
    connections
      Id_instance_to_system_part_comm_p_out: data access the_cpu1_system_part_comProcess_the_proc1_p_outglobalVariable -> system_part_comm.p_out;
  end the_cpu1_system_part_comProcess.impl;
  
  process implementation the_cpu2_system_part_comProcess.impl
    subcomponents
      the_cpu2_system_part_comProcess_the_proc2_p_in_globalVariable: data arinc653_runtime::Queuing_Port_Id_Type;
      system_part_comm: thread the_cpu2_system_part_comProcess_system_part_comm.impl {
        Period => 1000 ms;
        Priority => 5;
        Initialize_Entrypoint_Call_Sequence => reference(the_cpu2_initCallSequence);
        Dispatch_Protocol => Periodic;
        Compute_Entrypoint_Call_Sequence => reference(main_call);
        };
      the_cpu2_system_part_comm: thread the_cpu2_system_part_comProcess_the_cpu2_system_part_comm.impl {
        Period => 1000 ms;
        Priority => 8;
        Initialize_Entrypoint_Call_Sequence => reference(system_part_initPollCallSequence);
        Dispatch_Protocol => Periodic;
        Compute_Entrypoint_Call_Sequence => reference(main_call);
        };
    connections
      the_proc2_p_in_cnx_the_proc2_p_in_to_globalVariable: data access the_cpu2_system_part_comProcess_the_proc2_p_in_globalVariable -> system_part_comm.the_proc2_p_in_cnx_p_in;
  end the_cpu2_system_part_comProcess.impl;
  
  process implementation proc1.impl
    subcomponents
      the_proc1_p_out_globalVariable: data arinc653_runtime::Queuing_Port_Id_Type;
      the_sender: thread the_proc1_the_sender.impl {
        Period => 2000 ms;
        Priority => 5;
        Dispatch_Protocol => Periodic;
        Data_Size => 40000 Bytes;
        Compute_Execution_Time => 0 ms .. 1 ms;
        Stack_Size => 40000 Bytes;
        Code_Size => 40 Bytes;
        Compute_Entrypoint_Call_Sequence => reference(main_call);
        };
    connections
      cnx_p_out_to_globalVariable: data access the_proc1_p_out_globalVariable -> the_sender.cnx_p_out;
  end proc1.impl;
  
  process implementation proc2.impl
    subcomponents
      the_proc2_p_inglobalVariable: data arinc653_runtime::Queuing_Port_Id_Type;
      the_receiver: thread the_proc2_the_receiver.impl {
        Period => 1000 ms;
        Priority => 10;
        Dispatch_Protocol => Periodic;
        Data_Size => 40000 Bytes;
        Compute_Execution_Time => 0 ms .. 1 ms;
        Stack_Size => 40000 Bytes;
        Code_Size => 40 Bytes;
        Compute_Entrypoint_Call_Sequence => reference(main_call);
        };
    connections
      Id_instance_to_the_receiver_p_in: data access the_proc2_p_inglobalVariable -> the_receiver.p_in;
  end proc2.impl;
  
  processor implementation connected_cpu.with_system_partition
    subcomponents
      the_part: virtual processor part {
        POK::Scheduler => RR;
        ARINC653::HM_Error_ID_Actions => ([
          ErrorIdentifier=> 3;
          Description=> "Restart process";
          Action=> "Cold_Restart";
        ], [
          ErrorIdentifier=> 4;
          Description=> "Warm partition restart";
          Action=> "Warm_Restart";
        ]);
        Period => 1000 ms;
        ARINC653::Partition_Identifier => 1;
        POK::Additional_Features => (libc_stdio, console);
        Scheduling_Protocol => (RMS);
        };
      system_part: virtual processor part {
        POK::Scheduler => RR;
        ARINC653::HM_Error_ID_Actions => ([
          ErrorIdentifier=> 3;
          Description=> "Restart process";
          Action=> "Cold_Restart";
        ], [
          ErrorIdentifier=> 4;
          Description=> "Warm partition restart";
          Action=> "Warm_Restart";
        ]);
        Period => 1000 ms;
        ARINC653::Partition_Identifier => 1;
        POK::Additional_Features => (libc_stdio, console);
        ARINC653::System_Partition => true;
        Scheduling_Protocol => (RMS);
        };
  end connected_cpu.with_system_partition;
  
  memory implementation mem.two_partitions
    subcomponents
      part1_mem: memory part_mem {
        Memory_Size => 150000 Bytes;
        Memory_Protocol => read_write;
        ARINC653::Memory_Type => (Data_Memory);
        };
      part2_mem: memory part_mem {
        Memory_Size => 150000 Bytes;
        Memory_Protocol => read_write;
        ARINC653::Memory_Type => (Data_Memory);
        };
  end mem.two_partitions;
  
  system implementation refined_model.impl
    subcomponents
      the_bus: bus rtl8029;
      the_mem1: memory mem.two_partitions {
        Memory_Size => 200000 Bytes;
        };
      the_mem2: memory mem.two_partitions {
        Memory_Size => 200000 Bytes;
        };
      the_cpu1_system_part_comProcess: process the_cpu1_system_part_comProcess.impl;
      the_cpu2_system_part_comProcess: process the_cpu2_system_part_comProcess.impl;
      the_proc1: process proc1.impl;
      the_proc2: process proc2.impl;
      the_cpu1: processor connected_cpu.with_system_partition {
        POK::Address => "00:1F:C6:BF:74:06";
        ARINC653::Module_Major_Frame => 2000 ms;
        POK::Scheduler => STATIC;
        ARINC653::Partition_Slots => (1000 ms, 1000 ms);
        POK::Ports_Flush_Time => Partition_Slot_Switch;
        ARINC653::HM_Error_ID_Levels => ([
          ErrorIdentifier=> 1;
          Description=> "Numeric error";
          ErrorLevel=> Module_Level;
          ErrorCode=> Numeric_Error;
        ], [
          ErrorIdentifier=> 2;
          Description=> "Illegal request";
          ErrorLevel=> Module_Level;
          ErrorCode=> Illegal_Request;
        ], [
          ErrorIdentifier=> 3;
          Description=> "Numeric error";
          ErrorLevel=> Partition_Level;
          ErrorCode=> Numeric_Error;
        ], [
          ErrorIdentifier=> 4;
          Description=> "Illegal request";
          ErrorLevel=> Partition_Level;
          ErrorCode=> Illegal_Request;
        ], [
          ErrorIdentifier=> 5;
          Description=> "Numeric error";
          ErrorLevel=> Process_Level;
          ErrorCode=> Numeric_Error;
        ], [
          ErrorIdentifier=> 6;
          Description=> "Illegal request";
          ErrorLevel=> Process_Level;
          ErrorCode=> Illegal_Request;
        ]);
        ARINC653::HM_Error_ID_Actions => ([
          ErrorIdentifier=> 1;
          Description=> "Restart partition";
          Action=> "Stop";
        ], [
          ErrorIdentifier=> 2;
          Description=> "Warm partition restart";
          Action=> "Reset";
        ]);
        POK::Architecture => x86;
        POK::BSP => x86_qemu;
        Scheduling_Protocol => (ARINC653);
        };
      the_cpu2: processor connected_cpu.with_system_partition {
        POK::Address => "00:1E:A5:32:DE:32";
        ARINC653::Module_Major_Frame => 2000 ms;
        POK::Scheduler => STATIC;
        ARINC653::Partition_Slots => (1000 ms, 1000 ms);
        POK::Ports_Flush_Time => Partition_Slot_Switch;
        ARINC653::HM_Error_ID_Levels => ([
          ErrorIdentifier=> 1;
          Description=> "Numeric error";
          ErrorLevel=> Module_Level;
          ErrorCode=> Numeric_Error;
        ], [
          ErrorIdentifier=> 2;
          Description=> "Illegal request";
          ErrorLevel=> Module_Level;
          ErrorCode=> Illegal_Request;
        ], [
          ErrorIdentifier=> 3;
          Description=> "Numeric error";
          ErrorLevel=> Partition_Level;
          ErrorCode=> Numeric_Error;
        ], [
          ErrorIdentifier=> 4;
          Description=> "Illegal request";
          ErrorLevel=> Partition_Level;
          ErrorCode=> Illegal_Request;
        ], [
          ErrorIdentifier=> 5;
          Description=> "Numeric error";
          ErrorLevel=> Process_Level;
          ErrorCode=> Numeric_Error;
        ], [
          ErrorIdentifier=> 6;
          Description=> "Illegal request";
          ErrorLevel=> Process_Level;
          ErrorCode=> Illegal_Request;
        ]);
        ARINC653::HM_Error_ID_Actions => ([
          ErrorIdentifier=> 1;
          Description=> "Restart partition";
          Action=> "Stop";
        ], [
          ErrorIdentifier=> 2;
          Description=> "Warm partition restart";
          Action=> "Reset";
        ]);
        POK::Architecture => x86;
        POK::BSP => x86_qemu;
        Scheduling_Protocol => (ARINC653);
        };
    connections
      bus_to_cpu1: bus access the_cpu1.bus_access -> the_bus;
      bus_to_cpu2: bus access the_cpu2.bus_access -> the_bus;
    properties
      Actual_Processor_Binding => (reference(the_cpu1.system_part)) applies to the_cpu1_system_part_comProcess;
      Actual_Memory_Binding => (reference(the_mem1.part2_mem)) applies to the_cpu1_system_part_comProcess;
      Actual_Processor_Binding => (reference(the_cpu2.system_part)) applies to the_cpu2_system_part_comProcess;
      Actual_Memory_Binding => (reference(the_mem2.part2_mem)) applies to the_cpu2_system_part_comProcess;
      Actual_Processor_Binding => (reference(the_cpu1.the_part)) applies to the_proc1;
      Actual_Memory_Binding => (reference(the_mem1.part1_mem)) applies to the_proc1;
      Actual_Processor_Binding => (reference(the_cpu2.the_part)) applies to the_proc2;
      Actual_Memory_Binding => (reference(the_mem2.part1_mem)) applies to the_proc2;
      ARINC653::Slots_Allocation => (reference(the_cpu1.the_part), reference(the_cpu1.system_part)) applies to the_cpu1;
      ARINC653::Slots_Allocation => (reference(the_cpu2.the_part), reference(the_cpu2.system_part)) applies to the_cpu2;
      Actual_Processor_Binding => (reference(the_cpu1.system_part)) applies to the_cpu1_system_part_comProcess.system_part_comm;
      Actual_Memory_Binding => (reference(the_mem1.part2_mem)) applies to the_cpu1_system_part_comProcess.system_part_comm;
      Actual_Processor_Binding => (reference(the_cpu1.system_part)) applies to the_cpu1_system_part_comProcess.the_cpu1_system_part_comm;
      Actual_Memory_Binding => (reference(the_mem1.part2_mem)) applies to the_cpu1_system_part_comProcess.the_cpu1_system_part_comm;
      Actual_Memory_Binding => (reference(the_mem1.part2_mem)) applies to the_cpu1_system_part_comProcess.system_part_comm.the_proc1_p_out_createVirtualPortId;
      Actual_Memory_Binding => (reference(the_mem1.part2_mem)) applies to the_cpu1_system_part_comProcess.system_part_comm.the_proc1_p_out_createVirtualPortName;
      Actual_Memory_Binding => (reference(the_mem1.part2_mem)) applies to the_cpu1_system_part_comProcess.system_part_comm.the_proc1_p_out_length;
      Actual_Processor_Binding => (reference(the_cpu2.system_part)) applies to the_cpu2_system_part_comProcess.system_part_comm;
      Actual_Memory_Binding => (reference(the_mem2.part2_mem)) applies to the_cpu2_system_part_comProcess.system_part_comm;
      Actual_Processor_Binding => (reference(the_cpu2.system_part)) applies to the_cpu2_system_part_comProcess.the_cpu2_system_part_comm;
      Actual_Memory_Binding => (reference(the_mem2.part2_mem)) applies to the_cpu2_system_part_comProcess.the_cpu2_system_part_comm;
      Actual_Memory_Binding => (reference(the_mem2.part2_mem)) applies to the_cpu2_system_part_comProcess.system_part_comm.the_proc2_p_in_createVirtualPortId;
      Actual_Memory_Binding => (reference(the_mem2.part2_mem)) applies to the_cpu2_system_part_comProcess.system_part_comm.the_proc2_p_in_createVirtualPortName;
      Actual_Memory_Binding => (reference(the_mem2.part2_mem)) applies to the_cpu2_system_part_comProcess.system_part_comm.the_proc2_p_in_length;
      Actual_Processor_Binding => (reference(the_cpu1.the_part)) applies to the_proc1.the_sender;
      Actual_Memory_Binding => (reference(the_mem1.part1_mem)) applies to the_proc1.the_sender;
      Actual_Processor_Binding => (reference(the_cpu2.the_part)) applies to the_proc2.the_receiver;
      Actual_Memory_Binding => (reference(the_mem2.part1_mem)) applies to the_proc2.the_receiver;
  end refined_model.impl;
  
  bus rtl8029
  end rtl8029;
  
  processor connected_cpu
    features
      bus_access: requires bus access rtl8029;
  end connected_cpu;
  
  virtual processor part
  end part;
  
  memory mem
  end mem;
  
  memory part_mem
  end part_mem;
  
  process proc1
  end proc1;
  
  process proc2
  end proc2;
  
  process the_cpu1_system_part_comProcess
  end the_cpu1_system_part_comProcess;
  
  process the_cpu2_system_part_comProcess
  end the_cpu2_system_part_comProcess;
  
  system refined_model
  end refined_model;
  
  subprogram the_cpu1_system_part_comProcess_system_part_comm_entrypoint
    features
      the_proc1_p_out_comConnectionLength_len: in out parameter Base_Types::Unsigned_32;
      the_proc1_p_out_comConnectionPortId_port_id: in out parameter rtl8029_driver::Pok_Port_Id_T;
      p_out: requires data access arinc653_runtime::Queuing_Port_Id_Type;
  end the_cpu1_system_part_comProcess_system_part_comm_entrypoint;
  
  subprogram implementation the_cpu1_system_part_comProcess_system_part_comm_entrypoint.impl
    subcomponents
      the_cpu1_system_part_comProcess_system_part_comm_runtime_call_ret: data arinc653_runtime::Return_Code_Type;
      p_out_localVariable: data common_pkg::Integer;
      p_out_ErrorCode: data arinc653_runtime::Return_Code_Type {
        Data_Model::Initial_Value => ("0");
        };
      p_out_TimeOut: data arinc653_runtime::System_Time_Type {
        Data_Model::Initial_Value => ("0");
        };
    annex behavior_specification {**
      variables
  whichPortActivated : test_network_rtl8029_remote_communications_refined_model::the_cpu1_system_part_comProcess_system_part_comm_behaviorIdentifier_enum ;
states
  BA_entrypoint_init_state : initial state ;
  BA_entrypoint_wait_dispatch_state : state ;
  BA_entrypoint_exec_state : state ;
  BA_entrypoint_final_state : final state ;
transitions
  the_cpu1_communicationCallSequence [0] : BA_entrypoint_exec_state -[whichPortActivated = the_cpu1_system_part_comProcess_system_part_comm_behaviorIdentifier_enum#Enumerators.default_behavior]-> BA_entrypoint_wait_dispatch_state {Receive_Queuing_Message_Integer ! (p_out, p_out_TimeOut, p_out_localVariable, the_proc1_p_out_comConnectionLength_len, p_out_ErrorCode) ;
if (p_out_ErrorCode = 0) test_network_rtl8029_remote_communications::the_proc1_p_out_comSendSpg ! (the_proc1_p_out_comConnectionPortId_port_id, p_out_localVariable, the_proc1_p_out_comConnectionLength_len) end if
  } ;
  which_behavior_default_mode : BA_entrypoint_init_state -[]-> BA_entrypoint_exec_state {whichPortActivated := the_cpu1_system_part_comProcess_system_part_comm_behaviorIdentifier_enum#Enumerators.default_behavior} ;
  dispatch_transition : BA_entrypoint_wait_dispatch_state -[]-> BA_entrypoint_exec_state {arinc653_runtime::Periodic_Wait ! (the_cpu1_system_part_comProcess_system_part_comm_runtime_call_ret)} ;
**};
  end the_cpu1_system_part_comProcess_system_part_comm_entrypoint.impl;
  
  data the_cpu1_system_part_comProcess_system_part_comm_behaviorIdentifier_enum
    properties
      Data_Model::Data_Representation => Enum;
      Data_Model::Enumerators => ("default_behavior", "p_out");
      Data_Model::Initial_Value => ("test_network_rtl8029_remote_communications_refined_model__the_cpu1_system_part_comProcess_system_part_comm_behaviorIdentifier_enum_default_behavior");
  end the_cpu1_system_part_comProcess_system_part_comm_behaviorIdentifier_enum;
  
  thread implementation the_cpu1_system_part_comProcess_system_part_comm.impl
    subcomponents
      the_proc1_p_out_createVirtualPortId: data rtl8029_driver::Pok_Port_Id_T {
        Source_Name => "pok_port_id_t";
        Source_Language => (C);
        Source_Text => ("types.h");
        };
      the_proc1_p_out_createVirtualPortName: data Base_Types::String {
        Data_Model::Data_Representation => String;
        Data_Model::Initial_Value => ("the_proc1_p_out_virtual_port");
        };
      the_proc1_p_out_length: data Base_Types::Unsigned_32 {
        Data_Model::Data_Representation => Integer;
        Data_Size => 4 Bytes;
        Data_Model::Initial_Value => ("sizeof(common_pkg__Integer)");
        Data_Model::Number_Representation => Unsigned;
        };
    calls
      main_call:  {
        call_entrypoint: subprogram the_cpu1_system_part_comProcess_system_part_comm_entrypoint.impl;
        } 
      ;
      the_cpu1_initCallSequence:  {
        the_proc1_p_out_createVirtualPort: subprogram rtl8029_driver::pok_port_virtual_create;
        } 
      ;
    connections
      p_out_accessCnx_the_cpu1_communicationCallSequence: data access p_out -> call_entrypoint.p_out;
      the_proc1_p_out_createVirtualPortCnx: parameter the_proc1_p_out_createVirtualPort.name -> the_proc1_p_out_createVirtualPortName;
      the_proc1_p_out_createVirtualPortCnx2: parameter the_proc1_p_out_createVirtualPort.id -> the_proc1_p_out_createVirtualPortId;
      the_proc1_p_out_comConnectionLength: parameter call_entrypoint.the_proc1_p_out_comConnectionLength_len -> the_proc1_p_out_length;
      the_proc1_p_out_comConnectionPortId: parameter call_entrypoint.the_proc1_p_out_comConnectionPortId_port_id -> the_proc1_p_out_createVirtualPortId;
  end the_cpu1_system_part_comProcess_system_part_comm.impl;
  
  thread the_cpu1_system_part_comProcess_system_part_comm
    features
      p_out: requires data access arinc653_runtime::Queuing_Port_Id_Type {
        Data_Model::Data_Representation => Integer;
        Data_Size => 4 Bytes;
        };
  end the_cpu1_system_part_comProcess_system_part_comm;
  
  subprogram the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_entrypoint
  end the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_entrypoint;
  
  subprogram implementation the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_entrypoint.impl
    subcomponents
      the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_runtime_call_ret: data arinc653_runtime::Return_Code_Type;
    annex behavior_specification {**
      variables
  whichPortActivated : test_network_rtl8029_remote_communications_refined_model::the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_behaviorIdentifier_enum ;
states
  BA_entrypoint_init_state : initial state ;
  BA_entrypoint_wait_dispatch_state : state ;
  BA_entrypoint_exec_state : state ;
  BA_entrypoint_final_state : final state ;
transitions
  system_part_pollCallSequence [0] : BA_entrypoint_exec_state -[whichPortActivated = the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_behaviorIdentifier_enum#Enumerators.default_behavior]-> BA_entrypoint_wait_dispatch_state {rtl8029_driver::rtl8029_polling !} ;
  which_behavior_default_mode : BA_entrypoint_init_state -[]-> BA_entrypoint_exec_state {whichPortActivated := the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_behaviorIdentifier_enum#Enumerators.default_behavior} ;
  dispatch_transition : BA_entrypoint_wait_dispatch_state -[]-> BA_entrypoint_exec_state {arinc653_runtime::Periodic_Wait ! (the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_runtime_call_ret)} ;
**};
  end the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_entrypoint.impl;
  
  data the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_behaviorIdentifier_enum
    properties
      Data_Model::Data_Representation => Enum;
      Data_Model::Enumerators => ("default_behavior");
      Data_Model::Initial_Value => ("test_network_rtl8029_remote_communications_refined_model__the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_behaviorIdentifier_enum_default_behavior");
  end the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_behaviorIdentifier_enum;
  
  thread implementation the_cpu1_system_part_comProcess_the_cpu1_system_part_comm.impl
    calls
      main_call:  {
        call_entrypoint: subprogram the_cpu1_system_part_comProcess_the_cpu1_system_part_comm_entrypoint.impl;
        } 
      ;
      system_part_initPollCallSequence:  {
        the_cpu1_system_part_initCall: subprogram rtl8029_driver::rtl8029_init;
        } 
      ;
  end the_cpu1_system_part_comProcess_the_cpu1_system_part_comm.impl;
  
  thread the_cpu1_system_part_comProcess_the_cpu1_system_part_comm
  end the_cpu1_system_part_comProcess_the_cpu1_system_part_comm;
  
  subprogram the_cpu2_system_part_comProcess_system_part_comm_entrypoint
    features
      the_proc2_p_in_comConnectionLength_len: in out parameter Base_Types::Unsigned_32;
      the_proc2_p_in_comConnectionPortId_port_id: in out parameter rtl8029_driver::Pok_Port_Id_T;
      the_proc2_p_in_cnx_p_in: requires data access arinc653_runtime::Queuing_Port_Id_Type;
  end the_cpu2_system_part_comProcess_system_part_comm_entrypoint;
  
  subprogram implementation the_cpu2_system_part_comProcess_system_part_comm_entrypoint.impl
    subcomponents
      the_cpu2_system_part_comProcess_system_part_comm_runtime_call_ret: data arinc653_runtime::Return_Code_Type;
      p_in_localVariable: data common_pkg::Integer;
      p_in_TimeOut: data arinc653_runtime::System_Time_Type {
        Data_Model::Initial_Value => ("0");
        };
    annex behavior_specification {**
      variables
  whichPortActivated : test_network_rtl8029_remote_communications_refined_model::the_cpu2_system_part_comProcess_system_part_comm_behaviorIdentifier_enum ;
states
  BA_entrypoint_init_state : initial state ;
  BA_entrypoint_wait_dispatch_state : state ;
  BA_entrypoint_exec_state : state ;
  BA_entrypoint_final_state : final state ;
transitions
  the_cpu2_communicationCallSequence [0] : BA_entrypoint_exec_state -[whichPortActivated = the_cpu2_system_part_comProcess_system_part_comm_behaviorIdentifier_enum#Enumerators.default_behavior]-> BA_entrypoint_wait_dispatch_state {test_network_rtl8029_remote_communications::the_proc2_p_in_comReceiveSpg ! (the_proc2_p_in_comConnectionPortId_port_id, p_in_localVariable, the_proc2_p_in_comConnectionLength_len) ;
Send_Queuing_Message_Integer ! (the_proc2_p_in_cnx_p_in, p_in_localVariable, the_proc2_p_in_comConnectionLength_len, p_in_TimeOut, the_cpu2_system_part_comProcess_system_part_comm_runtime_call_ret)} ;
  which_behavior_default_mode : BA_entrypoint_init_state -[]-> BA_entrypoint_exec_state {whichPortActivated := the_cpu2_system_part_comProcess_system_part_comm_behaviorIdentifier_enum#Enumerators.default_behavior} ;
  dispatch_transition : BA_entrypoint_wait_dispatch_state -[]-> BA_entrypoint_exec_state {arinc653_runtime::Periodic_Wait ! (the_cpu2_system_part_comProcess_system_part_comm_runtime_call_ret)} ;
**};
  end the_cpu2_system_part_comProcess_system_part_comm_entrypoint.impl;
  
  data the_cpu2_system_part_comProcess_system_part_comm_behaviorIdentifier_enum
    properties
      Data_Model::Data_Representation => Enum;
      Data_Model::Enumerators => ("default_behavior");
      Data_Model::Initial_Value => ("test_network_rtl8029_remote_communications_refined_model__the_cpu2_system_part_comProcess_system_part_comm_behaviorIdentifier_enum_default_behavior");
  end the_cpu2_system_part_comProcess_system_part_comm_behaviorIdentifier_enum;
  
  thread implementation the_cpu2_system_part_comProcess_system_part_comm.impl
    subcomponents
      the_proc2_p_in_createVirtualPortId: data rtl8029_driver::Pok_Port_Id_T {
        Source_Name => "pok_port_id_t";
        Source_Language => (C);
        Source_Text => ("types.h");
        };
      the_proc2_p_in_createVirtualPortName: data Base_Types::String {
        Data_Model::Data_Representation => String;
        Data_Model::Initial_Value => ("the_proc2_p_in_virtual_port");
        };
      the_proc2_p_in_length: data Base_Types::Unsigned_32 {
        Data_Model::Data_Representation => Integer;
        Data_Size => 4 Bytes;
        Data_Model::Initial_Value => ("sizeof(common_pkg__Integer)");
        Data_Model::Number_Representation => Unsigned;
        };
    calls
      main_call:  {
        call_entrypoint: subprogram the_cpu2_system_part_comProcess_system_part_comm_entrypoint.impl;
        } 
      ;
      the_cpu2_initCallSequence:  {
        the_proc2_p_in_createVirtualPort: subprogram rtl8029_driver::pok_port_virtual_create;
        } 
      ;
    connections
      p_in_accessCnx_the_cpu2_communicationCallSequence_the_proc2_p_in_cnx: data access the_proc2_p_in_cnx_p_in -> call_entrypoint.the_proc2_p_in_cnx_p_in;
      the_proc2_p_in_createVirtualPortCnx: parameter the_proc2_p_in_createVirtualPort.name -> the_proc2_p_in_createVirtualPortName;
      the_proc2_p_in_createVirtualPortCnx2: parameter the_proc2_p_in_createVirtualPort.id -> the_proc2_p_in_createVirtualPortId;
      the_proc2_p_in_comConnectionLength: parameter call_entrypoint.the_proc2_p_in_comConnectionLength_len -> the_proc2_p_in_length;
      the_proc2_p_in_comConnectionPortId: parameter call_entrypoint.the_proc2_p_in_comConnectionPortId_port_id -> the_proc2_p_in_createVirtualPortId;
  end the_cpu2_system_part_comProcess_system_part_comm.impl;
  
  thread the_cpu2_system_part_comProcess_system_part_comm
    features
      the_proc2_p_in_cnx_p_in: requires data access arinc653_runtime::Queuing_Port_Id_Type {
        Data_Model::Data_Representation => Integer;
        Data_Size => 4 Bytes;
        };
  end the_cpu2_system_part_comProcess_system_part_comm;
  
  subprogram the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_entrypoint
  end the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_entrypoint;
  
  subprogram implementation the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_entrypoint.impl
    subcomponents
      the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_runtime_call_ret: data arinc653_runtime::Return_Code_Type;
    annex behavior_specification {**
      variables
  whichPortActivated : test_network_rtl8029_remote_communications_refined_model::the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_behaviorIdentifier_enum ;
states
  BA_entrypoint_init_state : initial state ;
  BA_entrypoint_wait_dispatch_state : state ;
  BA_entrypoint_exec_state : state ;
  BA_entrypoint_final_state : final state ;
transitions
  system_part_pollCallSequence [0] : BA_entrypoint_exec_state -[whichPortActivated = the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_behaviorIdentifier_enum#Enumerators.default_behavior]-> BA_entrypoint_wait_dispatch_state {rtl8029_driver::rtl8029_polling !} ;
  which_behavior_default_mode : BA_entrypoint_init_state -[]-> BA_entrypoint_exec_state {whichPortActivated := the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_behaviorIdentifier_enum#Enumerators.default_behavior} ;
  dispatch_transition : BA_entrypoint_wait_dispatch_state -[]-> BA_entrypoint_exec_state {arinc653_runtime::Periodic_Wait ! (the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_runtime_call_ret)} ;
**};
  end the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_entrypoint.impl;
  
  data the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_behaviorIdentifier_enum
    properties
      Data_Model::Data_Representation => Enum;
      Data_Model::Enumerators => ("default_behavior");
      Data_Model::Initial_Value => ("test_network_rtl8029_remote_communications_refined_model__the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_behaviorIdentifier_enum_default_behavior");
  end the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_behaviorIdentifier_enum;
  
  thread implementation the_cpu2_system_part_comProcess_the_cpu2_system_part_comm.impl
    calls
      main_call:  {
        call_entrypoint: subprogram the_cpu2_system_part_comProcess_the_cpu2_system_part_comm_entrypoint.impl;
        } 
      ;
      system_part_initPollCallSequence:  {
        the_cpu2_system_part_initCall: subprogram rtl8029_driver::rtl8029_init;
        } 
      ;
  end the_cpu2_system_part_comProcess_the_cpu2_system_part_comm.impl;
  
  thread the_cpu2_system_part_comProcess_the_cpu2_system_part_comm
  end the_cpu2_system_part_comProcess_the_cpu2_system_part_comm;
  
  subprogram the_proc1_the_sender_entrypoint
    features
      cnx_p_out: requires data access arinc653_runtime::Queuing_Port_Id_Type;
  end the_proc1_the_sender_entrypoint;
  
  subprogram implementation the_proc1_the_sender_entrypoint.impl
    subcomponents
      the_proc1_the_sender_runtime_call_ret: data arinc653_runtime::Return_Code_Type;
      p_out_localVariable: data common_pkg::Integer;
      p_out_Length: data arinc653_runtime::Message_Size_Type {
        Data_Model::Initial_Value => ("sizeof(common_pkg__Integer)");
        };
      p_out_TimeOut: data arinc653_runtime::System_Time_Type {
        Data_Model::Initial_Value => ("0");
        };
    annex behavior_specification {**
      variables
  whichPortActivated : test_network_rtl8029_remote_communications_refined_model::the_proc1_the_sender_behaviorIdentifier_enum ;
states
  BA_entrypoint_init_state : initial state ;
  BA_entrypoint_wait_dispatch_state : state ;
  BA_entrypoint_exec_state : state ;
  BA_entrypoint_final_state : final state ;
transitions
  call [0] : BA_entrypoint_exec_state -[whichPortActivated = the_proc1_the_sender_behaviorIdentifier_enum#Enumerators.default_behavior]-> BA_entrypoint_wait_dispatch_state {common_pkg::sender_spg ! (p_out_localVariable) ;
Send_Queuing_Message_Integer ! (cnx_p_out, p_out_localVariable, p_out_Length, p_out_TimeOut, the_proc1_the_sender_runtime_call_ret)} ;
  which_behavior_default_mode : BA_entrypoint_init_state -[]-> BA_entrypoint_exec_state {whichPortActivated := the_proc1_the_sender_behaviorIdentifier_enum#Enumerators.default_behavior} ;
  dispatch_transition : BA_entrypoint_wait_dispatch_state -[]-> BA_entrypoint_exec_state {arinc653_runtime::Periodic_Wait ! (the_proc1_the_sender_runtime_call_ret)} ;
**};
  end the_proc1_the_sender_entrypoint.impl;
  
  data the_proc1_the_sender_behaviorIdentifier_enum
    properties
      Data_Model::Data_Representation => Enum;
      Data_Model::Enumerators => ("default_behavior");
      Data_Model::Initial_Value => ("test_network_rtl8029_remote_communications_refined_model__the_proc1_the_sender_behaviorIdentifier_enum_default_behavior");
  end the_proc1_the_sender_behaviorIdentifier_enum;
  
  thread implementation the_proc1_the_sender.impl
    calls
      main_call:  {
        call_entrypoint: subprogram the_proc1_the_sender_entrypoint.impl;
        } 
      ;
    connections
      p_out_accessCnx_call_cnx: data access cnx_p_out -> call_entrypoint.cnx_p_out;
  end the_proc1_the_sender.impl;
  
  thread the_proc1_the_sender
    features
      cnx_p_out: requires data access arinc653_runtime::Queuing_Port_Id_Type;
  end the_proc1_the_sender;
  
  subprogram the_proc2_the_receiver_entrypoint
    features
      p_in: requires data access arinc653_runtime::Queuing_Port_Id_Type;
  end the_proc2_the_receiver_entrypoint;
  
  subprogram implementation the_proc2_the_receiver_entrypoint.impl
    subcomponents
      the_proc2_the_receiver_runtime_call_ret: data arinc653_runtime::Return_Code_Type;
      p_in_localVariable: data common_pkg::Integer;
      p_in_Length: data arinc653_runtime::Message_Size_Type {
        Data_Model::Initial_Value => ("sizeof(common_pkg__Integer)");
        };
      p_in_ErrorCode: data arinc653_runtime::Return_Code_Type {
        Data_Model::Initial_Value => ("0");
        };
      p_in_TimeOut: data arinc653_runtime::System_Time_Type {
        Data_Model::Initial_Value => ("0");
        };
    annex behavior_specification {**
      variables
  whichPortActivated : test_network_rtl8029_remote_communications_refined_model::the_proc2_the_receiver_behaviorIdentifier_enum ;
states
  BA_entrypoint_init_state : initial state ;
  BA_entrypoint_wait_dispatch_state : state ;
  BA_entrypoint_exec_state : state ;
  BA_entrypoint_final_state : final state ;
transitions
  call [0] : BA_entrypoint_exec_state -[whichPortActivated = the_proc2_the_receiver_behaviorIdentifier_enum#Enumerators.default_behavior]-> BA_entrypoint_wait_dispatch_state {Receive_Queuing_Message_Integer ! (p_in, p_in_TimeOut, p_in_localVariable, p_in_Length, p_in_ErrorCode) ;
if (p_in_ErrorCode = 0) common_pkg::receiver_spg ! (p_in_localVariable) end if
  } ;
  which_behavior_default_mode : BA_entrypoint_init_state -[]-> BA_entrypoint_exec_state {whichPortActivated := the_proc2_the_receiver_behaviorIdentifier_enum#Enumerators.default_behavior} ;
  dispatch_transition : BA_entrypoint_wait_dispatch_state -[]-> BA_entrypoint_exec_state {arinc653_runtime::Periodic_Wait ! (the_proc2_the_receiver_runtime_call_ret)} ;
**};
  end the_proc2_the_receiver_entrypoint.impl;
  
  data the_proc2_the_receiver_behaviorIdentifier_enum
    properties
      Data_Model::Data_Representation => Enum;
      Data_Model::Enumerators => ("default_behavior", "p_in");
      Data_Model::Initial_Value => ("test_network_rtl8029_remote_communications_refined_model__the_proc2_the_receiver_behaviorIdentifier_enum_default_behavior");
  end the_proc2_the_receiver_behaviorIdentifier_enum;
  
  thread implementation the_proc2_the_receiver.impl
    calls
      main_call:  {
        call_entrypoint: subprogram the_proc2_the_receiver_entrypoint.impl;
        } 
      ;
    connections
      p_in_accessCnx_call: data access p_in -> call_entrypoint.p_in;
  end the_proc2_the_receiver.impl;
  
  thread the_proc2_the_receiver
    features
      p_in: requires data access arinc653_runtime::Queuing_Port_Id_Type {
        Data_Model::Data_Representation => Integer;
        Data_Size => 4 Bytes;
        };
  end the_proc2_the_receiver;
  
  subprogram Receive_Queuing_Message_Integer
    extends arinc653_runtime::Receive_Queuing_Message
    features
      MESSAGE_ADDR: refined to out parameter common_pkg::Integer;
  end Receive_Queuing_Message_Integer;
  
  subprogram Send_Queuing_Message_Integer
    extends arinc653_runtime::Send_Queuing_Message
    features
      MESSAGE_ADDR: refined to in out parameter common_pkg::Integer;
  end Send_Queuing_Message_Integer;
end test_network_rtl8029_remote_communications_refined_model;
